<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="CFTautomation2" soapui-version="4.6.4" abortOnError="false" runType="SEQUENTIAL" resourceRoot="${projectDir}" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="Automation_TestSuite"/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value="TestDataFileLocation=C:\Users\nidhi\Documents\TestData\listtoplevelFee.xls RequestName=listtoplevelFee SetNo=1"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Automation_TestCase"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="npnSoap11" type="wsdl" bindingName="{http://nationalpayment.net/ws/definitions}npnSoap11" soapVersion="1_1" anonymous="optional" definition="http://qaws.cftpay.com:8080/wsrv/npn.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://qaws.cftpay.com:8080/wsrv/npn.wsdl"><con:part><con:url>http://qaws.cftpay.com:8080/wsrv/npn.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://nationalpayment.net/ws/definitions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:sch0="http://nationalpayment.net/ws/schemas/messages" xmlns:sch1="http://nationalpayment.net/ws/schemas/types" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://nationalpayment.net/ws/definitions">
  <wsdl:types>
    <schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://nationalpayment.net/ws/schemas/messages" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:ns0="http://nationalpayment.net/ws/schemas/types" xmlns:tns="http://nationalpayment.net/ws/schemas/messages" xmlns:xmime="http://www.w3.org/2005/05/xmlmime">
      <import namespace="http://nationalpayment.net/ws/schemas/types"/>
      <import namespace="http://nationalpayment.net/ws/schemas/types"/>
      <element name="ActivateSettlementRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="settlementId" type="long"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="ActivateSettlementResponse">
        <complexType>
          <sequence>
            <element name="settlementId" type="long"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="Schedules">
        <sequence>
          <element maxOccurs="unbounded" name="schedule" type="tns:ScheduleInfo"/>
        </sequence>
      </complexType>
      <complexType name="ScheduleInfo">
        <all>
          <element name="scheduleId" type="long"/>
          <element name="externalReferenceId" nillable="true" type="string"/>
          <element name="message" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="ClientStatuses">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="status" type="tns:ClientStatus"/>
        </sequence>
      </complexType>
      <simpleType name="ClientStatus">
        <restriction base="string">
          <enumeration value="INACTIVE"/>
          <enumeration value="ACTIVE"/>
          <enumeration value="COMPLETE"/>
          <enumeration value="CLOSED"/>
          <enumeration value="SUSPENDED"/>
          <enumeration value="DELETED"/>
          <enumeration value="ERRORS"/>
          <enumeration value="CANCELLED"/>
          <enumeration value="CANCELLATION_PENDING"/>
          <enumeration value="CANCELLATION_PROCESSED"/>
          <enumeration value="COMPLETE_PENDING"/>
        </restriction>
      </simpleType>
      <complexType name="SPAStatuses">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="status" type="tns:SPAStatus"/>
        </sequence>
      </complexType>
      <simpleType name="SPAStatus">
        <restriction base="string">
          <enumeration value="MISSING"/>
          <enumeration value="PENDING"/>
          <enumeration value="VERIFIED"/>
          <enumeration value="REJECTED"/>
        </restriction>
      </simpleType>
      <simpleType name="PostedTransactionStatus">
        <restriction base="string">
          <enumeration value="MATCHED"/>
          <enumeration value="UNMATCHED"/>
          <enumeration value="REJECTED"/>
          <enumeration value="AUTHORIZED"/>
          <enumeration value="AUTHORIZE_AND_ADVANCE"/>
          <enumeration value="AUTHORIZE_AND_LOAD"/>
          <enumeration value="REJECT_CONFIRMED"/>
        </restriction>
      </simpleType>
      <simpleType name="ErrorStatus">
        <restriction base="string">
          <enumeration value="NEW"/>
          <enumeration value="IN_PROCESS"/>
          <enumeration value="CLOSED"/>
        </restriction>
      </simpleType>
      <complexType name="PostedTransactionOrder">
        <sequence>
          <element name="orderBy" type="tns:PostedTransactionOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="PostedTransactionOrderBy">
        <restriction base="string">
          <enumeration value="ID"/>
          <enumeration value="CHECK_NUM"/>
          <enumeration value="POSTED_DATE"/>
          <enumeration value="POSTED_TRANSACTION_STATUS"/>
        </restriction>
      </simpleType>
      <complexType name="ClientBankOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:ClientBankOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="ClientBankOrderBy">
        <restriction base="string">
          <enumeration value="id"/>
          <enumeration value="accountNumber"/>
          <enumeration value="accountName"/>
          <enumeration value="createdOn"/>
          <enumeration value="modifiedOn"/>
          <enumeration value="modifiedBy"/>
        </restriction>
      </simpleType>
      <simpleType name="EnumNames">
        <restriction base="string">
          <enumeration value="ADDRESSTYPE"/>
          <enumeration value="APPROVALMODE"/>
          <enumeration value="APPROVALSTATUS"/>
          <enumeration value="APPROVALTYPE"/>
          <enumeration value="APPROVALATTEMPTDISPOSITION"/>
          <enumeration value="ATTRIBUTELEVELTYPE"/>
          <enumeration value="ATTRIBUTETYPE"/>
          <enumeration value="BANKACCOUNTTYPE"/>
          <enumeration value="COMISSIONSTRUCTURES"/>
          <enumeration value="CIPSTATUSES"/>
          <enumeration value="DOCUMENTBUSTYPE"/>
          <enumeration value="DOCUMENTTYPE"/>
          <enumeration value="DRAFTACCOUNTSTATUSES"/>
          <enumeration value="ENROLLMENTSTATUSES"/>
          <enumeration value="FEETYPE"/>
          <enumeration value="FEEFREQUENCYTYPE"/>
          <enumeration value="OFACSTATUSES"/>
          <enumeration value="POSITIVEPAYSCHEDULESTATUSES"/>
          <enumeration value="POSITIVEPAYLISTSTATUSES"/>
          <enumeration value="PROCESSINGOPERATIONCODES"/>
          <enumeration value="PHONETYPE"/>
          <enumeration value="SCHEDULESTATUS"/>
          <enumeration value="SERVICETYPE"/>
          <enumeration value="SETTLEMENTSTATUS"/>
          <enumeration value="SPASTATUSES"/>
          <enumeration value="SUBSCRIBERSTATUSES"/>
          <enumeration value="TRANSACTIONCLASS"/>
          <enumeration value="TRANSACTIONMETHOD"/>
          <enumeration value="TRANSACTIONSTATUS"/>
          <enumeration value="TRANSACTIONTYPE"/>
          <enumeration value="USERTYPE"/>
          <enumeration value="VIRTUALACCOUNTSTATUS"/>
          <enumeration value="SUBSCRIBERACCOUNTTYPE"/>
          <enumeration value="DRAFTSCHEDULESTATUS"/>
        </restriction>
      </simpleType>
      <simpleType name="DraftScheduleOrder">
        <restriction base="string">
          <enumeration value="scheduleDate"/>
          <enumeration value="scheduleId"/>
          <enumeration value="transactionDate"/>
          <enumeration value="transactionId"/>
          <enumeration value="status"/>
          <enumeration value="amount"/>
          <enumeration value="modifiedOn"/>
          <enumeration value="modifiedBy"/>
        </restriction>
      </simpleType>
      <complexType name="ScheduleIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="scheduleId" nillable="true" type="long"/>
        </sequence>
      </complexType>
      <simpleType name="CIPStatus">
        <restriction base="string">
          <enumeration value="PENDING"/>
          <enumeration value="VERIFIED"/>
          <enumeration value="REJECTED"/>
          <enumeration value="IGNORED"/>
        </restriction>
      </simpleType>
      <simpleType name="OFACStatus">
        <restriction base="string">
          <enumeration value="PENDING"/>
          <enumeration value="VERIFIED"/>
          <enumeration value="REJECTED"/>
          <enumeration value="IGNORED"/>
        </restriction>
      </simpleType>
      <complexType name="SubscriberIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="subscriberId" nillable="true" type="long"/>
        </sequence>
      </complexType>
      <complexType name="FeeOrder">
        <sequence>
          <element minOccurs="0" name="orderBy" type="tns:FeeOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="FeeOrderBy">
        <restriction base="string">
          <enumeration value="ID"/>
          <enumeration value="FEE_TYPE"/>
          <enumeration value="FEE_NAME"/>
          <enumeration value="FEE_AMOUNT"/>
        </restriction>
      </simpleType>
      <element name="AddReferralAffiliateRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element name="referralAffiliateId" type="long"/>
            <element name="referralAffiliateType" type="ns0:SubscriberAffiliateType"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="endDate" type="ns0:NpnDate"/>
            <element name="cycle1Amount" type="double"/>
            <element name="cycle2Amount" type="double"/>
          </all>
        </complexType>
      </element>
      <element name="AddReferralAffiliateResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminCreateAffiliateRequest">
        <complexType>
          <all>
            <element name="affiliate" type="ns0:AffiliateAdmin"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateAffiliateResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="affiliateId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminCreateInternalUserRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberIdList" nillable="true" type="tns:SubscriberIds"/>
            <element name="firstName" type="string"/>
            <element name="userName" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element name="lastName" type="string"/>
            <element name="email" type="string"/>
            <element name="phone" type="string"/>
            <element name="password" type="string"/>
            <element default="true" name="isActive" type="boolean"/>
            <element name="rolePermissions" type="ns0:RolePermissionList"/>
            <element default="true" name="isIpValidationRequired" type="boolean"/>
            <element minOccurs="0" name="ipAddresses" nillable="true" type="ns0:IpAddressesList"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateInternalUserResponse">
        <complexType>
          <sequence>
            <element name="userId" type="long"/>
            <element name="userName" type="string"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberRequest">
        <complexType>
          <all>
            <element name="subscriberName" type="string"/>
            <element name="address1" type="string"/>
            <element minOccurs="0" name="address2" nillable="true" type="string"/>
            <element name="city" type="string"/>
            <element name="state" type="string"/>
            <element name="zip" type="string"/>
            <element name="addressType" type="ns0:AddressType"/>
            <element name="commissionStructureName" type="string"/>
            <element name="contactName" type="string"/>
            <element minOccurs="0" name="website" nillable="true" type="string"/>
            <element name="phone" type="string"/>
            <element minOccurs="0" name="mobilePhone" nillable="true" type="string"/>
            <element minOccurs="0" name="subscriberAbbreviation" nillable="true" type="string"/>
            <element default="1000" minOccurs="0" name="checkNumberStart" nillable="true" type="long"/>
            <element name="email" type="string"/>
            <element name="vertical" type="string"/>
            <element minOccurs="0" name="internalUserList" nillable="true" type="ns0:InternalUserList"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="subscriberId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element maxOccurs="unbounded" name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberBankAccountRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="routingNumber" type="string"/>
            <element name="accountType" type="ns0:AccountType"/>
            <element name="thresholdAmount" type="double"/>
            <element name="accountNumber" type="string"/>
            <element name="holdersName" type="string"/>
            <element name="subscriberAccountType" type="ns0:SubscriberAccountType"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberBankAccountResponse">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
            <element name="subscriberBankAccountId" type="long"/>
            <element name="subscriberAccountId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberDocumentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="base64EncodedContent" type="string"/>
            <element name="note" type="string"/>
            <element name="name" type="string"/>
            <element name="contentType" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberDocumentResponse">
        <complexType>
          <sequence>
            <element name="documentId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberFeesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="fees" type="ns0:CreateSubscriberFees"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberFeesResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberProcessorSetupRequest">
        <complexType>
          <all>
            <element name="transactionProcessors" type="ns0:TransactionProcessorListForCreateProcessorSetup"/>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminCreateSubscriberProcessorSetupResponse">
        <complexType>
          <all>
            <element name="subscriberProcessorSetupIds" type="ns0:SubscriberProcessorSetupIds"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetAffiliateListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="name" type="string"/>
            <element minOccurs="0" name="externalAffiliateId" type="string"/>
            <element minOccurs="0" name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element minOccurs="0" name="status" type="string"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:AffiliateListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetAffiliateListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element minOccurs="0" name="auditInfo" type="ns0:AuditInformation"/>
            <element name="affiliates">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="affiliate" type="ns0:AffiliateAdmin"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetAffiliateRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="affiliateId" type="long"/>
            <element minOccurs="0" name="externalAffiliateId" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetAffiliateResponse">
        <complexType>
          <sequence>
            <element name="affiliate" type="ns0:AffiliateAdmin"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetCFTBankAccountListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetCFTBankAccountListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="npnBankAccountList" type="ns0:NpnBankAccountList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetEnrollmentsRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="enrollmentIds" type="tns:EnrollmentIds"/>
            <element minOccurs="0" name="subscriberIds" type="tns:SubscriberIds"/>
            <element minOccurs="0" name="subscriberName" nillable="true" type="string"/>
            <element minOccurs="0" name="clientIds" type="ns0:ClientIds"/>
            <element minOccurs="0" name="firstname" nillable="true" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastname" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientIds" type="tns:ExternalClientIds"/>
            <element minOccurs="0" name="enrollmentStatuses" type="tns:ClientStatuses"/>
            <element minOccurs="0" name="cipStatuses" type="tns:CIPStatuses"/>
            <element minOccurs="0" name="ofacStatuses" type="tns:OFACStatuses"/>
            <element minOccurs="0" name="spaStatuses" type="tns:SPAStatuses"/>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="order" type="tns:EnrollmentOrder"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetEnrollmentsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="enrollments" type="ns0:Enrollment"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="ExternalClientIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="externalClientId" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="CIPStatuses">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="status" type="tns:CIPStatus"/>
        </sequence>
      </complexType>
      <complexType name="OFACStatuses">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="status" type="tns:OFACStatus"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:EnrollmentOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="EnrollmentOrderBy">
        <restriction base="string">
          <enumeration value="enrollmentId"/>
          <enumeration value="clientId"/>
          <enumeration value="subscriberName"/>
          <enumeration value="clientFirstName"/>
        </restriction>
      </simpleType>
      <complexType name="EnrollmentIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="enrollmentId" nillable="true" type="long"/>
        </sequence>
      </complexType>
      <element name="AdminGetInternalUserListRequest">
        <complexType>
          <all>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="orderBy" type="ns0:UserOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element default="true" minOccurs="0" name="isActive" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetInternalUserListResponse">
        <complexType>
          <sequence>
            <element name="userList" type="ns0:UserList"/>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="long"/>
            <element name="commandStatus" type="long"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetPostedTransactionListRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="postedTransactionStatus" type="tns:PostedTransactionStatus"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
            <element minOccurs="0" name="order" type="tns:PostedTransactionOrder"/>
            <element default="true" name="ascending" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetPostedTransactionListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="postedTransactionList" type="ns0:PostedTransactionList"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetSettlementListRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberName" nillable="true" type="string"/>
            <element minOccurs="0" name="clientName" nillable="true" type="string"/>
            <element minOccurs="0" name="settlementStatus" nillable="true" type="ns0:SettlementStatus"/>
            <element minOccurs="0" name="approvalStatus" nillable="true" type="ns0:ApprovalStatus"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:SettlementOrder"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSettlementListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="long"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="long"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="long"/>
            <element minOccurs="0" name="settlementList" nillable="true" type="ns0:SettlementList"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetSubscriberAccountsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="subscriberAccountId" nillable="true" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberAccountsResponse">
        <complexType>
          <all>
            <element name="subscriberAccountList">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="subscriberAccounts" nillable="true" type="ns0:SubscriberAccount"/>
                </sequence>
              </complexType>
            </element>
            <element name="commandStatus" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberBankAccountListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberBankAccountListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="subscriberBankAccountList" type="ns0:SubscriberBankAccountList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetSubscriberBankAccountRequest">
        <complexType>
          <all>
            <element name="subscriberBankAccountId" type="long"/>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberBankAccountResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="subscriberBankAccount" type="ns0:SubscriberBankAccount"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetSubscriberDetailRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberDetailResponse">
        <complexType>
          <sequence>
            <element name="subscriberName" type="string"/>
            <element name="address1" type="string"/>
            <element minOccurs="0" name="address2" nillable="true" type="string"/>
            <element name="city" type="string"/>
            <element name="state" type="string"/>
            <element name="zip" type="string"/>
            <element name="contactName" type="string"/>
            <element name="website" nillable="true" type="string"/>
            <element name="phone" type="string"/>
            <element name="mobilePhone" nillable="true" type="string"/>
            <element name="email" type="string"/>
            <element name="accountSetup" type="string"/>
            <element name="serviceCharge" type="string"/>
            <element name="status" type="string"/>
            <element minOccurs="0" name="subscriberAbbreviation" nillable="true" type="string"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="commissionStructureName" type="string"/>
            <element name="vertical" type="string"/>
            <element name="pendingSPAAs" type="long"/>
            <element name="pendingSettlements" type="long"/>
            <element name="totalEnrollments" type="long"/>
            <element name="commandStatus" type="int"/>
            <element maxOccurs="unbounded" name="errorMessage" type="string"/>
            <element minOccurs="0" name="internalUserList" nillable="true" type="ns0:InternalUserList"/>
            <element minOccurs="0" name="processingSettings" nillable="true" type="ns0:Settings"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetSubscriberDocumentListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberDocumentListResponse">
        <complexType>
          <all>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element minOccurs="0" name="subsriberDocuments" type="ns0:SubscriberDocuments"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberListRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>Returns a list of subscribers to the caller</documentation>
            </annotation>
            <element minOccurs="0" name="subscriberId" nillable="true" type="long"/>
            <element minOccurs="0" name="userId" nillable="true" type="long"/>
            <element minOccurs="0" name="name" nillable="true" type="string"/>
            <element minOccurs="0" name="contactName" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:SubscriberStatus"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:SubscriberOrder"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberListResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element minOccurs="0" name="subscriberList" nillable="true" type="ns0:SubscriberList"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberProcessorSetupRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSubscriberProcessorSetupResponse">
        <complexType>
          <all>
            <element name="subscriberProcessorSetups" nillable="true" type="ns0:SubscriberProcessorSetupList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetTransferBankAccountListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetTransferBankAccountListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="npnBankAccountList" type="ns0:NpnBankAccountList"/>
            <element name="subscriberBankAccountList" type="ns0:SubscriberBankAccountList"/>
            <element name="clientBankAccountList" type="ns0:ClientBankAccountList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminListSubscriberFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="type" nillable="true" type="ns0:FeeType"/>
            <element minOccurs="0" name="owner" nillable="true" type="string"/>
            <element default="true" minOccurs="0" name="ascending" nillable="true" type="boolean"/>
            <element minOccurs="0" name="order" type="tns:FeeOrder"/>
            <element default="1" minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element default="10" minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
            <element default="false" minOccurs="0" name="includeDeleted" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="AdminListSubscriberFeeResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="subscriberId" type="long"/>
            <element name="fees" type="ns0:SubscriberFees"/>
          </all>
        </complexType>
      </element>
      <element name="AdminListTopLevelFeeRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="type" nillable="true" type="ns0:FeeType"/>
          </all>
        </complexType>
      </element>
      <element name="AdminListTopLevelFeeResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="fees" type="ns0:TopLevelFees"/>
          </all>
        </complexType>
      </element>
      <element name="AdminRejectPostedTransactionRequest">
        <complexType>
          <all>
            <element name="postedTransactionId" type="long"/>
            <element name="confirmationCode" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminRejectPostedTransactionResponse">
        <complexType>
          <all>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateAffiliateRequest">
        <complexType>
          <all>
            <element name="affiliateId" type="long"/>
            <element name="affiliate" type="ns0:AffiliateAdminUpdate"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateAffiliateResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminUpdateEnrollmentRequest">
        <complexType>
          <all>
            <element name="enrollmentId" type="long"/>
            <element minOccurs="0" name="enrollDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="verticalId" type="long"/>
            <element minOccurs="0" name="isSvaCreated" type="boolean"/>
            <element minOccurs="0" name="areAllDocumentSigned" type="boolean"/>
            <element minOccurs="0" name="systemId" type="long"/>
            <element minOccurs="0" name="spaaApprovalRequired" type="boolean"/>
            <element minOccurs="0" name="draftAmount" type="double"/>
            <element minOccurs="0" name="mostRecentAction" type="string"/>
            <element minOccurs="0" name="enrollmentStatus" type="tns:ClientStatus"/>
            <element minOccurs="0" name="cipStatus" type="tns:CIPStatus"/>
            <element minOccurs="0" name="ofacStatus" type="tns:OFACStatus"/>
            <element minOccurs="0" name="spaStatus" type="tns:SPAStatus"/>
            <element minOccurs="0" name="spaRejectReason" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateEnrollmentResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="enrollmentId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateInternalUserRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberIdList" nillable="true" type="tns:SubscriberIds"/>
            <element name="userId" type="long"/>
            <element name="firstName" type="string"/>
            <element name="userName" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastName" nillable="true" type="string"/>
            <element name="email" type="string"/>
            <element name="phone" type="string"/>
            <element minOccurs="0" name="password" nillable="true" type="string"/>
            <element minOccurs="0" name="existingPassword" nillable="true" type="string"/>
            <element default="true" name="isActive" type="boolean"/>
            <element default="false" name="isLocked" type="boolean"/>
            <element name="rolePermissions" type="ns0:RolePermissionList"/>
            <element default="true" name="isIpValidationRequired" type="boolean"/>
            <element minOccurs="0" name="ipAddresses" nillable="true" type="ns0:IpAddressesList"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateInternalUserResponse">
        <complexType>
          <sequence>
            <element name="userId" type="long"/>
            <element name="userName" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminUpdateSubscriberBankAccountRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="subscriberBankAccountId" type="long"/>
            <element name="routingNumber" type="string"/>
            <element name="accountType" type="ns0:AccountType"/>
            <element name="thresholdAmount" type="double"/>
            <element name="accountNumber" type="string"/>
            <element name="holdersName" type="string"/>
            <element name="subscriberAccountType" type="ns0:SubscriberAccountType"/>
            <element default="false" name="subscriberAccountOverwrite" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateSubscriberBankAccountResponse">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
            <element name="subscriberBankAccountId" type="long"/>
            <element name="subscriberAccountId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateSubscriberFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="subscriberFeeId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalFeeId" nillable="true" type="string"/>
            <element name="amount" type="double"/>
            <element minOccurs="0" name="status" type="ns0:SubscriberFeeStatus"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateSubscriberFeeResponse">
        <complexType>
          <sequence>
            <element name="subscriberFeeId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminUpdateSubscriberRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="subscriberName" type="string"/>
            <element name="address1" type="string"/>
            <element minOccurs="0" name="address2" nillable="true" type="string"/>
            <element name="city" type="string"/>
            <element name="state" type="string"/>
            <element name="zip" type="string"/>
            <element name="addressType" type="ns0:AddressType"/>
            <element name="commissionStructureName" type="string"/>
            <element name="contactName" type="string"/>
            <element minOccurs="0" name="website" nillable="true" type="string"/>
            <element name="phone" type="string"/>
            <element minOccurs="0" name="mobilePhone" nillable="true" type="string"/>
            <element minOccurs="0" name="subscriberAbbreviation" nillable="true" type="string"/>
            <element name="email" type="string"/>
            <element minOccurs="0" name="subscriberStatus" nillable="true" type="ns0:SubscriberStatus"/>
            <element name="vertical" type="string"/>
            <element minOccurs="0" name="internalUserList" nillable="true" type="ns0:InternalUserList"/>
            <element minOccurs="0" name="checkNumberStart" nillable="true" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminUpdateSubscriberResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="subscriberId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element maxOccurs="unbounded" name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminViewEnrollmentRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>One of the enrollment,client or externalClient id should present</documentation>
            </annotation>
            <element minOccurs="0" name="enrollmentId" nillable="true" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminViewEnrollmentResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="enrollment" type="ns0:Enrollment"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AuthorizeAndAdjustPaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="postedTransactionId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AuthorizeAndAdjustPaymentResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AuthorizeAndAdvancePaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="postedTransactionId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AuthorizeAndAdvancePaymentResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AuthorizeAndLoadPaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="postedTransactionId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AuthorizeAndLoadPaymentResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AuthorizePaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="postedTransactionId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element default="false" name="load" type="boolean"/>
            <element default="false" name="adjust" type="boolean"/>
            <element default="false" name="advance" type="boolean"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AuthorizePaymentResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AuthRequest">
        <complexType>
          <all>
            <element name="username" type="string"/>
            <element name="password" type="string"/>
            <element minOccurs="0" name="ipAddress" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AuthResponse">
        <complexType>
          <sequence>
            <element name="username" type="string"/>
            <element name="password" type="string"/>
            <element name="user" nillable="true" type="ns0:UserInfo"/>
            <element name="subscriberList" nillable="true" type="ns0:Subscribers"/>
            <element minOccurs="0" name="affiliateIds">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="affiliateId" type="long"/>
                </sequence>
              </complexType>
            </element>
            <element minOccurs="0" name="clientDetails" type="ns0:ClientInfoForAuthResponse"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CancelEnrollmentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element name="cancelReasonCode" type="ns0:CancelReasonCode"/>
            <element name="cancelFeeAmt" type="double"/>
            <element minOccurs="0" name="comments" type="string"/>
            <element name="printCancelLetter" type="boolean"/>
            <element name="waiveCancelFee" type="boolean"/>
            <element name="waivePendingFee" type="boolean"/>
            <element default="USER" name="cancelledBy" type="ns0:CancelledBy"/>
          </all>
        </complexType>
      </element>
      <element name="CancelEnrollmentResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="ChangePasswordForTokenRequest">
        <complexType>
          <all>
            <element name="token" type="string"/>
            <element minOccurs="0" name="newPassword" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="ChangePasswordForTokenResponse">
        <complexType>
          <all>
            <element name="user" type="ns0:UserInfo"/>
          </all>
        </complexType>
      </element>
      <element name="ClientVerificationRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="ClientVerificationResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateReturnScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="scheduleDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="recoupFeeDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="feeScheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long"/>
            <element name="amount" type="double"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element name="transactionClass" type="ns0:ReturnTransactionClass"/>
            <element name="transactionMethod" type="ns0:ReturnTransactionMethod"/>
          </all>
        </complexType>
      </element>
      <element name="CreateReturnScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateSuscriberTemplateAssetRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="note" nillable="true" type="string"/>
            <element minOccurs="0" name="documentType" nillable="true" type="string"/>
            <element name="base64EncodedContent" type="string"/>
            <element name="contentType" type="string"/>
            <element name="documentName" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateSuscriberTemplateAssetResponse">
        <complexType>
          <sequence>
            <element name="documentId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateAdhocTransferRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="scheduleDate" type="ns0:NpnDate"/>
            <element name="amount" type="double"/>
            <element name="fromAccount" type="ns0:BankAccount"/>
            <element name="toAccount" type="ns0:BankAccount"/>
            <element name="comment" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateAdhocTransferResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateAffiliateRequest">
        <complexType>
          <all>
            <element name="affiliate" type="ns0:Affiliate"/>
          </all>
        </complexType>
      </element>
      <element name="CreateAffiliateResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="affiliateId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateAffiliateUserRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affilaiteId" type="long"/>
            <element name="firstName" type="string"/>
            <element name="userName" type="string"/>
            <element minOccurs="0" name="middleInitial" type="string"/>
            <element name="lastName" type="string"/>
            <element name="email" type="string"/>
            <element name="phone" type="string"/>
            <element name="password" type="string"/>
            <element minOccurs="0" name="addressLine1" type="string"/>
            <element minOccurs="0" name="addressLine2" type="string"/>
            <element minOccurs="0" name="city" type="string"/>
            <element minOccurs="0" name="state" type="string"/>
            <element minOccurs="0" name="zip" type="string"/>
            <element minOccurs="0" name="comment" type="string"/>
            <element default="true" name="isActive" type="boolean"/>
            <element name="rolePermissions" type="ns0:RolePermissionList"/>
            <element default="true" name="isIpValidationRequired" type="boolean"/>
            <element minOccurs="0" name="ipAddresses" type="ns0:IpAddressesList"/>
            <element name="userType" type="ns0:AffiliateUserType"/>
            <element default="true" name="isWelcomeMailRequired" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="CreateAffiliateUserResponse">
        <complexType>
          <sequence>
            <element name="userId" type="long"/>
            <element name="userName" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateApprovalAttemptRequest">
        <complexType>
          <all>
            <element name="approvalId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="approvalAttemptNote" nillable="true" type="string"/>
            <element name="approvalAttemptMode" nillable="true" type="ns0:ApprovalAttemptMode"/>
            <element minOccurs="0" name="approvalAttemptDisposition" nillable="true" type="ns0:ApprovalAttemptDisposition"/>
          </all>
        </complexType>
      </element>
      <element name="CreateApprovalAttemptResponse">
        <complexType>
          <sequence>
            <element name="approvalId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
            <element name="approvalAttemptId" type="long"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateAutoEnrollmentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="agencyId" type="long"/>
            <element minOccurs="0" name="agencyExternalId" type="string"/>
            <element minOccurs="0" name="dealerId" type="long"/>
            <element minOccurs="0" name="dealerExternalId" type="string"/>
            <element minOccurs="0" name="fiMgrId" type="long"/>
            <element minOccurs="0" name="fiMgrExternalId" type="string"/>
            <element minOccurs="0" name="externalId" type="string"/>
            <element name="clientContactInfo" type="ns0:ClientContactInfo"/>
            <element name="clientPaymentInfo" type="ns0:ClientPaymentInfo"/>
            <element name="lenderInfo" type="ns0:LenderInfo"/>
            <element name="debitAuthorization" type="ns0:DebitAuthorization"/>
            <element name="acknowledgment" type="ns0:Acknowledgment"/>
            <element minOccurs="0" name="comment" type="string"/>
            <element minOccurs="0" name="loanType" type="string"/>
            <element default="false" minOccurs="0" name="isHalfDraft" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="CreateAutoEnrollmentResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="clientId" type="long"/>
            <element minOccurs="0" name="enrollmentId" type="long"/>
            <element minOccurs="0" name="enrollmentErrors">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="error" type="ns0:Error"/>
                </sequence>
              </complexType>
            </element>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateAutoNPNFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="agencyId" type="long"/>
            <element name="cycle1Fee" type="double"/>
            <element name="cycle2Fee" type="double"/>
            <element name="cycle3Fee" type="double"/>
            <element name="cycle4Fee" type="double"/>
          </all>
        </complexType>
      </element>
      <element name="CreateAutoNPNFeeResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateChannelAttributeRequest">
        <complexType>
          <all>
            <element name="channel" type="ns0:Channel"/>
            <element name="code" type="string"/>
            <element name="name" type="string"/>
            <element name="isRequired" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="CreateChannelAttributeResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="channelAttributeId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateClientBankAccountRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="routingNumber" type="string"/>
            <element name="accountType" type="ns0:AccountType"/>
            <element name="accountNumber" type="string"/>
            <element name="holdersName" type="string"/>
            <element minOccurs="0" name="externalBankId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateClientBankAccountResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
            <element name="clientBankAccountId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="CreateClientRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="referralId" nillable="true" type="ns0:ReferralId"/>
            <element minOccurs="0" name="channelId" nillable="true" type="long"/>
            <element minOccurs="0" name="productId" nillable="true" type="long"/>
            <element name="firstname" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element name="lastname" type="string"/>
            <element minOccurs="0" name="ssn" nillable="true" type="string"/>
            <element minOccurs="0" name="dob" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="address1" nillable="true" type="string"/>
            <element minOccurs="0" name="address2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="phone" nillable="true" type="string"/>
            <element minOccurs="0" name="WorkNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="mobile" nillable="true" type="string"/>
            <element minOccurs="0" name="email" nillable="true" type="string"/>
            <element minOccurs="0" name="userName" nillable="true" type="string"/>
            <element name="draftAmount" type="double"/>
            <element minOccurs="0" name="coClients" type="ns0:CoSigners"/>
            <element minOccurs="0" name="svaDocument" type="ns0:SVADocument"/>
          </all>
        </complexType>
      </element>
      <element name="CreateClientResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="enrollmentId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateCoClientRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="coClientFirstname" type="string"/>
            <element name="coClientLastname" type="string"/>
            <element minOccurs="0" name="coClientMiddleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientSsn" nillable="true" type="string"/>
            <element name="coClientDob" type="ns0:NpnDate"/>
            <element minOccurs="0" name="coClientPhone" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientWorkNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientMobile" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientEmail" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateCoClientResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateInterClientTransferRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>Subscriber Id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="fromClientExternalId" nillable="true" type="string"/>
            <element minOccurs="0" name="fromClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="toClientExternalId" nillable="true" type="string"/>
            <element minOccurs="0" name="toClientId" nillable="true" type="string"/>
            <element name="amount" type="double"/>
            <element name="occurs" type="int"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="type" type="ns0:DraftType">
              <annotation>
                <documentation>Whether it is a Monthly or adhock draft</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="comment" nillable="true" type="string">
              <annotation>
                <documentation>Comments regarding the draft schedule</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="remark" nillable="true" type="string">
              <annotation>
                <documentation>Remarks</documentation>
              </annotation>
            </element>
            <element default="false" minOccurs="0" name="allowDuplicates" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="CreateInterClientTransferResponse">
        <complexType>
          <sequence>
            <element name="scheduleList" nillable="true" type="tns:Schedules"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateDraftItemsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="scheduleFrequencyType" type="ns0:DraftType">
              <annotation>
                <documentation>Whether it is a Biweekly, Monthly or adhock draft</documentation>
              </annotation>
            </element>
            <element name="scheduleList" type="ns0:ScheduleList"/>
          </all>
        </complexType>
      </element>
      <element name="CreateDraftItemsResponse">
        <complexType>
          <sequence>
            <element name="scheduleList" nillable="true" type="tns:Schedules"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateDraftScheduleRequest">
        <annotation>
          <documentation>Create list of draft schedules which will draw funds from clients bank account in to virtual
                bank account</documentation>
        </annotation>
        <complexType>
          <all>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>Subscriber Id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long">
              <annotation>
                <documentation>Client bank account id of the bank account from which draft are drawn</documentation>
              </annotation>
            </element>
            <element name="amount" type="double">
              <annotation>
                <documentation>Draft amount</documentation>
              </annotation>
            </element>
            <element name="occurs" type="int">
              <annotation>
                <documentation>Number of draft occurances</documentation>
              </annotation>
            </element>
            <element name="startDate" type="ns0:NpnDate">
              <annotation>
                <documentation>Draft start date</documentation>
              </annotation>
            </element>
            <element name="type" type="ns0:DraftType">
              <annotation>
                <documentation>Whether it is a Monthly or adhock draft</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="comment" nillable="true" type="string">
              <annotation>
                <documentation>Comments regarding the draft schedule</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="remark" nillable="true" type="string">
              <annotation>
                <documentation>Remarks</documentation>
              </annotation>
            </element>
            <element default="false" minOccurs="0" name="allowDuplicates" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="CreateDraftScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleList" nillable="true" type="tns:Schedules"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateEnrollmentDocumentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="note" nillable="true" type="string"/>
            <element minOccurs="0" name="documentType" nillable="true" type="string"/>
            <element name="base64EncodedContent" type="string"/>
            <element name="contentType" type="string"/>
            <element name="documentName" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateEnrollmentDocumentResponse">
        <complexType>
          <sequence>
            <element name="documentId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateEnrollmentErrorRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="errorCode" nillable="true" type="string"/>
            <element name="reason" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateEnrollmentErrorResponse">
        <complexType>
          <sequence>
            <element name="enrollmentErrorId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateEnrollmentTicketRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="transactionId" nillable="true" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element name="ticketType" type="string"/>
            <element minOccurs="0" name="ticketStatus" nillable="true" type="ns0:EnrollmentTicketStatus"/>
            <element name="subject" type="string"/>
            <element minOccurs="0" name="assigneeId" nillable="true" type="long"/>
            <element minOccurs="0" name="reviewDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="assosiatedAmount" nillable="true" type="double"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="message" nillable="true" type="string"/>
            <element minOccurs="0" name="referenceTicket" nillable="true" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="CreateEnrollmentTicketResponse">
        <complexType>
          <sequence>
            <element name="enrollmentTicketId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateFeeItemsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="scheduleList" type="ns0:FeeScheduleList"/>
          </all>
        </complexType>
      </element>
      <element name="CreateFeeItemsResponse">
        <complexType>
          <sequence>
            <element name="scheduleList" nillable="true" type="tns:Schedules"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateFeeScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberFeeId" type="long"/>
            <element name="amount" type="double"/>
            <element name="occurs" type="int"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="frequency" nillable="true" type="ns0:FeeFrequencyType"/>
            <element minOccurs="0" name="remark" nillable="true" type="string"/>
            <element minOccurs="0" name="settlementId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateFeeScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="scheduleIdList" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateGroupEnrollmentAffiliateRequest">
        <complexType>
          <all>
            <element name="enrollmentId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element name="subscriberAffiliateGroupId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="CreateGroupEnrollmentAffiliateResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateHierarchyAffiliateCommissionDistRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element minOccurs="0" name="referalId" type="long"/>
            <element minOccurs="0" name="fixed" type="ns0:FixedDistType"/>
            <element minOccurs="0" name="dealerId" type="long"/>
            <element minOccurs="0" name="payoutRule" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateHierarchyAffiliateCommissionDistResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateHierarchyEnrollmentAffiliateRequest">
        <complexType>
          <all>
            <element name="enrollmentId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element name="parentId" nillable="true" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="CreateHierarchyEnrollmentAffiliateResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreatePartialEnrollmentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="partialEnrollmentInfo" type="ns0:PartialEnrollmentInfo"/>
          </all>
        </complexType>
      </element>
      <element name="CreatePartialEnrollmentResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="partialEnrollmentId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreatePerformanceSettlementRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="payeeId" type="long"/>
            <element minOccurs="0" name="payeeAddressId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeExternalAddressId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeContactId" nillable="true" type="long"/>
            <element minOccurs="0" name="payeeExternalContactId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeBankAccountId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeBankExternalAccountId" nillable="true" type="string"/>
            <element name="currentBalance" type="double"/>
            <element name="settlementAmount" type="double"/>
            <element minOccurs="0" name="settlementReference" nillable="true" type="string"/>
            <element minOccurs="0" name="numPayments" nillable="true" type="ns0:positiveNumber"/>
            <element name="accountNumber" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="negotiator" nillable="true" type="string"/>
            <element default="true" name="isApprovalRequired" type="boolean"/>
            <element minOccurs="0" name="settlementPaymentList" nillable="true" type="ns0:SettlementPaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="CreatePerformanceSettlementResponse">
        <complexType>
          <sequence>
            <element name="settlementId" type="string"/>
            <element name="scheduleId" type="string"/>
            <element ref="ns0:serviceFault"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreatePositivePayListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="expandUpTo" nillable="true" type="ns0:NpnDate"/>
            <element name="paymentIdList" type="ns0:PaymentIdList"/>
          </all>
        </complexType>
      </element>
      <element name="CreatePositivePayListResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="paymentList" type="ns0:PaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="CreateRuleSetRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="name" type="string"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateRuleSetResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateSettlementScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="payeeId" type="long"/>
            <element minOccurs="0" name="payeeAddressId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeExternalAddressId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeContactId" nillable="true" type="long"/>
            <element minOccurs="0" name="payeeExternalContactId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeBankAccountId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeBankExternalAccountId" nillable="true" type="string"/>
            <element name="currentBalance" type="double"/>
            <element name="settlementAmount" type="double"/>
            <element minOccurs="0" name="settlementReference" nillable="true" type="string"/>
            <element minOccurs="0" name="numPayments" nillable="true" type="ns0:positiveNumber"/>
            <element name="accountNumber" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="negotiator" nillable="true" type="string"/>
            <element default="true" name="isApprovalRequired" type="boolean"/>
            <element minOccurs="0" name="settlementScheduleList" nillable="true" type="ns0:SettlementScheduleList"/>
          </all>
        </complexType>
      </element>
      <element name="CreateSettlementScheduleResponse">
        <complexType>
          <sequence>
            <element name="settlementId" type="string"/>
            <element name="scheduleId" type="string"/>
            <element ref="ns0:serviceFault"/>
          </sequence>
        </complexType>
      </element>
      <element name="InstantRemittanceRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="transactionMethod" type="ns0:InstantPaymentTransactionMethod"/>
            <element minOccurs="0" name="settlementId" nillable="true" type="long"/>
            <element minOccurs="0" name="srcAccountNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="paymentAccountNumber" nillable="true" type="string"/>
            <element name="payeePaypalId" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element name="amount" type="double"/>
          </all>
        </complexType>
      </element>
      <element name="InstantRemittanceResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="transactionId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateSubscriberAffiliateConfigsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="partnerId" type="long"/>
            <element name="affiliateConfigs">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="config">
                    <complexType>
                      <sequence>
                        <element name="name" type="ns0:AffiliateConfig"/>
                        <element name="value" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="CreateSubscriberAffiliateConfigsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="affiliateConfigId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateSubscriberPartnerRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="partner" type="ns0:Partner"/>
            <element minOccurs="0" name="partnerConfigs">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="config">
                    <complexType>
                      <sequence>
                        <element name="name" type="string"/>
                        <element name="value" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="CreateSubscriberPartnerResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="partnerId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateSubscriberFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="fee" type="ns0:SubscriberFeeRequest"/>
          </all>
        </complexType>
      </element>
      <element name="CreateSubscriberFeeResponse">
        <complexType>
          <sequence>
            <element name="subscriberFeeId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateSubscriberPayeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="subscriberPayeeId" nillable="true" type="string"/>
            <element name="payeeName" type="string"/>
            <element default="true" minOccurs="0" name="payeeStatus" nillable="true" type="boolean"/>
            <element minOccurs="0" name="payeeDescription" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeWebsite" nillable="true" type="string"/>
            <element minOccurs="0" name="externalPayeeId" nillable="true" type="long"/>
            <element minOccurs="0" name="faxNo" nillable="true" type="string"/>
            <element minOccurs="0" name="phoneNo" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeAdresses" nillable="true">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="address" nillable="true" type="ns0:Address"/>
                </sequence>
              </complexType>
            </element>
            <element minOccurs="0" name="payeeContacts" nillable="true">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="contact" nillable="true" type="ns0:Contact"/>
                </sequence>
              </complexType>
            </element>
            <element minOccurs="0" name="payeeBankAccounts" nillable="true">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="account" nillable="true" type="ns0:Account"/>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="CreateSubscriberPayeeResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="payeeAddresses" nillable="true" type="ns0:AddressesIds"/>
            <element minOccurs="0" name="payeeContacts" nillable="true" type="ns0:ContactsIds"/>
            <element minOccurs="0" name="payeeBankAccounts" nillable="true" type="ns0:BankAccountIds"/>
            <element name="payeeId" type="long"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateSubscriberUserRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="firstName" type="string"/>
            <element name="userName" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element name="lastName" type="string"/>
            <element name="email" type="string"/>
            <element name="phone" type="string"/>
            <element name="password" type="string"/>
            <element minOccurs="0" name="addressLine1" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element default="true" name="isActive" type="boolean"/>
            <element name="rolePermissions" type="ns0:RolePermissionList"/>
            <element default="true" name="isIpValidationRequired" type="boolean"/>
            <element minOccurs="0" name="ipAddresses" nillable="true" type="ns0:IpAddressesList"/>
          </all>
        </complexType>
      </element>
      <element name="CreateSubscriberUserResponse">
        <complexType>
          <sequence>
            <element name="userId" type="long"/>
            <element name="userName" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="DelayDraftRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element name="currentDraftDate" type="ns0:NpnDate"/>
            <element name="newDraftDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="comment" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="DelayDraftResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetAffiliateDocumentListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="affiliateId" type="long"/>
            <element minOccurs="0" name="externalAffiliateId" type="string"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:AffiliateDocumentListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateDocumentListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element name="documents">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="document" type="ns0:AffiliateDocument"/>
                </sequence>
              </complexType>
            </element>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetAffiliateListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="name" type="string"/>
            <element minOccurs="0" name="externalAffiliateId" type="string"/>
            <element minOccurs="0" name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element minOccurs="0" name="status" type="ns0:AffiliateStatus"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:AffiliateListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="affiliates">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="affiliate" type="ns0:Affiliate"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetAffiliateRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="affiliateId" type="long"/>
            <element minOccurs="0" name="externalAffiliateId" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateResponse">
        <complexType>
          <sequence>
            <element name="affiliate" type="ns0:Affiliate"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetAffiliateClientsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="firstname" nillable="true" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastname" nillable="true" type="string"/>
            <element minOccurs="0" name="ssn" nillable="true" type="string"/>
            <element minOccurs="0" name="email" nillable="true" type="string"/>
            <element minOccurs="0" name="keyWord" nillable="true" type="string"/>
            <element minOccurs="0" name="statuses" type="tns:ClientStatuses"/>
            <element minOccurs="0" name="spaStatuses" type="tns:SPAStatuses"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="enrollmentFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="enrollmentToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="phoneNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine1" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="loanNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="lenderName" nillable="true" type="string"/>
            <element minOccurs="0" name="VIN" nillable="true" type="string"/>
            <element minOccurs="0" name="routingNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="accountNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="order" type="tns:AffiliateClientOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateClientsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="client" type="ns0:Client"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="AffiliateClientOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:AffiliateClientOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="AffiliateClientOrderBy">
        <restriction base="string">
          <enumeration value="id"/>
          <enumeration value="firstName"/>
          <enumeration value="lastName"/>
          <enumeration value="email"/>
          <enumeration value="createdOn"/>
          <enumeration value="modifiedOn"/>
          <enumeration value="modifiedBy"/>
          <enumeration value="enrolledOn"/>
        </restriction>
      </simpleType>
      <element name="GetAffiliateHierarchyRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateHierarchyResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="hierarchy">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="affiliate">
                    <complexType>
                      <sequence>
                        <element name="subscriberId" type="long"/>
                        <element name="affiliateId" type="long"/>
                        <element name="externalAffiliateId" nillable="true" type="string"/>
                        <element name="parentAffiliateId" nillable="true" type="long"/>
                        <element name="parentExternalAffiliateId" nillable="true" type="string"/>
                        <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
                        <element name="name" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetAffiliateScheduleListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="endDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="order" nillable="true" type="tns:DraftScheduleOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
            <element name="transactionClass" type="ns0:TransactionClass"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateScheduleListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="schedules" nillable="true" type="ns0:ScheduleDraft"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetAffiliateTransactionListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="type" nillable="true">
              <simpleType>
                <restriction base="string">
                  <enumeration value="DRAFT"/>
                  <enumeration value="PAYMENT"/>
                  <enumeration value="FEE"/>
                  <enumeration value="SERVICE"/>
                </restriction>
              </simpleType>
            </element>
            <element minOccurs="0" name="status" nillable="true" type="ns0:TransactionStatus"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateTransactionListResponse">
        <complexType>
          <all>
            <element name="returnCount" type="int"/>
            <element name="totalCount" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element minOccurs="0" name="transactions" type="ns0:Transactions"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateUserListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:AffiliateUserOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetAffiliateUserListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" type="int"/>
            <element minOccurs="0" name="returnedCount" type="int"/>
            <element minOccurs="0" name="pageNumber" type="int"/>
            <element name="userList" type="ns0:UserList"/>
            <element name="commandStatus" type="long"/>
            <element minOccurs="0" name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetAllOverriddenSubscriberFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetAllOverriddenSubscriberFeeResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="overriddenFees">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="fee">
                    <complexType>
                      <sequence>
                        <element name="feeId" type="long"/>
                        <element name="feeAmount" type="double"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetApprovalsByIdRequest">
        <complexType>
          <all>
            <element name="approvalId" type="long"/>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetApprovalsByIdResponse">
        <complexType>
          <sequence>
            <element name="approval" nillable="true" type="ns0:Approval"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetAutoEnrollmentDetailFromStoneEagleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="dealNumber" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetAutoEnrollmentDetailFromStoneEagleResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="dms">
              <complexType>
                <sequence>
                  <element name="buyer">
                    <complexType>
                      <sequence>
                        <element minOccurs="0" name="firstName" type="string"/>
                        <element minOccurs="0" name="lastName" type="string"/>
                        <element minOccurs="0" name="birthDate" type="ns0:NpnDate"/>
                        <element minOccurs="0" name="phone1" type="string"/>
                        <element minOccurs="0" name="phone2" type="string"/>
                        <element minOccurs="0" name="cellPhone" type="string"/>
                        <element minOccurs="0" name="address" type="string"/>
                        <element minOccurs="0" name="city" type="string"/>
                        <element minOccurs="0" name="state" type="string"/>
                        <element minOccurs="0" name="zip" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                  <element name="vehicle">
                    <complexType>
                      <sequence>
                        <element minOccurs="0" name="vin" type="string"/>
                        <element minOccurs="0" name="year" type="string"/>
                        <element minOccurs="0" name="make" type="string"/>
                        <element minOccurs="0" name="model" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                  <element name="financing">
                    <complexType>
                      <sequence>
                        <element minOccurs="0" name="dealType" type="string"/>
                        <element minOccurs="0" name="monthlyPayment" type="string"/>
                        <element minOccurs="0" name="contractDate" type="ns0:NpnDate"/>
                        <element minOccurs="0" name="firstPaymentDate" type="ns0:NpnDate"/>
                      </sequence>
                    </complexType>
                  </element>
                  <element name="lender">
                    <complexType>
                      <sequence>
                        <element minOccurs="0" name="bankName" type="string"/>
                        <element minOccurs="0" name="address" type="string"/>
                        <element minOccurs="0" name="city" type="string"/>
                        <element minOccurs="0" name="state" type="string"/>
                        <element minOccurs="0" name="zip" type="string"/>
                        <element minOccurs="0" name="phone" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetBankListRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>"Schedule Id will be the first preference here.."</documentation>
            </annotation>
            <element minOccurs="0" name="bankName" nillable="true" type="string"/>
            <element minOccurs="0" name="routing_number" nillable="true" type="string"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
            <element minOccurs="0" name="order" type="tns:BankListOrder"/>
            <element default="true" name="ascending" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetBankListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="bankList" type="tns:BankList"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="BankListOrder">
        <sequence>
          <element name="orderBy" type="tns:BankListOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="BankListOrderBy">
        <restriction base="string">
          <enumeration value="ID"/>
          <enumeration value="NAME"/>
          <enumeration value="ROUTING_NUMBER"/>
        </restriction>
      </simpleType>
      <complexType name="BankList">
        <sequence>
          <element maxOccurs="unbounded" name="bank" type="tns:Bank"/>
        </sequence>
      </complexType>
      <complexType name="Bank">
        <sequence>
          <element name="id" type="long"/>
          <element name="bankName" type="string"/>
          <element name="address1" type="string"/>
          <element name="address2" type="string"/>
          <element name="city" type="string"/>
          <element name="routing_number" type="string"/>
          <element minOccurs="0" name="state" nillable="true" type="string"/>
          <element minOccurs="0" name="zipcode" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <element name="GetCheckNumberRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetCheckNumberResponse">
        <complexType>
          <all>
            <element name="checkNumber" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetChildAffiliateListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="name" type="string"/>
            <element minOccurs="0" name="parentId" type="long"/>
            <element minOccurs="0" name="parentExternalAffiliateId" type="string"/>
            <element minOccurs="0" name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element minOccurs="0" name="status" type="ns0:AffiliateStatusList"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:AffiliateListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetChildAffiliateListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="affiliates">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="affiliate" type="ns0:Affiliate"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientBankAccountListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="createdFrom" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="createdTo" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedFrom" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedTo" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientBankAccountListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="clientBankAccountList" type="ns0:ClientBankAccountList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientBankAccountRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long"/>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientBankAccountResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="bankInfo" nillable="true" type="ns0:BankInfo"/>
            <element minOccurs="0" name="externalBankId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientIdsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="noOfIds" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientIdsResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientIds" type="ns0:ClientIds"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientSettlementListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:SettlementStatus"/>
            <element minOccurs="0" name="approvalStatus" nillable="true" type="ns0:ApprovalStatus"/>
            <element name="fromDate" type="ns0:NpnDate"/>
            <element name="toDate" type="ns0:NpnDate"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:SettlementOrder"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientSettlementListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="long"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="long"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="long"/>
            <element minOccurs="0" name="settlementList" nillable="true" type="ns0:SettlementList"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientSettlementRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="settlementId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientSettlementResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="settlementList" nillable="true" type="ns0:SettlementList"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientStatusRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientStatusResponse">
        <complexType>
          <sequence>
            <element name="enrollmentId" nillable="true" type="long"/>
            <element name="enrollmentDate" type="ns0:NpnDate"/>
            <element name="spaaApprovaalId" nillable="true" type="long"/>
            <element name="spaaApprovaalStatus" nillable="true" type="string"/>
            <element name="spaaStatus" nillable="true" type="string"/>
            <element name="firstDraftDate" nillable="true" type="ns0:NpnDate"/>
            <element name="firstDraftAmount" nillable="true" type="double"/>
            <element name="firstDraftBankAccount" nillable="true" type="string"/>
            <element name="firstDraftBankName" nillable="true" type="string"/>
            <element name="defalutDraftAmount" nillable="true" type="double"/>
            <element name="firstDraftStatus" nillable="true" type="string"/>
            <element name="firstSettlementDate" nillable="true" type="ns0:NpnDate"/>
            <element name="firstSettlementAccountInfo" nillable="true" type="string"/>
            <element name="firstSettlementStatus" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="firstname" nillable="true" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastname" nillable="true" type="string"/>
            <element minOccurs="0" name="ssn" nillable="true" type="string"/>
            <element minOccurs="0" name="email" nillable="true" type="string"/>
            <element minOccurs="0" name="keyWord" nillable="true" type="string"/>
            <element minOccurs="0" name="statuses" type="tns:ClientStatuses"/>
            <element minOccurs="0" name="spaStatuses" type="tns:SPAStatuses"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="enrollmentFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="enrollmentToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="phoneNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine1" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="loanNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="lenderName" nillable="true" type="string"/>
            <element minOccurs="0" name="VIN" nillable="true" type="string"/>
            <element minOccurs="0" name="routingNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="accountNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="order" type="tns:ClientOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
            <element default="true" minOccurs="0" name="skipDeleted" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="client" type="ns0:Client"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="ClientOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:ClientOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="ClientOrderBy">
        <restriction base="string">
          <enumeration value="id"/>
          <enumeration value="firstName"/>
          <enumeration value="lastName"/>
          <enumeration value="email"/>
          <enumeration value="createdOn"/>
          <enumeration value="modifiedOn"/>
          <enumeration value="modifiedBy"/>
          <enumeration value="enrolledOn"/>
        </restriction>
      </simpleType>
      <element name="GetClientRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="status" nillable="true" type="string"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element default="false" minOccurs="0" name="returnSPAAImage" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="client" type="ns0:Client"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetDocumentByIdRequest">
        <complexType>
          <all>
            <element name="documentId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetDocumentByIdResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="document" type="ns0:Document"/>
            <element name="commandStatus" type="int"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetDelayDraftChangedDatesRequest">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element name="currentDraftDate" type="ns0:NpnDate"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetDelayDraftChangedDatesResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="delayDraftChangedDatesList" type="ns0:NpnDate"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetDraftErrorListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="transactionType">
              <simpleType>
                <restriction base="string">
                  <enumeration value="DRAFT"/>
                  <enumeration value="PAYMENT"/>
                  <enumeration value="FEE"/>
                  <enumeration value="SERVICE"/>
                </restriction>
              </simpleType>
            </element>
            <element name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="GetDraftErrorListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="DraftErrorList" nillable="true" type="ns0:DraftError"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetDraftScheduleListRequest">
        <annotation>
          <documentation>Get draft schedules for a client for a given period</documentation>
          <documentation>"Initially Modified From/To date will query against the modified dates ,if its null it will check against the created date.."</documentation>
        </annotation>
        <complexType>
          <all>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>Subscriber Id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="scheduleIds" type="tns:ScheduleIds"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="startDate" nillable="true" type="ns0:NpnDate">
              <annotation>
                <documentation>start date of the look up period</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="endDate" nillable="true" type="ns0:NpnDate">
              <annotation>
                <documentation>end date of the look up period</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="order" nillable="true" type="tns:DraftScheduleOrder">
              <annotation>
                <documentation>field to order the draft list</documentation>
              </annotation>
            </element>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing">
              <annotation>
                <documentation>we can filter the drafts by draft status</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber">
              <annotation>
                <documentation>page number for pagination</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber">
              <annotation>
                <documentation>number of draft schedules per page for pagination</documentation>
              </annotation>
            </element>
          </all>
        </complexType>
      </element>
      <element name="GetDraftScheduleListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long">
              <annotation>
                <documentation>total number of draft schedules that match searching criteria</documentation>
              </annotation>
            </element>
            <element name="returnedCount" type="long">
              <annotation>
                <documentation>number of draft schedules in curant page</documentation>
              </annotation>
            </element>
            <element name="pageNumber" type="long">
              <annotation>
                <documentation>current page number</documentation>
              </annotation>
            </element>
            <element maxOccurs="unbounded" minOccurs="0" name="drafts" nillable="true" type="ns0:ScheduleDraft">
              <annotation>
                <documentation>list of draft schedules</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetDraftScheduleListWithNextDateRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>Subscriber Id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="scheduleIds" type="tns:ScheduleIds"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the
							client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="startDate" nillable="true" type="ns0:NpnDate">
              <annotation>
                <documentation>start date of the look up period</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="endDate" nillable="true" type="ns0:NpnDate">
              <annotation>
                <documentation>end date of the look up period</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="order" nillable="true" type="tns:DraftScheduleOrder">
              <annotation>
                <documentation>field to order the draft list</documentation>
              </annotation>
            </element>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing">
              <annotation>
                <documentation>we can filter the drafts by draft status</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber">
              <annotation>
                <documentation>page number for pagination</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber">
              <annotation>
                <documentation>number of draft schedules per page for pagination</documentation>
              </annotation>
            </element>
          </all>
        </complexType>
      </element>
      <element name="GetDraftScheduleListWithNextDateResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long">
              <annotation>
                <documentation>total number of draft schedules that match searching criteria</documentation>
              </annotation>
            </element>
            <element name="returnedCount" type="long">
              <annotation>
                <documentation>number of draft schedules in curant page</documentation>
              </annotation>
            </element>
            <element name="pageNumber" type="long">
              <annotation>
                <documentation>current page number</documentation>
              </annotation>
            </element>
            <element maxOccurs="unbounded" minOccurs="0" name="drafts" nillable="true" type="ns0:ScheduleDraft">
              <annotation>
                <documentation>list of draft schedules</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetDraftScheduleModifiableDatesRequest">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetDraftScheduleModifiableDatesResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="modifiableDatesList" type="ns0:NpnDate"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetDraftScheduleRequest">
        <annotation>
          <documentation>Get draft schedule by schedule id</documentation>
        </annotation>
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long">
              <annotation>
                <documentation>schedule id of the draft schedule</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>subscriber id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetDraftScheduleResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="draft" nillable="true" type="ns0:ScheduleDraft"/>
            <element minOccurs="0" name="transactions" type="ns0:Transactions"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetEnrollmentAffiliateListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:EnrollmentAffiliateListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentAffiliateListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="affiliates">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="affiliate" type="ns0:Affiliate"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetEnrollmentChannelAttributeValuesListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:EnrollmentChannelAttributeValueOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentChannelAttributeValuesListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="enrollmentChannelAttributeValues">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="enrollmentChannelAttributeValue" type="ns0:EnrollmentChannelAttributeValue"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetEnrollmentCommentListRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>"Schedule Id will be the first preference here.."</documentation>
              <documentation>"Initially Modified From/To date will query against the modified dates ,if its null it will check against the created date.."</documentation>
            </annotation>
            <element minOccurs="0" name="commentId" nillable="true" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="enrollmentId" nillable="true" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
            <element minOccurs="0" name="order" type="tns:EnrollmentCommentListOrder"/>
            <element default="true" name="ascending" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentCommentListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="enrollmentComment" type="ns0:EnrollComment"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="EnrollmentCommentListOrder">
        <sequence>
          <element name="orderBy" type="tns:EnrollmentCommentListOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="EnrollmentCommentListOrderBy">
        <restriction base="string">
          <enumeration value="ID"/>
          <enumeration value="COMMENT"/>
          <enumeration value="PAGE_CONTEXT"/>
          <enumeration value="CREATED_ON"/>
          <enumeration value="CREATED_BY"/>
          <enumeration value="MODIFIED_BY"/>
          <enumeration value="MODIFIED_ON"/>
        </restriction>
      </simpleType>
      <element name="GetEnrollmentCountRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="endDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="statuses" type="tns:ClientStatuses"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentCountResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="countInfos" type="ns0:CountInfos"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="status" nillable="true" type="string"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetEnrollmentDocumentListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
            <element minOccurs="0" name="order" type="tns:EnrollmentDocumentOrder"/>
            <element default="true" name="ascending" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentDocumentListResponse">
        <complexType>
          <all>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element minOccurs="0" name="enrollmentDocuments" type="ns0:EnrollmentDocuments"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </all>
        </complexType>
      </element>
      <complexType name="EnrollmentDocumentOrder">
        <sequence>
          <element name="orderBy" type="tns:EnrollmentDocumentOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="EnrollmentDocumentOrderBy">
        <restriction base="string">
          <enumeration value="ID"/>
          <enumeration value="NAME"/>
          <enumeration value="DESCRIPTION"/>
          <enumeration value="CONTENT_TYPE"/>
          <enumeration value="CREATED_ON"/>
          <enumeration value="CREATED_BY"/>
          <enumeration value="MODIFIED_BY"/>
          <enumeration value="MODIFIED_ON"/>
        </restriction>
      </simpleType>
      <element name="GetEnrollmentDocumentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="documentId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentDocumentResponse">
        <complexType>
          <all>
            <element name="enrollmentDocument" type="ns0:Document"/>
            <element name="commandStatus" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentErrorListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="tns:ErrorStatus"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
            <element name="fromDate" type="ns0:NpnDate"/>
            <element name="toDate" type="ns0:NpnDate"/>
            <element default="INACTIVE" minOccurs="0" name="enrollmentStatus" type="tns:ClientStatus"/>
            <element minOccurs="0" name="order" type="tns:ErrorListOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element name="pageNo" type="ns0:positiveNumber"/>
            <element name="resultsPerPage" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentErrorListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="int"/>
            <element name="totalUniqueClientCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="errors" nillable="true" type="ns0:EnrollmentError"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="ErrorListOrder">
        <sequence>
          <element name="orderBy" type="tns:ErrorListOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="ErrorListOrderBy">
        <restriction base="string">
          <enumeration value="ID"/>
          <enumeration value="STATUS"/>
          <enumeration value="REASON"/>
          <enumeration value="MODIFIED_ON"/>
          <enumeration value="CREATED_ON"/>
        </restriction>
      </simpleType>
      <element name="GetEnrollmentExceptionsListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="firstname" nillable="true" type="string"/>
            <element minOccurs="0" name="lastname" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="transactionClass" nillable="true">
              <simpleType>
                <restriction base="string">
                  <enumeration value="DRAFT"/>
                  <enumeration value="PAYMENT"/>
                  <enumeration value="FEE"/>
                </restriction>
              </simpleType>
            </element>
            <element minOccurs="0" name="code" nillable="true">
              <simpleType>
                <restriction base="string">
                  <enumeration value="GENERAL"/>
                  <enumeration value="NSF"/>
                  <enumeration value="DISPUTE"/>
                </restriction>
              </simpleType>
            </element>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="tns:EnrollmentExceptionsOrder"/>
            <element default="true" name="ascending" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentExceptionsListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="enrollmentExceptions" nillable="true" type="ns0:EnrollmentException"/>
          </sequence>
        </complexType>
      </element>
      <simpleType name="EnrollmentExceptionsOrder">
        <restriction base="string">
          <enumeration value="id"/>
          <enumeration value="nsfAmount"/>
          <enumeration value="code"/>
          <enumeration value="transactionClass"/>
        </restriction>
      </simpleType>
      <element name="GetEnrollmentPayeeRequest">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetEnrollmentPayeeResponse">
        <complexType>
          <sequence>
            <element name="enrollmentId" type="long"/>
            <element name="receivedDate" nillable="true" type="ns0:NpnDate"/>
            <element name="settlementAmount" nillable="true" type="double"/>
            <element name="balanceAmount" nillable="true" type="double"/>
            <element name="numberOfPayments" nillable="true" type="long"/>
            <element name="accountInfo" nillable="true" type="string"/>
            <element name="approvalRequired" nillable="true" type="boolean"/>
            <element name="settlementStatus" nillable="true" type="string"/>
            <element name="externalReferenceNumber" nillable="true" type="string"/>
            <element name="payeeId" nillable="true" type="long"/>
            <element name="payeeName" nillable="true" type="string"/>
            <element name="payeeAddress1" nillable="true" type="string"/>
            <element name="payeeAddress2" nillable="true" type="string"/>
            <element name="payeeCity" nillable="true" type="string"/>
            <element name="payeeState" nillable="true" type="string"/>
            <element name="payeeZip" nillable="true" type="string"/>
            <element name="payeeContactOfficePhone" nillable="true" type="string"/>
            <element name="payeeContactHomePhone" nillable="true" type="string"/>
            <element name="payeeContactMobilePhone" nillable="true" type="string"/>
            <element name="payeeContactEmail" nillable="true" type="string"/>
            <element name="payeeContactName" nillable="true" type="string"/>
            <element name="payeeContactDept" nillable="true" type="string"/>
            <element name="payeeContactFax" nillable="true" type="string"/>
            <element name="payeeStatus" nillable="true" type="boolean"/>
            <element name="payeeDescription" nillable="true" type="string"/>
            <element name="payeeWebsite" nillable="true" type="string"/>
            <element name="externalPayeeId" nillable="true" type="string"/>
            <element name="contactName" nillable="true" type="string"/>
            <element name="phone" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetEnrollmentTicketListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="asigneeId" nillable="true" type="long"/>
            <element minOccurs="0" name="ticketStatus" nillable="true" type="ns0:EnrollmentTicketStatus"/>
            <element minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
            <element minOccurs="0" name="order" nillable="true" type="tns:EnrollmentTicketOrder"/>
            <element default="true" name="ascending" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentTicketListResponse">
        <complexType>
          <all>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element minOccurs="0" name="enrollmentTickets" type="ns0:EnrollmentTickets"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </all>
        </complexType>
      </element>
      <complexType name="EnrollmentTicketOrder">
        <sequence>
          <element name="orderBy" type="tns:EnrollmentTicketOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="EnrollmentTicketOrderBy">
        <restriction base="string">
          <enumeration value="MODIFIED_BY"/>
          <enumeration value="MODIFIED_ON"/>
          <enumeration value="ASSIGNED_BY"/>
          <enumeration value="ASSIGNED_TO"/>
          <enumeration value="TYPE"/>
          <enumeration value="STATUS"/>
          <enumeration value="ID"/>
        </restriction>
      </simpleType>
      <element name="GetEnrollmentTicketRequest">
        <complexType>
          <all>
            <element name="enrollmentTicketId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetEnrollmentTicketResponse">
        <complexType>
          <sequence>
            <element name="enrollmentTicket" type="ns0:EnrollmentTicket"/>
            <element maxOccurs="unbounded" minOccurs="0" name="enrollmentComment" type="ns0:EnrollComment"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetExternalPayeeListByNameRequest">
        <complexType>
          <all>
            <element name="searchName" type="string"/>
            <element minOccurs="0" name="searchCity" nillable="true" type="string"/>
            <element minOccurs="0" name="searchState" nillable="true" type="string"/>
            <element minOccurs="0" name="searchAddress2" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetExternalPayeeListByNameResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element name="externalPayeeList" type="ns0:ExternalPayeeList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetFeeScheduleListRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>"Initially Modified From/To date will query against the modified dates ,if its null
                        it will check against the created date.."</documentation>
            </annotation>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="owner" nillable="true" type="ns0:FeeScheduleOwner"/>
            <element minOccurs="0" name="scheduleIds" type="tns:ScheduleIds"/>
            <element minOccurs="0" name="startDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="endDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="subscriberFeeId" nillable="true" type="long"/>
            <element default="false" minOccurs="0" name="filterReversedFees" nillable="true" type="boolean"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing"/>
            <element minOccurs="0" name="order" type="ns0:FeeScheduleOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element default="false" minOccurs="0" name="showRfee" nillable="true" type="boolean"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="GetFeeScheduleListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="fees" nillable="true" type="ns0:ScheduleFee"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetFeeScheduleRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetFeeScheduleResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="fee" nillable="true" type="ns0:SingleFeeSchedule"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetHierarchyAffiliateCommissionDistRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
          </all>
        </complexType>
      </element>
      <element name="GetHierarchyAffiliateCommissionDistResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="fixed" type="ns0:FixedDistTypeUnbounded"/>
            <element minOccurs="0" name="payoutRule" type="string"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetNewPositivePayListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="expandUpTo" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="maximumRecords" nillable="true" type="int"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:PaymentOrder"/>
          </all>
        </complexType>
      </element>
      <element name="GetNewPositivePayListResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="paymentList" nillable="true" type="ns0:PaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="GetNextScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="transactionClass" type="ns0:TransactionClass"/>
            <element name="clientId" type="string"/>
            <element name="status" type="ns0:ScheduleStatus"/>
          </all>
        </complexType>
      </element>
      <element name="GetNextScheduleResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="schedule" nillable="true" type="ns0:ScheduleDraft"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetOverriddenSubscriberFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="feeId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetOverriddenSubscriberFeeResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="feeAmount" type="double"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetPartialEnrollmentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="partialEnrollmentId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetPartialEnrollmentResponse">
        <complexType>
          <sequence>
            <element name="partialEnrollmentInfo" type="ns0:PartialEnrollmentInfo"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetPartialEnrollmentListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="affiliateId" type="long"/>
            <element minOccurs="0" name="searchFirstName" type="string"/>
            <element minOccurs="0" name="searchLastName" type="string"/>
            <element minOccurs="0" name="searchCity" type="string"/>
            <element minOccurs="0" name="searchState" type="string"/>
            <element minOccurs="0" name="status" type="ns0:PartialEnrollmentStatus"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:PartialEnrollmentListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetPartialEnrollmentListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="partialEnrollments">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="partialEnrollment" type="ns0:PartialEnrollmentInfo"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetPartnerListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="partnerId" nillable="true" type="long"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:PartnerListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetPartnerListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element minOccurs="0" name="partners">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="partner">
                    <complexType>
                      <sequence>
                        <element name="partner" type="ns0:Partner"/>
                        <element minOccurs="0" name="partnerConfigs">
                          <complexType>
                            <sequence>
                              <element maxOccurs="unbounded" name="config">
                                <complexType>
                                  <sequence>
                                    <element name="name" type="string"/>
                                    <element name="value" type="string"/>
                                  </sequence>
                                </complexType>
                              </element>
                            </sequence>
                          </complexType>
                        </element>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetPaymentDetailsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetPaymentDetailsResponse">
        <complexType>
          <all>
            <element name="paymentDetails" nillable="true" type="ns0:PaymentDetails"/>
          </all>
        </complexType>
      </element>
      <element name="GetPaymentListOnPositivePayRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="transactionMethod" nillable="true" type="ns0:TransactionMethod"/>
            <element minOccurs="0" name="scheduleStatus" nillable="true" type="ns0:PositivePayScheduleStatus"/>
            <element name="fromDate" type="ns0:NpnDate"/>
            <element name="toDate" type="ns0:NpnDate"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:PaymentOrder"/>
          </all>
        </complexType>
      </element>
      <element name="GetPaymentListOnPositivePayResponse">
        <complexType>
          <all>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element minOccurs="0" name="paymentList" nillable="true" type="ns0:PaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="GetPaymentListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientIds" type="ns0:ClientIds"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="scheduleIds" type="tns:ScheduleIds"/>
            <element minOccurs="0" name="transactionMethod" nillable="true" type="ns0:PaymentTransactionMethod"/>
            <element minOccurs="0" name="scheduleStatuses" nillable="true" type="ns0:ScheduleStatuses"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="fromAmount" nillable="true" type="long"/>
            <element minOccurs="0" name="toAmount" nillable="true" type="long"/>
            <element minOccurs="0" name="payeeName" nillable="true" type="string"/>
            <element minOccurs="0" name="clientName" nillable="true" type="string"/>
            <element minOccurs="0" name="checkNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="accountInfo" nillable="true" type="string"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:PaymentOrder"/>
          </all>
        </complexType>
      </element>
      <element name="GetPaymentListResponse">
        <complexType>
          <all>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element minOccurs="0" name="paymentList" nillable="true" type="ns0:PaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="GetPaymentMonitorListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="numberOfDays" type="int"/>
            <element minOccurs="0" name="searchText" nillable="true" type="string"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:PaymentMonitorListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetPaymentMonitorListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element name="paymentMonitorList">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="paymentMonitor" nillable="true" type="ns0:PaymentMonitor"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetPositivePayDetailsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="clientId" type="string"/>
            <element name="positivePayId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetPositivePayDetailsResponse">
        <complexType>
          <all>
            <element name="positivePayDetails" nillable="true" type="ns0:PositivePayDetails"/>
          </all>
        </complexType>
      </element>
      <element name="GetPositivePayInquiriesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="orderBy" nillable="true" type="ns0:PositivePayExceptionsOrder"/>
          </all>
        </complexType>
      </element>
      <element name="GetPositivePayInquiriesResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element name="positivePayInquiries" type="ns0:PositivePayInquiryList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetPositivePayListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:PaymentOrder"/>
          </all>
        </complexType>
      </element>
      <element name="GetPositivePayListResponse">
        <complexType>
          <all>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element minOccurs="0" name="paymentList" nillable="true" type="ns0:PaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="GetPostedTransactionRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="postedTransactionId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetPostedTransactionResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="postedTransaction" type="ns0:PostedTransaction"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetReferralAffiliateListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:AffiliateListOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetReferralAffiliateListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="affiliates">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="affiliate" type="ns0:Affiliate"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetResetPasswordTokenRequest">
        <complexType>
          <all>
            <element name="username" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetResetPasswordTokenResponse">
        <complexType>
          <all>
            <element name="username" type="string"/>
            <element name="email" nillable="true" type="string"/>
            <element name="token" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetRuleSetDefinitionRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
            <element minOccurs="0" name="affiliateId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalAffiliateId" nillable="true" type="string"/>
            <element minOccurs="0" name="order" type="tns:RuleSetOrderBy"/>
            <element default="true" name="ascending" type="boolean"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="GetRuleSetDefinitionResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
            <element minOccurs="0" name="ruleSetInfos" type="tns:RuleSetInfos"/>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="RuleSetInfos">
        <sequence>
          <element maxOccurs="unbounded" name="ruleSetInfo" type="ns0:RuleSetInfo"/>
        </sequence>
      </complexType>
      <simpleType name="RuleSetOrderBy">
        <restriction base="string">
          <enumeration value="id"/>
          <enumeration value="ruleSetId"/>
          <enumeration value="affiliateId"/>
        </restriction>
      </simpleType>
      <element name="GetRuleSetListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
            <element minOccurs="0" name="name" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:RuleSetStatus"/>
            <element minOccurs="0" name="createdOnStart" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="createdOnEnd" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="createdBy" nillable="true" type="string"/>
            <element minOccurs="0" name="modifiedOnStart" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedOnEnd" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedBy" nillable="true" type="string"/>
            <element minOccurs="0" name="order" type="tns:RulesetListOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element name="pageNo" type="ns0:positiveNumber"/>
            <element name="resultsPerPage" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="GetRuleSetListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="ruleSets" nillable="true" type="ns0:RuleSet"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="RulesetListOrder">
        <sequence>
          <element name="orderBy" type="tns:RulesetListOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="RulesetListOrderBy">
        <restriction base="string">
          <enumeration value="ID"/>
          <enumeration value="EXTERNAL_RULE_SET_ID"/>
          <enumeration value="NAME"/>
          <enumeration value="MODIFIED_ON"/>
          <enumeration value="MODIFIED_BY"/>
          <enumeration value="CREATED_ON"/>
          <enumeration value="CREATED_BY"/>
        </restriction>
      </simpleType>
      <element name="GetRuleSetRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetRuleSetResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
            <element minOccurs="0" name="name" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="string"/>
            <element name="commandStatus" nillable="true" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
            <element minOccurs="0" name="auditInfo" type="ns0:AuditInformation"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetScheduleListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="endDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="order" nillable="true" type="tns:DraftScheduleOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
            <element name="transactionClasses" type="ns0:TransactionClassList"/>
            <element default="false" minOccurs="0" name="showRfee" nillable="true" type="boolean"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetScheduleListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="schedules" nillable="true" type="ns0:ScheduleDraft"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetScheduleRequest">
        <annotation>
          <documentation>Get schedule by schedule id AND Transaction class</documentation>
        </annotation>
        <complexType>
          <all>
            <element name="scheduleId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="transactionClass" type="ns0:TransactionClass"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetScheduleResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="schedule" nillable="true" type="ns0:ScheduleDraft"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSettlementApprovalListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="approvalStatus" nillable="true" type="ns0:ApprovalStatus"/>
            <element name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="GetSettlementApprovalListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="approvals" nillable="true" type="ns0:Approval"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSettlementCountRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="endDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="statuses" type="tns:SettlementStatuses"/>
            <element default="false" name="moneySaved" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetSettlementCountResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="countInfos" type="ns0:CountInfos"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="statuses" type="tns:SettlementStatuses"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="SettlementStatuses">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="status" type="ns0:SettlementStatus"/>
        </sequence>
      </complexType>
      <element name="GetSPAForecastListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="subscriberFeeId" nillable="true" type="long"/>
            <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long"/>
            <element minOccurs="0" name="payeeId" nillable="true" type="long"/>
            <element minOccurs="0" name="forecasts" nillable="true" type="ns0:SPAAForecastRequestList"/>
            <element name="endDate" type="ns0:NpnDate"/>
          </all>
        </complexType>
      </element>
      <element name="GetSPAForecastListResponse">
        <complexType>
          <sequence>
            <element name="forecasts" type="ns0:SPAAForecasts"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSPAMonthlyBalanceListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="endDate" type="ns0:NpnDate"/>
          </all>
        </complexType>
      </element>
      <element name="GetSPAMonthlyBalanceListResponse">
        <complexType>
          <sequence>
            <element name="balances" type="ns0:SPAABalances"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetStatusEnumListRequest">
        <complexType>
          <all>
            <element name="enumName" type="tns:EnumNames"/>
          </all>
        </complexType>
      </element>
      <element name="GetStatusEnumListResponse">
        <complexType>
          <sequence>
            <element name="enumName" type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="enum" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSubscriberAffiliateConfigsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="affiliateId" nillable="true" type="long"/>
            <element minOccurs="0" name="orderBy" nillable="true" type="ns0:AffiliateConfigOrder"/>
            <element name="pageNo" type="positiveInteger"/>
            <element name="resultsPerPage" type="positiveInteger"/>
          </all>
        </complexType>
      </element>
      <element name="GetSubscriberAffiliateConfigsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="affiliateConfigs">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="config">
                    <complexType>
                      <sequence>
                        <element name="affiliateId" type="long"/>
                        <element name="partnerId" type="long"/>
                        <element name="name" type="ns0:AffiliateConfig"/>
                        <element name="value" type="string"/>
                        <element minOccurs="0" name="auditInformation" type="ns0:AuditInformation"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetSubscriberPayeeListByNameRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="searchName" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetSubscriberPayeeListByNameResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element name="payeeList" type="ns0:PayeeList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSubscriberPayeeListRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>"Enter payeeName to filter payees by name !"</documentation>
            </annotation>
            <element name="subscriberId" type="long"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="orderBy" type="ns0:SubscriberPayeeOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="payeeName" nillable="true" type="string"/>
            <element minOccurs="0" name="subscriberPayeeId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeId" nillable="true" type="long"/>
            <element minOccurs="0" name="status" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetSubscriberPayeeListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="payeeList" type="ns0:PayeeList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSubscriberPayeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="payeeId" nillable="true" type="long">
              <annotation>
                <documentation>Either payeeId or subscriberPayeeId is required.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="subscriberPayeeId" nillable="true" type="string">
              <annotation>
                <documentation>Either payeeId or subscriberPayeeId is required.</documentation>
              </annotation>
            </element>
          </all>
        </complexType>
      </element>
      <element name="GetSubscriberPayeeResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="payeeId" type="long"/>
            <element name="payee" type="ns0:PayeeInfo"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSubscriberUserListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="orderBy" type="ns0:UserOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element default="true" minOccurs="0" name="isActive" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetSubscriberUserListResponse">
        <complexType>
          <sequence>
            <element name="userList" type="ns0:UserList"/>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="long"/>
            <element name="commandStatus" type="long"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSummaryScheduleListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="scheduleIds" type="tns:ScheduleIds"/>
            <element minOccurs="0" name="externalReferenceIds" type="tns:ExternalReferenceIds"/>
            <element minOccurs="0" name="modifiedFrom" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedTo" nillable="true" type="ns0:NpnDate"/>
            <element name="transactionClass" type="ns0:TransactionClass"/>
          </all>
        </complexType>
      </element>
      <element name="GetSummaryScheduleListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="summaryScheduleList" type="tns:SummaryScheduleList"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="SummaryScheduleList">
        <sequence>
          <element maxOccurs="unbounded" name="scheduleSummary" type="ns0:ScheduleSummary"/>
        </sequence>
      </complexType>
      <complexType name="ExternalReferenceIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <element name="GetTransactionDetailsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="transactionId" nillable="true" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element default="false" name="includeCheckImage" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetTransactionDetailsResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="transaction" type="ns0:Transaction"/>
            <element name="base64EncodedFrontImageContent" nillable="true" type="string"/>
            <element name="base64EncodedBackImageContent" nillable="true" type="string"/>
            <element name="imageFileName" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetTransactionListByIdsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientIds" type="ns0:ClientIds"/>
            <element minOccurs="0" name="transactionIds" type="tns:TransactionIds"/>
            <element minOccurs="0" name="transactionClass" nillable="true" type="ns0:TransactionClass"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:TransactionStatus"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="GetTransactionListByIdsResponse">
        <complexType>
          <all>
            <element name="returnCount" type="int"/>
            <element name="totalCount" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element minOccurs="0" name="transactions" type="ns0:Transactions"/>
          </all>
        </complexType>
      </element>
      <complexType name="TransactionIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="transactionId" nillable="true" type="long"/>
        </sequence>
      </complexType>
      <element name="GetTransactionListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="type" nillable="true">
              <simpleType>
                <restriction base="string">
                  <enumeration value="DRAFT"/>
                  <enumeration value="PAYMENT"/>
                  <enumeration value="FEE"/>
                  <enumeration value="SERVICE"/>
                  <enumeration value="R_FEE"/>
                </restriction>
              </simpleType>
            </element>
            <element minOccurs="0" name="status" nillable="true" type="ns0:TransactionStatus"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element default="false" minOccurs="0" name="skipDeleted" nillable="true" type="boolean"/>
            <element minOccurs="0" name="order" type="tns:TransactionOrder"/>
            <element default="true" minOccurs="0" name="ascending" nillable="true" type="boolean"/>
            <element minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
            <element minOccurs="0" name="lastTransactionId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetTransactionListResponse">
        <complexType>
          <all>
            <element name="returnCount" type="int"/>
            <element name="totalCount" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element minOccurs="0" name="transactions" type="ns0:Transactions"/>
          </all>
        </complexType>
      </element>
      <complexType name="TransactionOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:TransactionOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="TransactionOrderBy">
        <restriction base="string">
          <enumeration value="transactionMethod"/>
          <enumeration value="scheduleDate"/>
          <enumeration value="completedDate"/>
          <enumeration value="transactionDate"/>
          <enumeration value="clearedDate"/>
          <enumeration value="trxID"/>
          <enumeration value="class"/>
          <enumeration value="source"/>
          <enumeration value="destination"/>
          <enumeration value="amount"/>
          <enumeration value="status"/>
        </restriction>
      </simpleType>
      <element name="GetTransactionMethodsRequest">
        <complexType>
          <all>
            <element name="transactionClass" type="ns0:TransactionClass"/>
          </all>
        </complexType>
      </element>
      <element name="GetTransactionMethodsResponse">
        <complexType>
          <sequence>
            <element name="transactionClass" type="string"/>
            <element name="transactionMethodsList" type="ns0:TransactionMethodsList"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetTransactionProcessorsRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="transactionProcessorType" nillable="true" type="string"/>
            <element minOccurs="0" name="direction" nillable="true" type="ns0:TransactionProcessorDirection"/>
          </all>
        </complexType>
      </element>
      <element name="GetTransactionProcessorsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="transactionProcessors" nillable="true" type="ns0:TransactionProcessorList"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetUnprocessedPostedTransactionListRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>"Return Posted Transactions that are unprocessed and unmatched to a Transaction.."</documentation>
            </annotation>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="postedTransactionStatus" type="tns:PostedTransactionStatus"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
            <element minOccurs="0" name="order" type="tns:PostedTransactionOrder"/>
            <element default="true" name="ascending" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetUnprocessedPostedTransactionListResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="postedTransactionList" type="ns0:PostedTransactionList"/>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetUserByIdRequest">
        <complexType>
          <all>
            <element name="userId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetUserByIdResponse">
        <complexType>
          <all>
            <element name="userInfo" type="ns0:UserInfo"/>
            <element name="subscriberList" nillable="true" type="ns0:Subscribers"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetUserRolesListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetUserRolesListResponse">
        <complexType>
          <sequence>
            <element name="userRoles" type="ns0:Roles"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetCancelReasonCodesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetCancelReasonCodesResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="codes">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="code">
                    <complexType>
                      <sequence>
                        <element name="reasonCode" type="string"/>
                        <element name="description" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetReturnListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientName" nillable="true" type="string"/>
            <element minOccurs="0" name="accountNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="modifiedby" nillable="true" type="string"/>
            <element minOccurs="0" name="startDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="endDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="order" nillable="true" type="ns0:ReturnScheduleOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="transactionClass" nillable="true" type="ns0:ReturnTransactionClass"/>
            <element minOccurs="0" name="transactionMethod" nillable="true" type="ns0:ReturnTransactionMethod"/>
          </all>
        </complexType>
      </element>
      <element name="GetReturnListResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="schedules" nillable="true" type="ns0:ScheduleReturn"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetReturnScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetReturnScheduleResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="schedules" nillable="true" type="ns0:ScheduleReturn"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetSubscriberTemplateAssetByIdRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="documentId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetSubscriberTemplateAssetByIdResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="document" type="ns0:Document"/>
            <element name="commandStatus" type="int"/>
          </sequence>
        </complexType>
      </element>
      <element name="ListEnrollmentFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="feeType" nillable="true" type="ns0:FeeType"/>
            <element minOccurs="0" name="ownerType" nillable="true" type="ns0:OwnerType"/>
          </all>
        </complexType>
      </element>
      <element name="ListEnrollmentFeeResponse">
        <complexType>
          <all>
            <element name="enrollmentId" type="long"/>
            <element name="fees" type="ns0:GetEnrollmentFees"/>
            <element name="transactionFees" type="ns0:SubscriberFees"/>
          </all>
        </complexType>
      </element>
      <element name="ListSubscriberFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="type" nillable="true" type="ns0:FeeType"/>
            <element default="true" minOccurs="0" name="ascending" nillable="true" type="boolean"/>
            <element minOccurs="0" name="order" type="tns:FeeOrder"/>
            <element default="1" minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element default="10" minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="ListSubscriberFeeResponse">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="fees" type="ns0:SubscriberFees"/>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="ListTopLevelFeeRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="type" nillable="true" type="ns0:FeeType"/>
          </all>
        </complexType>
      </element>
      <element name="ListTopLevelFeeResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="commandStatus" type="int"/>
            <element name="fees" type="ns0:TopLevelFees"/>
          </all>
        </complexType>
      </element>
      <element name="MakePhonePaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element name="checkNumber" type="string"/>
            <element minOccurs="0" name="creditorProcessingFee" nillable="true" type="double"/>
            <element minOccurs="0" name="creditorProcessingFeeCheckNumber" nillable="true" type="string"/>
            <element default="true" minOccurs="0" name="creditorProcessingFeeCombined" nillable="true" type="boolean"/>
            <element name="comment" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="MakePhonePaymentResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="ModifyDraftScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element name="currentDraftDate" type="ns0:NpnDate"/>
            <element name="newDraftDate" type="ns0:NpnDate"/>
          </all>
        </complexType>
      </element>
      <element name="ModifyDraftScheduleResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="ModifyHierarchyAffiliateCommissionDistRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="current">
              <complexType>
                <all>
                  <element name="affiliateId" type="long"/>
                  <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
                  <element minOccurs="0" name="referalId" type="long"/>
                </all>
              </complexType>
            </element>
            <element name="new">
              <complexType>
                <all>
                  <element name="affiliateId" type="long"/>
                  <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
                  <element minOccurs="0" name="referalId" type="long"/>
                  <element minOccurs="0" name="fixed" type="ns0:FixedDistType"/>
                  <element minOccurs="0" name="payoutRule" type="string"/>
                </all>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="ModifyHierarchyAffiliateCommissionDistResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="ModifyLoanAmountRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="enrollmentId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="newLoanAmount" type="double"/>
          </all>
        </complexType>
      </element>
      <element name="ModifyLoanAmountResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="ModifyLoanDueDateRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element name="currentLoanDueDate" type="ns0:NpnDate"/>
            <element name="newLoanDueDate" type="ns0:NpnDate"/>
          </all>
        </complexType>
      </element>
      <element name="ModifyLoanDueDateResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="MoveAffiliateHierarchyRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element name="currentParentAffiliateId" type="long"/>
            <element name="newParentAffilaiteId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="MoveAffiliateHierarchyResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="OverrideSubscriberFeeRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="affiliateId" type="long"/>
            <element name="affiliateType" type="ns0:SubscriberAffiliateType"/>
            <element name="feeId" type="long"/>
            <element name="feeAmount" type="double"/>
          </all>
        </complexType>
      </element>
      <element name="OverrideSubscriberFeeResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="PopulateBiweeklyEnrollmentScheduleRequest">
        <complexType>
          <all>
            <element name="enrollmentId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element name="firstLoanDueDate" type="ns0:NpnDate"/>
            <element name="monthlyLoanAmount" type="double"/>
            <element name="firstDebitDate" type="ns0:NpnDate"/>
            <element name="deferredServiceFee" type="double"/>
          </all>
        </complexType>
      </element>
      <element name="PopulateBiweeklyEnrollmentScheduleResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="ReactivateDraftScheduleRequest">
        <annotation>
          <documentation>Reactivate a draft schedule by scheule id</documentation>
        </annotation>
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long">
              <annotation>
                <documentation>schedule id of the draft schedule</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>subscriber id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="ReactivateDraftScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="string">
              <annotation>
                <documentation>schedule id of the reactivated draft schedule</documentation>
              </annotation>
            </element>
            <element name="commandStatus" type="int">
              <annotation>
                <documentation>status 1 for success, 0 for failure</documentation>
              </annotation>
            </element>
            <element name="errorMessage" type="string">
              <annotation>
                <documentation>Descriptive error message</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="ReactivateFeeScheduleRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="ReactivateFeeScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="RejectPaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element name="positivePayInquiryId" type="long"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="RejectPaymentResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="ResetPasswordRequest">
        <complexType>
          <all>
            <element name="Username" type="string"/>
            <element name="newpassword" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="ResetPasswordResponse">
        <complexType>
          <all>
            <element name="username" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="RemoveAffiliateDocumentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="affiliateId" type="long"/>
            <element minOccurs="0" name="externalAffiliateId" type="string"/>
            <element name="documentId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="RemoveAffiliateDocumentResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="RevalidateAutoEnrollmentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="RevalidateAutoEnrollmentResponse">
        <complexType>
          <all>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="SaveAutoEnrollmentAffiliatesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element name="agencyId" type="long"/>
            <element name="dealerId" type="long"/>
            <element minOccurs="0" name="fiMgrId" type="long"/>
            <element minOccurs="0" name="unmatchedFiMgrId" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="SaveAutoEnrollmentAffiliatesResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="SaveChannelAttributeValueRequest">
        <complexType>
          <all>
            <element name="enrollmentId" type="long"/>
            <element name="attributes">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="attribute">
                    <complexType>
                      <attribute name="name" type="string"/>
                      <attribute name="value" type="string"/>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="SaveChannelAttributeValueResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="SendEmailRequest">
        <annotation>
          <documentation>Email addresses can be comma separated</documentation>
        </annotation>
        <complexType>
          <all>
            <element name="toEmailAddress" type="string"/>
            <element minOccurs="0" name="ccEmailAddress" nillable="true" type="string"/>
            <element minOccurs="0" name="bccEmailAddress" nillable="true" type="string"/>
            <element name="subject" type="string"/>
            <element name="message" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="SendEmailResponse">
        <complexType>
          <all>
            <element name="commandStatus" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="SkipDraftRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="SkipDraftResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="SkipPaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element name="skipPaymentDate" type="ns0:NpnDate"/>
            <element name="nextDraftDate" type="ns0:NpnDate"/>
            <element name="restartLoanPaymentDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="comment" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="SkipPaymentResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="SuspendDraftScheduleRequest">
        <annotation>
          <documentation>Suspend a draft schedule by schedule id</documentation>
        </annotation>
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long">
              <annotation>
                <documentation>schedule id of the draft schedule</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>subscriber id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatus"/>
          </all>
        </complexType>
      </element>
      <element name="SuspendDraftScheduleResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long">
              <annotation>
                <documentation>schedule id of the suspended draft schedule</documentation>
              </annotation>
            </element>
            <element name="commandStatus" type="int">
              <annotation>
                <documentation>status 1 for success, 0 for failure</documentation>
              </annotation>
            </element>
            <element name="errorMessage" type="string">
              <annotation>
                <documentation>Descriptive error message</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="SuspendFeeScheduleRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatus"/>
            <element minOccurs="0" name="feeIdList" nillable="true" type="ns0:FeeIdList"/>
            <element minOccurs="0" name="feeTypeIdList" nillable="true" type="ns0:FeeTypeIdList"/>
            <element minOccurs="0" name="externalFeeIdList" nillable="true" type="ns0:ExternalFeeIdList"/>
          </all>
        </complexType>
      </element>
      <element name="SuspendFeeScheduleResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="SuspendSettlementRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="settlementId" type="long"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="SuspendSettlementResponse">
        <complexType>
          <sequence>
            <element name="settlementId" type="long"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateAdhocTransferRequest">
        <complexType>
          <all>
            <element name="scheduleId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="scheduleDate" type="ns0:NpnDate"/>
            <element name="amount" type="double"/>
            <element name="fromAccount" type="ns0:BankAccount"/>
            <element name="toAccount" type="ns0:BankAccount"/>
            <element name="status" type="ns0:ScheduleStatus"/>
            <element name="comment" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateAdhocTransferResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateAffiliateDocumentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="affiliateId" type="long"/>
            <element minOccurs="0" name="externalAffiliateId" type="string"/>
            <element name="document" type="ns0:AffiliateDocument"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateAffiliateDocumentResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateAffiliateRequest">
        <complexType>
          <all>
            <element name="affiliateId" type="long"/>
            <element name="affiliate" type="ns0:AffiliateUpdate"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateAffiliateResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateApprovalRequest">
        <complexType>
          <all>
            <element name="approvalId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element name="approvalStatus">
              <simpleType>
                <restriction base="string">
                  <enumeration value="PENDING"/>
                  <enumeration value="ACCEPTED"/>
                  <enumeration value="REJECTED"/>
                </restriction>
              </simpleType>
            </element>
            <element name="approvalAttemptMode" type="ns0:ApprovalAttemptMode"/>
            <element minOccurs="0" name="approvalAttemptDisposition" nillable="true" type="ns0:ApprovalAttemptDisposition"/>
            <element name="approvalType">
              <simpleType>
                <restriction base="string">
                  <enumeration value="DRAFT"/>
                  <enumeration value="SETTLEMENT"/>
                  <enumeration value="ENROLLMENT"/>
                </restriction>
              </simpleType>
            </element>
            <element minOccurs="0" name="note" nillable="true" type="string"/>
            <element minOccurs="0" name="documentName" nillable="true" type="string"/>
            <element minOccurs="0" name="documentType" nillable="true">
              <simpleType>
                <restriction base="string">
                  <enumeration value="DRAFT"/>
                  <enumeration value="SETTLEMENT"/>
                  <enumeration value="ENROLLMENT"/>
                </restriction>
              </simpleType>
            </element>
            <element minOccurs="0" name="base64EncodedContent" nillable="true" type="string"/>
            <element minOccurs="0" name="contentType" nillable="true" type="string"/>
            <element default="true" name="overwriteDocument" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateApprovalResponse">
        <complexType>
          <sequence>
            <element name="approvalId" type="long"/>
            <element name="approvalAttemptId" nillable="true" type="long"/>
            <element minOccurs="0" name="documentId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateAutoEnrollmentAffiliatesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element name="agencyId" type="long"/>
            <element minOccurs="0" name="subAgencyId" type="long"/>
            <element name="dealerId" type="long"/>
            <element minOccurs="0" name="fiMgrId" type="long"/>
            <element minOccurs="0" name="unmatchedFiMgrId" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateAutoEnrollmentAffiliatesResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateAutoPayeeInfoRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element name="payeeId" type="long"/>
            <element name="newLenderInfo">
              <complexType>
                <all>
                  <element minOccurs="0" name="loanNumber" type="string"/>
                  <element minOccurs="0" name="payeeId" type="long"/>
                  <element minOccurs="0" name="name" type="string"/>
                  <element minOccurs="0" name="phone" type="string"/>
                  <element minOccurs="0" name="address" type="ns0:AddressInfo"/>
                </all>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="UpdateAutoPayeeInfoResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateChannelAttributeValueRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element name="firstLoanDueDate" type="ns0:NpnDate"/>
            <element name="monthlyLoanAmount" type="double"/>
            <element minOccurs="0" name="firstDebitAmount" type="double"/>
            <element name="firstDebitDate" type="ns0:NpnDate"/>
            <element default="false" minOccurs="0" name="isHalfDraft" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateChannelAttributeValueResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateClientBankAccountRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long"/>
            <element name="routingNumber" type="string"/>
            <element name="accountType" type="ns0:AccountType"/>
            <element name="accountNumber" type="string"/>
            <element name="holdersName" type="string"/>
            <element minOccurs="0" name="externalBankId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateClientBankAccountResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateClientRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" type="string"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="externalClientId" type="string"/>
            <element minOccurs="0" name="referralId" nillable="true" type="ns0:ReferralId"/>
            <element minOccurs="0" name="firstname" nillable="true" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastname" nillable="true" type="string"/>
            <element minOccurs="0" name="ssn" nillable="true" type="string"/>
            <element minOccurs="0" name="dob" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="address1" nillable="true" type="string"/>
            <element minOccurs="0" name="address2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="phone" nillable="true" type="string"/>
            <element minOccurs="0" name="WorkNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="mobile" nillable="true" type="string"/>
            <element minOccurs="0" name="email" nillable="true" type="string"/>
            <element minOccurs="0" name="oldPassword" nillable="true" type="string"/>
            <element minOccurs="0" name="password" nillable="true" type="string"/>
            <element minOccurs="0" name="svaDocument" type="ns0:SVADocument"/>
            <element minOccurs="0" name="enrollmentStatus" nillable="true">
              <simpleType>
                <restriction base="string">
                  <enumeration value="ACTIVE"/>
                  <enumeration value="SUSPENDED"/>
                </restriction>
              </simpleType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="UpdateClientResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateCoClientRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="clientId" type="string"/>
            <element name="coClientFirstname" type="string"/>
            <element name="coClientLastname" type="string"/>
            <element minOccurs="0" name="coClientMiddleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientSsn" nillable="true" type="string"/>
            <element name="coClientDob" type="ns0:NpnDate"/>
            <element minOccurs="0" name="coClientPhone" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientWorkNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientMobile" nillable="true" type="string"/>
            <element minOccurs="0" name="coClientEmail" nillable="true" type="string"/>
          </all>
          <attribute default="EDIT" name="operation" use="optional">
            <simpleType>
              <restriction base="string">
                <enumeration value="EDIT"/>
                <enumeration value="DELETE"/>
              </restriction>
            </simpleType>
          </attribute>
        </complexType>
      </element>
      <element name="UpdateCoClientResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateDraftScheduleRequest">
        <annotation>
          <documentation>Update a single draft schedule which was created by CreateDraftScheduleRequest</documentation>
        </annotation>
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long">
              <annotation>
                <documentation>Schedule Id of the schedule to be updated</documentation>
              </annotation>
            </element>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>Subscriber Id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long">
              <annotation>
                <documentation>Client bank account id of the bank account from which draft are drawn</documentation>
              </annotation>
            </element>
            <element name="status" type="ns0:ScheduleStatus"/>
            <element name="amount" type="double">
              <annotation>
                <documentation>Draft amount, this can be updated</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="scheduleDate" nillable="true" type="ns0:NpnDate">
              <annotation>
                <documentation>schedule date, this can be updated</documentation>
              </annotation>
            </element>
            <element default="false" minOccurs="0" name="updateRemainingSchedules" nillable="true" type="boolean"/>
            <element default="false" minOccurs="0" name="allowDuplicates" nillable="true" type="boolean"/>
            <element minOccurs="0" name="comment" nillable="true" type="string">
              <annotation>
                <documentation>Comments regarding the draft schedule</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="remark" nillable="true" type="string">
              <annotation>
                <documentation>Remarks</documentation>
              </annotation>
            </element>
          </all>
        </complexType>
      </element>
      <element name="UpdateDraftScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="string">
              <annotation>
                <documentation>Schedule Id of the updated draft schedule</documentation>
              </annotation>
            </element>
            <element name="commandStatus" type="int">
              <annotation>
                <documentation>status 1 for success, 0 for failure</documentation>
              </annotation>
            </element>
            <element name="errorMessage" type="string">
              <annotation>
                <documentation>Descriptive error message</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateEnrollmentErrorRequest">
        <complexType>
          <all>
            <element name="enrollmentErrorId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="reason" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="tns:ErrorStatus"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateEnrollmentErrorResponse">
        <complexType>
          <sequence>
            <element name="enrollmentErrorId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateEnrollmentTicketRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="enrollmentTicketId" type="long"/>
            <element minOccurs="0" name="transactionId" nillable="true" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element name="ticketType" type="string"/>
            <element name="ticketStatus" type="ns0:EnrollmentTicketStatus"/>
            <element name="subject" type="string"/>
            <element name="assigneeId" type="long"/>
            <element minOccurs="0" name="reviewDate" type="ns0:NpnDate"/>
            <element name="assosiatedAmount" type="double"/>
            <element name="reason" type="string"/>
            <element name="comment" type="string"/>
            <element name="message" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateEnrollmentTicketResponse">
        <complexType>
          <sequence>
            <element name="enrollmentTicketId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdatePartialEnrollmentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="partialEnrollmentInfo" type="ns0:PartialEnrollmentInfo"/>
          </all>
        </complexType>
      </element>
      <element name="UpdatePartialEnrollmentResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="partialEnrollmentId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdatePartialEnrollmentStatusRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="partialEnrollmentId" type="long"/>
            <element name="status" type="ns0:PartialEnrollmentStatus"/>
          </all>
        </complexType>
      </element>
      <element name="UpdatePartialEnrollmentStatusResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateFeeScheduleRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="subscriberId" nillable="true" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="amount" type="double"/>
            <element name="scheduleDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="string"/>
            <element name="updateRemainingSchedules" type="boolean"/>
            <element minOccurs="0" name="remark" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateFeeScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdatePaymentStatusRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="clientId" type="string"/>
            <element name="paymentId" type="long"/>
            <element name="status" type="ns0:ScheduleStatus"/>
          </all>
        </complexType>
      </element>
      <element name="UpdatePaymentStatusResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdatePaymentRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="updatePaymentList" type="ns0:UpdatePaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="UpdatePaymentResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="scheduleId" nillable="true" type="long"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateRuleSetDefinitionRequest">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="commissionSet" type="ns0:CommissionSet"/>
            <element default="true" name="makeDefault" type="boolean"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateRuleSetDefinitionResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateRuleSetRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="ruleSetId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalRuleSetId" nillable="true" type="string"/>
            <element minOccurs="0" name="name" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:RuleSetStatus"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateRuleSetResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateSettlementScheduleRequest">
        <complexType>
          <all>
            <element name="settlementId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeAddressId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeExternalAddressId" nillable="true" type="string"/>
            <element minOccurs="0" name="settlementScheduleList" nillable="true">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="SettlementScheduleInfo" nillable="true" type="ns0:SettlementSchedule"/>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="UpdateSettlementScheduleResponse">
        <complexType>
          <sequence>
            <element name="settlementId" type="string"/>
            <element name="ScheduleIdList" nillable="true" type="ns0:ScheduleIdList"/>
            <element ref="ns0:serviceFault"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateSignatureDateRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="enrollmentId" type="long"/>
            <element name="signatureDate" type="ns0:NpnDate"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateSignatureDateResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateSubscriberPartnerRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="partner" type="ns0:Partner"/>
            <element minOccurs="0" name="partnerConfigs">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" name="config">
                    <complexType>
                      <sequence>
                        <element name="name" type="string"/>
                        <element name="value" type="string"/>
                      </sequence>
                    </complexType>
                  </element>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="UpdateSubscriberPartnerResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="partnerId" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateSubscriberPayeeRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="payeeId" nillable="true" type="long">
              <annotation>
                <documentation>Either payeeId or subscriberPayeeId is required.</documentation>
              </annotation>
            </element>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="subscriberPayeeId" nillable="true" type="string">
              <annotation>
                <documentation>Either payeeId or subscriberPayeeId is required.</documentation>
              </annotation>
            </element>
            <element name="payeeName" nillable="true" type="string"/>
            <element default="true" minOccurs="0" name="payeeStatus" nillable="true" type="boolean"/>
            <element minOccurs="0" name="payeeDescription" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeWebsite" nillable="true" type="string"/>
            <element minOccurs="0" name="externalPayeeId" nillable="true" type="long"/>
            <element minOccurs="0" name="faxNo" nillable="true" type="string"/>
            <element minOccurs="0" name="phoneNo" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeAdresses" nillable="true">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="address" nillable="true" type="ns0:Address"/>
                </sequence>
              </complexType>
            </element>
            <element minOccurs="0" name="payeeContacts" nillable="true">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="contact" nillable="true" type="ns0:Contact"/>
                </sequence>
              </complexType>
            </element>
            <element minOccurs="0" name="payeeBankAccounts" nillable="true">
              <complexType>
                <sequence>
                  <element maxOccurs="unbounded" minOccurs="0" name="account" nillable="true" type="ns0:Account"/>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="UpdateSubscriberPayeeResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element name="payeeId" type="long"/>
            <element minOccurs="0" name="payeeAddresses" nillable="true" type="ns0:AddressesIds"/>
            <element minOccurs="0" name="payeeContacts" nillable="true" type="ns0:ContactsIds"/>
            <element minOccurs="0" name="payeeBankAccounts" nillable="true" type="ns0:BankAccountIds"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateSubscriberUserRequest">
        <complexType>
          <all>
            <element name="userId" type="long"/>
            <element name="subscriberId" type="long"/>
            <element name="firstName" type="string"/>
            <element name="userName" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastName" nillable="true" type="string"/>
            <element name="email" type="string"/>
            <element name="phone" type="string"/>
            <element minOccurs="0" name="password" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine1" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="existingPassword" nillable="true" type="string"/>
            <element default="true" name="isActive" type="boolean"/>
            <element default="false" name="isLocked" type="boolean"/>
            <element name="rolePermissions" type="ns0:RolePermissionList"/>
            <element default="true" name="isIpValidationRequired" type="boolean"/>
            <element minOccurs="0" name="ipAddresses" nillable="true" type="ns0:IpAddressesList"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateSubscriberUserResponse">
        <complexType>
          <sequence>
            <element name="userId" type="long"/>
            <element name="userName" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateReturnScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="effectiveDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="amount" nillable="true" type="double"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ReturnScheduleStatusForUpdate"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateReturnScheduleResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="schedule" nillable="true" type="ns0:ScheduleReturn"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="VerifyIpRequest">
        <complexType>
          <all>
            <element name="token" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="VerifyIpResponse">
        <complexType>
          <all>
            <element name="ipAddress" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminActivateEnrollmentRequest">
        <complexType>
          <all>
            <element name="enrollmentId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="AdminActivateEnrollmentResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="enrollmentId" nillable="true" type="long"/>
            <element name="enrollmentStatuses" nillable="true" type="string"/>
            <element name="cipStatuses" nillable="true" type="string"/>
            <element name="ofacStatuses" nillable="true" type="string"/>
            <element name="spaStatuses" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetClientsRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="firstname" nillable="true" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastname" nillable="true" type="string"/>
            <element minOccurs="0" name="ssn" nillable="true" type="string"/>
            <element minOccurs="0" name="email" nillable="true" type="string"/>
            <element minOccurs="0" name="keyWord" nillable="true" type="string"/>
            <element minOccurs="0" name="statuses" type="tns:ClientStatuses"/>
            <element minOccurs="0" name="spaStatuses" type="tns:SPAStatuses"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="phoneNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine1" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="loanNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="lenderName" nillable="true" type="string"/>
            <element minOccurs="0" name="VIN" nillable="true" type="string"/>
            <element minOccurs="0" name="routingNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="accountNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="order" type="tns:AdminClientOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetClientsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element maxOccurs="unbounded" minOccurs="0" name="client" type="ns0:Client"/>
          </sequence>
        </complexType>
      </element>
      <complexType name="AdminClientOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:AdminClientOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="AdminClientOrderBy">
        <restriction base="string">
          <enumeration value="id"/>
          <enumeration value="firstName"/>
          <enumeration value="lastName"/>
          <enumeration value="email"/>
          <enumeration value="createdOn"/>
          <enumeration value="modifiedOn"/>
          <enumeration value="modifiedBy"/>
        </restriction>
      </simpleType>
      <element name="AdminGetScheduleListRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberId" nillable="true" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="startDate" type="ns0:NpnDate"/>
            <element name="endDate" type="ns0:NpnDate"/>
            <element minOccurs="0" name="order" nillable="true" type="tns:DraftScheduleOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="ns0:positiveNumber"/>
            <element minOccurs="0" name="numberOfRecordsPerPage" nillable="true" type="ns0:positiveNumber"/>
            <element name="transactionClasses" type="ns0:TransactionClassList"/>
            <element minOccurs="0" name="transactionMethods" nillable="true" type="ns0:TransactionMethodsList"/>
            <element default="false" minOccurs="0" name="showRfee" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetScheduleListResponse">
        <complexType>
          <sequence>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="schedules" nillable="true" type="ns0:ScheduleDraft"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetTransactionListRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="type" nillable="true">
              <simpleType>
                <restriction base="string">
                  <enumeration value="DRAFT"/>
                  <enumeration value="PAYMENT"/>
                  <enumeration value="FEE"/>
                  <enumeration value="SERVICE"/>
                  <enumeration value="R_FEE"/>
                </restriction>
              </simpleType>
            </element>
            <element minOccurs="0" name="status" nillable="true" type="ns0:TransactionStatus"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="pageNo" nillable="true" type="int"/>
            <element minOccurs="0" name="resultsPerPage" nillable="true" type="int"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetTransactionListResponse">
        <complexType>
          <all>
            <element name="returnCount" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element minOccurs="0" name="transactions" type="ns0:Transactions"/>
          </all>
        </complexType>
      </element>
      <element name="AuthorizeAndAcceptPaymentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="postedTransactionId" type="long"/>
            <element name="scheduleId" type="long"/>
            <element minOccurs="0" name="reason" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="AuthorizeAndAcceptPaymentResponse">
        <complexType>
          <sequence>
            <element name="subscriberId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateEnrollmentCommentRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalNoteId" nillable="true" type="string"/>
            <element name="note" type="string"/>
            <element minOccurs="0" name="documentType" nillable="true" type="string"/>
            <element minOccurs="0" name="base64EncodedContent" nillable="true" type="string"/>
            <element minOccurs="0" name="contentType" nillable="true" type="string"/>
            <element minOccurs="0" name="documentName" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateEnrollmentCommentResponse">
        <complexType>
          <sequence>
            <element name="noteid" type="long"/>
            <element name="documentid" nillable="true" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CaptureDraftRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="recurringType" nillable="true" type="ns0:RecurringTypes"/>
            <element minOccurs="0" name="recurringStartDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="recurringAmount1" nillable="true" type="double"/>
            <element minOccurs="0" name="recurringDay1" nillable="true" type="long"/>
            <element minOccurs="0" name="recurringAmount2" nillable="true" type="double"/>
            <element minOccurs="0" name="recurringDay2" nillable="true" type="long"/>
            <element minOccurs="0" name="lumpSumDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="lumpSumAmount" nillable="true" type="double"/>
            <element default="false" name="lumpSumOnly" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="CaptureDraftResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="AdminGetNonConformingDraftsRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberId" type="long"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetNonConformingDraftsResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="int"/>
            <element name="returnedCount" type="int"/>
            <element name="pageNumber" type="int"/>
            <element name="nonConformingDraftList" type="ns0:NonConformingDraftList"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreatePrenoteScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long">
              <annotation>
                <documentation>Subscriber Id</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="clientId" nillable="true" type="string">
              <annotation>
                <documentation>Client Id or External Id is used to find the client.</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long">
              <annotation>
                <documentation>Client bank account id of the bank account from which Prenote are drawn</documentation>
              </annotation>
            </element>
            <element name="prenoteDate" type="ns0:NpnDate">
              <annotation>
                <documentation>Prenote start date</documentation>
              </annotation>
            </element>
            <element minOccurs="0" name="comment" nillable="true" type="string">
              <annotation>
                <documentation>Comments regarding the Prenote schedule</documentation>
              </annotation>
            </element>
          </all>
        </complexType>
      </element>
      <element name="CreatePrenoteScheduleResponse">
        <complexType>
          <sequence>
            <element name="scheduleId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateDepositItemsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="method" nillable="true" type="ns0:DepositTypes"/>
            <element name="scheduleFrequencyType" type="ns0:DraftType">
              <annotation>
                <documentation>Whether it is a Biweekly, Monthly or adhock draft</documentation>
              </annotation>
            </element>
            <element name="depositList" type="ns0:DepositList"/>
            <element minOccurs="0" name="subLoanActType" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="CreateDepositItemsResponse">
        <complexType>
          <sequence>
            <element name="scheduleList" nillable="true" type="tns:Schedules"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetCheckImageRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="transactionId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetCheckImageResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberId" type="long"/>
            <element name="scheduleId" nillable="true" type="long"/>
            <element name="transactionId" nillable="true" type="long"/>
            <element name="externalReferenceId" nillable="true" type="string"/>
            <element name="checkImageFront" nillable="true" type="base64Binary"/>
            <element name="checkImageBack" nillable="true" type="base64Binary"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UnlockAccountRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberId" nillable="true" type="long"/>
            <element name="username" type="string"/>
            <element name="token" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UnlockAccountResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="SendReactivationCodeRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="subscriberId" nillable="true" type="long"/>
            <element name="username" type="string"/>
            <element name="notifMethod" type="ns0:NotificationReactivationMethod"/>
          </all>
        </complexType>
      </element>
      <element name="SendReactivationCodeResponse">
        <complexType>
          <all>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="SearchCFTPayeesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="payeeName" type="string"/>
            <element name="loanAccountNumber" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="SearchCFTPayeesResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
            <element minOccurs="0" name="payees" type="ns0:CftPayees"/>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateDraftItemsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="scheduleList" type="ns0:DraftItemScheduleList"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateDraftItemsResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" name="updateScheduleList" type="ns0:UpdateScheduleList">
              <annotation>
                <documentation>Schedule Id of the updated draft schedule</documentation>
              </annotation>
            </element>
            <element name="commandStatus" type="int">
              <annotation>
                <documentation>status 1 for success, 0 for failure</documentation>
              </annotation>
            </element>
            <element name="errorMessage" type="string">
              <annotation>
                <documentation>Descriptive error message</documentation>
              </annotation>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientBalancesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientBalancesResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="clientBalanceList" nillable="true" type="ns0:ClientBalance"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreateRTPSettlementScheduleRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="payeeId" type="long"/>
            <element name="payeeName" type="string"/>
            <element minOccurs="0" name="payeeAddressId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeExternalAddressId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeContactId" nillable="true" type="long"/>
            <element minOccurs="0" name="payeeExternalContactId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeBankAccountId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeBankExternalAccountId" nillable="true" type="string"/>
            <element name="currentBalance" type="double"/>
            <element name="settlementAmount" type="double"/>
            <element minOccurs="0" name="settlementReference" nillable="true" type="string"/>
            <element minOccurs="0" name="numPayments" nillable="true" type="ns0:positiveNumber"/>
            <element name="accountNumber" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="negotiator" nillable="true" type="string"/>
            <element default="true" name="isApprovalRequired" type="boolean"/>
            <element minOccurs="0" name="settlementScheduleList" nillable="true" type="ns0:SettlementRTPScheduleList"/>
          </all>
        </complexType>
      </element>
      <element name="CreateRTPSettlementScheduleResponse">
        <complexType>
          <sequence>
            <element name="settlementId" type="string"/>
            <element name="scheduleId" type="string"/>
            <element ref="ns0:serviceFault"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetClientRTPSettlementRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="settlementId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetClientRTPSettlementResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="settlementList" nillable="true" type="ns0:RTPSettlementList"/>
          </sequence>
        </complexType>
      </element>
      <element name="CheckSdnMatchRequest">
        <complexType>
          <all>
            <element name="individual" type="ns0:Individual"/>
          </all>
        </complexType>
      </element>
      <element name="CheckSdnMatchResponse">
        <complexType>
          <all>
            <element name="sdnMatch" type="ns0:SdnMatch"/>
          </all>
        </complexType>
      </element>
      <element name="CreateFeeBasisRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="debtFeeInformation" type="ns0:DebtFeeInformation"/>
            <element minOccurs="0" name="numberOfTradeLines" nillable="true" type="long"/>
            <element minOccurs="0" name="tradeLines" nillable="true" type="ns0:tradeLines"/>
          </all>
        </complexType>
      </element>
      <element name="CreateFeeBasisResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateFeeBasisRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="debtFeeInformation" type="ns0:DebtFeeInformation"/>
            <element minOccurs="0" name="numberOfTradeLines" nillable="true" type="long"/>
            <element minOccurs="0" name="tradeLines" nillable="true" type="ns0:tradeLines"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateFeeBasisResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
            <element minOccurs="0" name="warningMessage" nillable="true">
              <complexType>
                <sequence>
                  <element name="warningCode" type="string"/>
                  <element name="warningDescription" type="string"/>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="GetFeeBasisRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetFeeBasisResponse">
        <complexType>
          <all>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="originalDebt" nillable="true" type="double"/>
            <element minOccurs="0" name="percentage" nillable="true" type="double"/>
            <element minOccurs="0" name="fixed" nillable="true" type="double"/>
            <element minOccurs="0" name="updateFeeBasisFlag" nillable="true" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
            <element minOccurs="0" name="warningMessage" nillable="true">
              <complexType>
                <sequence>
                  <element name="warningCode" type="string"/>
                  <element name="warningDescription" type="string"/>
                </sequence>
              </complexType>
            </element>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSettlementFeesRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="settlementId" type="long"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="AdminGetSettlementFeesResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="fees" nillable="true" type="ns0:SettlementFeeBasis"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetFeeScheduleBasisRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetFeeScheduleBasisResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="fee" nillable="true" type="ns0:SingleFeeScheduleBasis"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetFeeScheduleListBasisRequest">
        <complexType>
          <all>
            <annotation>
              <documentation>"Initially Modified From/To date will query against the modified dates ,if its null
                        it will check against the created date.."</documentation>
            </annotation>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element minOccurs="0" name="owner" nillable="true" type="ns0:FeeScheduleOwner"/>
            <element minOccurs="0" name="scheduleIds" type="tns:ScheduleIds"/>
            <element minOccurs="0" name="startDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="endDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="subscriberFeeId" nillable="true" type="long"/>
            <element default="false" minOccurs="0" name="filterReversedFees" nillable="true" type="boolean"/>
            <element minOccurs="0" name="modifiedFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="modifiedToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="status" nillable="true" type="ns0:ScheduleStatusForListing"/>
            <element minOccurs="0" name="order" type="ns0:FeeScheduleOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element default="false" minOccurs="0" name="showRfee" nillable="true" type="boolean"/>
            <element name="pageNumber" type="ns0:positiveNumber"/>
            <element name="numberOfRecordsPerPage" type="ns0:positiveNumber"/>
          </all>
        </complexType>
      </element>
      <element name="GetFeeScheduleListBasisResponse">
        <complexType>
          <sequence>
            <element name="totalCount" type="long"/>
            <element name="returnedCount" type="long"/>
            <element name="pageNumber" type="long"/>
            <element maxOccurs="unbounded" minOccurs="0" name="fees" nillable="true" type="ns0:ScheduleFeeBasis"/>
          </sequence>
        </complexType>
      </element>
      <element name="CreatePerformanceSettlementBasisRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
            <element name="payeeId" type="long"/>
            <element minOccurs="0" name="payeeAddressId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeExternalAddressId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeContactId" nillable="true" type="long"/>
            <element minOccurs="0" name="payeeExternalContactId" nillable="true" type="string"/>
            <element minOccurs="0" name="payeeBankAccountId" nillable="true" type="long"/>
            <element minOccurs="0" name="PayeeBankExternalAccountId" nillable="true" type="string"/>
            <element name="originalDebt" type="double"/>
            <element name="settlementAmount" type="double"/>
            <element minOccurs="0" name="settlementReference" nillable="true" type="string"/>
            <element minOccurs="0" name="numPayments" nillable="true" type="ns0:positiveNumber"/>
            <element name="accountNumber" type="string"/>
            <element minOccurs="0" name="comment" nillable="true" type="string"/>
            <element minOccurs="0" name="negotiator" nillable="true" type="string"/>
            <element default="true" name="isApprovalRequired" type="boolean"/>
            <element minOccurs="0" name="settlementPaymentList" nillable="true" type="ns0:SettlementPaymentList"/>
          </all>
        </complexType>
      </element>
      <element name="CreatePerformanceSettlementBasisResponse">
        <complexType>
          <sequence>
            <element name="settlementId" type="string"/>
            <element name="scheduleId" type="string"/>
            <element ref="ns0:serviceFault"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetCplusClientsRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="firstname" nillable="true" type="string"/>
            <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
            <element minOccurs="0" name="lastname" nillable="true" type="string"/>
            <element minOccurs="0" name="ssn" nillable="true" type="string"/>
            <element minOccurs="0" name="email" nillable="true" type="string"/>
            <element minOccurs="0" name="keyWord" nillable="true" type="string"/>
            <element minOccurs="0" name="statuses" type="tns:ClientStatuses"/>
            <element minOccurs="0" name="spaStatuses" type="tns:SPAStatuses"/>
            <element minOccurs="0" name="fromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="toDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="enrollmentFromDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="enrollmentToDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="phoneNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine1" nillable="true" type="string"/>
            <element minOccurs="0" name="addressLine2" nillable="true" type="string"/>
            <element minOccurs="0" name="city" nillable="true" type="string"/>
            <element minOccurs="0" name="state" nillable="true" type="string"/>
            <element minOccurs="0" name="zip" nillable="true" type="string"/>
            <element minOccurs="0" name="loanNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="lenderName" nillable="true" type="string"/>
            <element minOccurs="0" name="VIN" nillable="true" type="string"/>
            <element minOccurs="0" name="routingNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="accountNumber" nillable="true" type="string"/>
            <element minOccurs="0" name="order" type="tns:ClientOrder"/>
            <element default="true" name="ascending" type="boolean"/>
            <element name="pageNo" type="int"/>
            <element name="resultsPerPage" type="int"/>
            <element default="true" minOccurs="0" name="skipDeleted" nillable="true" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="GetCplusClientsResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="totalCount" nillable="true" type="int"/>
            <element minOccurs="0" name="returnedCount" nillable="true" type="int"/>
            <element minOccurs="0" name="pageNumber" nillable="true" type="int"/>
            <element name="errorMessage" nillable="true" type="string"/>
            <element maxOccurs="unbounded" minOccurs="0" name="client" type="ns0:CplusClient"/>
          </sequence>
        </complexType>
      </element>
      <element name="UploadDocumentRequest">
        <complexType>
          <all>
            <element minOccurs="0" name="settlementId" nillable="true" type="long"/>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
            <element minOccurs="0" name="affiliateId" nillable="true" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element minOccurs="0" name="stateCode" nillable="true" type="string"/>
            <element name="document" type="ns0:ClientDocument"/>
          </all>
        </complexType>
      </element>
      <element name="UploadDocumentResponse">
        <complexType>
          <sequence>
            <element name="documentId" type="long"/>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
            <element minOccurs="0" name="warningMessage" nillable="true">
              <complexType>
                <sequence>
                  <element name="warningCode" type="string"/>
                  <element name="warningDescription" type="string"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="GetSubscriberStatewiseFeeCapListRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
          </all>
        </complexType>
      </element>
      <element name="GetSubscriberStatewiseFeeCapListResponse">
        <complexType>
          <sequence>
            <element name="StateFeeCapList" type="ns0:StateFeeCapList"/>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="SaveStatewiseFeeCapRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element name="stateCode" type="string"/>
            <element name="licenseRequired" type="ns0:RequiredFlag"/>
            <element minOccurs="0" name="licenseExpiry" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="stateFeeType" nillable="true" type="ns0:FixedDistBasisTypes"/>
            <element minOccurs="0" name="stateFeeValue" nillable="true" type="double"/>
          </all>
        </complexType>
      </element>
      <element name="SaveStatewiseFeeCapResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element minOccurs="0" name="errorMessage" nillable="true" type="string"/>
          </sequence>
        </complexType>
      </element>
      <element name="GetCaptureDraftRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          </all>
        </complexType>
      </element>
      <element name="GetCaptureDraftResponse">
        <complexType>
          <sequence>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="captureSpaDrafts" type="ns0:captureSpaDrafts"/>
            <element name="errorMessage" nillable="true" type="string"/>
            <element minOccurs="0" name="warningMessage" nillable="true">
              <complexType>
                <sequence>
                  <element name="warningCode" type="string"/>
                  <element name="warningDescription" type="string"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <element name="UpdateCaptureDraftRequest">
        <complexType>
          <all>
            <element name="subscriberId" type="long"/>
            <element minOccurs="0" name="clientId" nillable="true" type="string"/>
            <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
            <element name="spaDraftId" type="string"/>
            <element minOccurs="0" name="recurringType" nillable="true" type="ns0:RecurringTypes"/>
            <element minOccurs="0" name="recurringStartDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="recurringAmount1" nillable="true" type="double"/>
            <element minOccurs="0" name="recurringDay1" nillable="true" type="long"/>
            <element minOccurs="0" name="recurringAmount2" nillable="true" type="double"/>
            <element minOccurs="0" name="recurringDay2" nillable="true" type="long"/>
            <element minOccurs="0" name="lumpSumDate" nillable="true" type="ns0:NpnDate"/>
            <element minOccurs="0" name="lumpSumAmount" nillable="true" type="double"/>
            <element default="false" name="lumpSumOnly" type="boolean"/>
          </all>
        </complexType>
      </element>
      <element name="UpdateCaptureDraftResponse">
        <complexType>
          <sequence>
            <element name="commandStatus" type="int"/>
            <element name="errorMessage" type="string"/>
          </sequence>
        </complexType>
      </element>
    </schema>
    <schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://nationalpayment.net/ws/schemas/types" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://nationalpayment.net/ws/schemas/types">
      <complexType name="Client">
        <sequence>
          <element name="id" nillable="true" type="long"/>
          <element name="externalClientId" nillable="true" type="string"/>
          <element name="firstName" type="string"/>
          <element name="middleInitial" nillable="true" type="string"/>
          <element name="lastName" type="string"/>
          <element name="username" nillable="true" type="string"/>
          <element name="ssn" nillable="true" type="string"/>
          <element name="dob" nillable="true" type="tns:NpnDate"/>
          <element name="address1" type="string"/>
          <element name="address2" nillable="true" type="string"/>
          <element name="city" type="string"/>
          <element name="state" type="string"/>
          <element name="zip" type="string"/>
          <element name="phone" type="string"/>
          <element name="WorkNumber" nillable="true" type="string"/>
          <element name="mobile" nillable="true" type="string"/>
          <element name="email" nillable="true" type="string"/>
          <element name="totalNoOfDraftsCompleted" nillable="true" type="int"/>
          <element name="totalNoOfDrafts" nillable="true" type="int"/>
          <element name="totalNoOfFeesCompleted" nillable="true" type="int"/>
          <element name="totalNoOfFees" nillable="true" type="int"/>
          <element name="lastDraftDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextDraftDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextDraftAmount" nillable="true" type="double"/>
          <element name="nextPaymentDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextPaymentAmount" nillable="true" type="double"/>
          <element minOccurs="0" name="enrollment" type="tns:Enrollment"/>
          <element minOccurs="0" name="coClients" type="tns:CoClients"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
          <element minOccurs="0" name="accountInfo" type="string"/>
          <element minOccurs="0" name="externalReferenceNumber" type="string"/>
          <element minOccurs="0" name="enrollmentAttributesList">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" name="attribute">
                  <complexType>
                    <attribute name="name" type="string"/>
                    <attribute name="value" type="string"/>
                  </complexType>
                </element>
              </sequence>
            </complexType>
          </element>
          <element name="affiliates">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="affiliate" type="tns:Affiliate"/>
              </sequence>
            </complexType>
          </element>
          <element name="affiliateGroup" nillable="true" type="tns:AffiliateGroup"/>
          <element name="affiliateFees">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="fees" type="tns:SubscriberFee"/>
              </sequence>
            </complexType>
          </element>
        </sequence>
      </complexType>
      <complexType name="CplusClient">
        <sequence>
          <element name="id" nillable="true" type="long"/>
          <element name="externalClientId" nillable="true" type="string"/>
          <element name="firstName" type="string"/>
          <element name="middleInitial" nillable="true" type="string"/>
          <element name="lastName" type="string"/>
          <element name="username" nillable="true" type="string"/>
          <element name="ssn" nillable="true" type="string"/>
          <element name="dob" nillable="true" type="tns:NpnDate"/>
          <element name="address1" type="string"/>
          <element name="address2" nillable="true" type="string"/>
          <element name="city" type="string"/>
          <element name="state" type="string"/>
          <element name="zip" type="string"/>
          <element name="phone" type="string"/>
          <element name="WorkNumber" nillable="true" type="string"/>
          <element name="mobile" nillable="true" type="string"/>
          <element name="email" nillable="true" type="string"/>
          <element name="totalNoOfDraftsCompleted" nillable="true" type="int"/>
          <element name="totalNoOfDrafts" nillable="true" type="int"/>
          <element name="totalNoOfFeesCompleted" nillable="true" type="int"/>
          <element name="totalNoOfFees" nillable="true" type="int"/>
          <element name="lastDraftDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextDraftDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextDraftAmount" nillable="true" type="double"/>
          <element name="nextPaymentDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextPaymentAmount" nillable="true" type="double"/>
          <element minOccurs="0" name="enrollment" type="tns:Enrollment"/>
          <element minOccurs="0" name="coClients" type="tns:CoClients"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
          <element minOccurs="0" name="accountInfo" type="string"/>
          <element minOccurs="0" name="externalReferenceNumber" type="string"/>
          <element name="isCplusClient" type="boolean"/>
          <element minOccurs="0" name="enrollmentAttributesList">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" name="attribute">
                  <complexType>
                    <attribute name="name" type="string"/>
                    <attribute name="value" type="string"/>
                  </complexType>
                </element>
              </sequence>
            </complexType>
          </element>
          <element name="affiliates">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="affiliate" type="tns:Affiliate"/>
              </sequence>
            </complexType>
          </element>
          <element name="affiliateGroup" nillable="true" type="tns:AffiliateGroup"/>
          <element name="affiliateFees">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="fees" type="tns:SubscriberFee"/>
              </sequence>
            </complexType>
          </element>
        </sequence>
      </complexType>
      <complexType name="SVADocument">
        <all>
          <element name="note" type="string"/>
          <element minOccurs="0" name="documentType" nillable="true" type="string"/>
          <element name="base64EncodedContent" type="string"/>
          <element name="contentType" type="string"/>
          <element name="documentName" type="string"/>
        </all>
      </complexType>
      <complexType name="NonConformingDraft">
        <all>
          <element name="briefClient" type="tns:BriefClient"/>
          <element name="briefSubscriber" type="tns:BriefSubscriber"/>
          <element name="nonConformingDraftCount" type="int"/>
        </all>
      </complexType>
      <complexType name="NonConformingDraftList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="nonConformingDraft" type="tns:NonConformingDraft"/>
        </sequence>
      </complexType>
      <complexType name="EnrollComment">
        <sequence>
          <element name="id" type="long"/>
          <element name="enrollments_id" nillable="true" type="long"/>
          <element name="clientId" nillable="true" type="long"/>
          <element name="schedulesId" nillable="true" type="long"/>
          <element name="documentId" nillable="true" type="long"/>
          <element name="documentName" nillable="true" type="string"/>
          <element name="comment" nillable="true" type="string"/>
          <element name="context" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="ClientInfoForAuthResponse">
        <all>
          <element name="briefClient" type="tns:BriefClient"/>
          <element name="briefSubscriber" type="tns:BriefSubscriber"/>
        </all>
      </complexType>
      <complexType name="BriefClient">
        <all>
          <element name="id" type="long"/>
          <element name="externalClientId" nillable="true" type="string"/>
          <element name="firstName" type="string"/>
          <element name="lastName" type="string"/>
          <element name="middleInitial" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="BriefSubscriber">
        <all>
          <element name="id" nillable="true" type="long"/>
          <element name="name" nillable="true" type="string"/>
          <element name="phone" nillable="true" type="string"/>
          <element name="email" nillable="true" type="string"/>
          <element name="abbreviation" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="AuditInfo">
        <all>
          <element name="createdOn" nillable="true" type="string"/>
          <element name="createdBy" nillable="true" type="long"/>
          <element name="modifiedOn" nillable="true" type="string"/>
          <element name="modifiedBy" nillable="true" type="long"/>
          <element name="dateFormat" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="AuditInformation">
        <all>
          <element name="createdOn" nillable="true" type="tns:NpnDate"/>
          <element name="createdBy" nillable="true" type="string"/>
          <element name="createdUserType" nillable="true" type="string"/>
          <element name="modifiedOn" nillable="true" type="tns:NpnDate"/>
          <element name="modifiedBy" nillable="true" type="string"/>
          <element name="modifiedUserType" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="CoClients">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="coClient" type="tns:CoClient"/>
        </sequence>
      </complexType>
      <complexType name="CoSigners">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="coClient" type="tns:CoSigner"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentExceptions">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="enrollmentExceptions" nillable="true" type="tns:EnrollmentException"/>
        </sequence>
      </complexType>
      <complexType name="CountInfo">
        <sequence>
          <element name="count" type="double"/>
          <element name="month" type="long"/>
        </sequence>
      </complexType>
      <complexType name="CountInfos">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="countInfo" type="tns:CountInfo"/>
        </sequence>
      </complexType>
      <complexType name="CoClient">
        <sequence>
          <element name="coClientId" nillable="true" type="long"/>
          <element name="firstname" type="string"/>
          <element name="middleInitial" nillable="true" type="string"/>
          <element name="lastname" type="string"/>
          <element name="ssn" nillable="true" type="string"/>
          <element name="dob" type="tns:NpnDate"/>
          <element name="phone" type="string"/>
          <element name="WorkNumber" nillable="true" type="string"/>
          <element name="mobile" nillable="true" type="string"/>
          <element name="email" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="CoSigner">
        <all>
          <element name="firstname" type="string"/>
          <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
          <element name="lastname" type="string"/>
          <element minOccurs="0" name="ssn" nillable="true" type="string"/>
          <element name="dob" type="tns:NpnDate"/>
          <element minOccurs="0" name="phone" nillable="true" type="string"/>
          <element minOccurs="0" name="WorkNumber" nillable="true" type="string"/>
          <element minOccurs="0" name="mobile" nillable="true" type="string"/>
          <element minOccurs="0" name="email" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="Enrollment">
        <sequence>
          <element name="id" nillable="true" type="long"/>
          <element name="subscriberId" nillable="true" type="long"/>
          <element name="spaaAprroval" nillable="true" type="tns:EnrollmentApproval"/>
          <element name="enrollmentStatuses" nillable="true" type="string"/>
          <element name="cipStatuses" nillable="true" type="string"/>
          <element name="ofacStatuses" nillable="true" type="string"/>
          <element name="spaStatuses" nillable="true" type="string"/>
          <element name="enrollDate" nillable="true" type="tns:NpnDate"/>
          <element name="isSvaCreated" nillable="true" type="boolean"/>
          <element name="allDocumentsSigned" nillable="true" type="boolean"/>
          <element name="draftApprovalRequired" nillable="true" type="boolean"/>
          <element name="draftApprovalStatus" nillable="true" type="string"/>
          <element name="draftAmount" nillable="true" type="double"/>
          <element name="virtualAcctId" nillable="true" type="long"/>
          <element name="virtualAcctNo" nillable="true" type="string"/>
          <element name="currentBalance" nillable="true" type="double"/>
          <element name="pendingBalance" nillable="true" type="double"/>
          <element name="noOfEnrollmentExceptions" nillable="true" type="long"/>
          <element name="ofacVerifiedDate" nillable="true" type="tns:NpnDate"/>
          <element name="cipVerifiedDate" nillable="true" type="tns:NpnDate"/>
          <element name="spaaVerifiedDate" nillable="true" type="tns:NpnDate"/>
          <element name="draftStartDate" nillable="true" type="tns:NpnDate"/>
          <element name="mostRecentAction" nillable="true" type="string"/>
          <element name="enrollmentFees" nillable="true" type="tns:EnrollmentFees"/>
          <element minOccurs="0" name="briefClient" type="tns:BriefClient"/>
          <element minOccurs="0" name="briefSubscriber" type="tns:BriefSubscriber"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentApproval">
        <sequence>
          <element name="approvalId" nillable="true" type="long"/>
          <element name="subscriberId" type="long"/>
          <element name="approvedDate" nillable="true" type="tns:NpnDate"/>
          <element name="approvalComment" nillable="true" type="string"/>
          <element name="approvalStatus" nillable="true">
            <simpleType>
              <restriction base="string">
                <enumeration value="PENDING"/>
                <enumeration value="ACCEPTED"/>
                <enumeration value="REJECTED"/>
              </restriction>
            </simpleType>
          </element>
          <element name="approvalMode" nillable="true">
            <simpleType>
              <restriction base="string">
                <enumeration value="EMAIL"/>
                <enumeration value="PHONE"/>
              </restriction>
            </simpleType>
          </element>
          <element name="approvalType" nillable="true">
            <simpleType>
              <restriction base="string">
                <enumeration value="DRAFT"/>
                <enumeration value="SETTLEMENT"/>
              </restriction>
            </simpleType>
          </element>
          <element minOccurs="0" name="approvalsDocument" type="tns:Document"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="BankInfo">
        <sequence>
          <element name="bankName" type="string"/>
          <element name="address1" type="string"/>
          <element name="address2" type="string"/>
          <element name="city" type="string"/>
          <element name="account_type" type="string"/>
          <element name="account_number" type="string"/>
          <element name="account_status" nillable="true" type="string"/>
          <element name="holder_name" type="string"/>
          <element name="routing_number" type="string"/>
          <element minOccurs="0" name="state" nillable="true" type="string"/>
          <element minOccurs="0" name="zipcode" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="PostedTransaction">
        <sequence>
          <element name="id" type="long"/>
          <element name="subscriberId" type="long"/>
          <element name="processingId" type="long"/>
          <element name="externalId" type="long"/>
          <element name="enrollmentId" nillable="true" type="long"/>
          <element name="postedTransactionStatus" type="string"/>
          <element name="checkNum" type="string"/>
          <element name="checkDate" nillable="true" type="tns:NpnDate"/>
          <element name="checkAmount" nillable="true" type="double"/>
          <element name="base64EncodedFrontImageContent" nillable="true" type="string"/>
          <element name="base64EncodedBackImageContent" nillable="true" type="string"/>
          <element name="dataFileName" nillable="true" type="string"/>
          <element name="imageFileName" nillable="true" type="string"/>
          <element name="postingType" nillable="true" type="string"/>
          <element name="sourceUrl" nillable="true" type="string"/>
          <element name="postedDate" nillable="true" type="tns:NpnDate"/>
          <element name="payer" nillable="true" type="string"/>
          <element name="payee" nillable="true" type="string"/>
          <element name="transactionId" nillable="true" type="long"/>
          <element name="isProcessed" type="boolean"/>
          <element name="authorizedAmount" type="double"/>
          <element name="notes" nillable="true" type="string"/>
          <element name="reason" nillable="true" type="string"/>
          <element name="confirmationCode" nillable="true" type="string"/>
          <element name="auditInfo" nillable="true" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="SettlementList">
        <sequence>
          <element maxOccurs="unbounded" name="settlementInfo" type="tns:Settlement"/>
        </sequence>
      </complexType>
      <complexType name="Settlement">
        <sequence>
          <element name="settlementId" type="long"/>
          <element name="createdDate" type="string"/>
          <element name="clientFirstName" nillable="true" type="string"/>
          <element name="clientLastName" type="string"/>
          <element name="subscriberName" type="string"/>
          <element name="subscriberId" type="long"/>
          <element name="clientId" type="string"/>
          <element name="externalClientId" nillable="true" type="string"/>
          <element name="accountNumber" nillable="true" type="string"/>
          <element name="currentBalance" type="double"/>
          <element name="settlementAmount" type="double"/>
          <element name="settlementReference" nillable="true" type="string"/>
          <element name="payeeName" type="string"/>
          <element name="payments" type="int"/>
          <element minOccurs="0" name="approvalStatus" nillable="true" type="string"/>
          <element minOccurs="0" name="approvalId" nillable="true" type="long"/>
          <element name="approvedOn" nillable="true" type="string"/>
          <element name="approvalDocumentId" nillable="true" type="long"/>
          <element name="dateFormat" nillable="true" type="string"/>
          <element name="settlementStatus" type="string"/>
          <element name="approvalAttempts" type="int"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element name="approvalAttemptList" nillable="true">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="approvalAttempt" nillable="true" type="tns:ApprovalAttempt"/>
              </sequence>
            </complexType>
          </element>
          <element name="paymentScheduleList" nillable="true">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" name="paymentSchedule" type="tns:PaymentSchedule"/>
              </sequence>
            </complexType>
          </element>
          <element minOccurs="0" name="payeeInfo" nillable="true" type="tns:SettlementPayeeInfo"/>
        </sequence>
      </complexType>
      <complexType name="RTPSettlementList">
        <sequence>
          <element maxOccurs="unbounded" name="settlementInfo" type="tns:RTPSettlement"/>
        </sequence>
      </complexType>
      <complexType name="RTPSettlement">
        <sequence>
          <element name="settlementId" type="long"/>
          <element name="createdDate" type="string"/>
          <element name="clientFirstName" nillable="true" type="string"/>
          <element name="clientLastName" type="string"/>
          <element name="subscriberName" type="string"/>
          <element name="subscriberId" type="long"/>
          <element name="clientId" type="string"/>
          <element name="externalClientId" nillable="true" type="string"/>
          <element name="accountNumber" nillable="true" type="string"/>
          <element name="currentBalance" type="double"/>
          <element name="settlementAmount" type="double"/>
          <element name="settlementReference" nillable="true" type="string"/>
          <element name="payeeName" type="string"/>
          <element name="payments" type="int"/>
          <element minOccurs="0" name="approvalStatus" nillable="true" type="string"/>
          <element minOccurs="0" name="approvalId" nillable="true" type="long"/>
          <element name="approvedOn" nillable="true" type="string"/>
          <element name="approvalDocumentId" nillable="true" type="long"/>
          <element name="dateFormat" nillable="true" type="string"/>
          <element name="settlementStatus" type="string"/>
          <element name="approvalAttempts" type="int"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element name="approvalAttemptList" nillable="true">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="approvalAttempt" nillable="true" type="tns:ApprovalAttempt"/>
              </sequence>
            </complexType>
          </element>
          <element name="paymentScheduleList" nillable="true">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" name="paymentSchedule" type="tns:RoutablePaymentSchedule"/>
              </sequence>
            </complexType>
          </element>
          <element minOccurs="0" name="payeeInfo" nillable="true" type="tns:RTPSettlementPayeeInfo"/>
        </sequence>
      </complexType>
      <complexType name="RTPSettlementPayeeInfo">
        <sequence>
          <element minOccurs="0" name="subscriberId" type="long"/>
          <element name="payeeId" type="long"/>
          <element name="subscriberPayeeId" nillable="true" type="string"/>
          <element minOccurs="0" name="payeeName" type="string"/>
          <element minOccurs="0" name="payeeStatus" type="boolean"/>
          <element minOccurs="0" name="payeeDescription" type="string"/>
          <element minOccurs="0" name="externalPayeeId" nillable="true" type="long"/>
          <element minOccurs="0" name="subscriberPayeeContact" type="tns:Contact"/>
          <element minOccurs="0" name="subscriberPayeeAddress" type="tns:Address"/>
          <element minOccurs="0" name="subscriberPayeeBankAccount" type="tns:Account"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
          <element name="routablePayeeId" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="RoutablePaymentSchedule">
        <sequence>
          <element name="scheduledDate" type="tns:NpnDate"/>
          <element name="paymentAmount" type="double"/>
          <element name="status" nillable="true" type="string"/>
          <element name="paymentId" nillable="true" type="long"/>
          <element name="payeeId" nillable="true" type="long"/>
          <element name="agency" nillable="true" type="string"/>
          <element name="transactionMethod" type="tns:RTPTransactionMethod"/>
        </sequence>
      </complexType>
      <complexType name="SettlementScheduleList">
        <sequence>
          <element maxOccurs="unbounded" name="SettlementScheduleInfo" type="tns:SettlementSchedule"/>
        </sequence>
      </complexType>
      <complexType name="SettlementPaymentList">
        <sequence>
          <element maxOccurs="unbounded" name="settlementPayment" type="tns:SettlementPayment"/>
        </sequence>
      </complexType>
      <complexType name="SettlementRTPScheduleList">
        <sequence>
          <element maxOccurs="unbounded" name="SettlementScheduleInfo" type="tns:SettlementRTPSchedule"/>
        </sequence>
      </complexType>
      <complexType name="SettlementRTPSchedule">
        <all>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="paymentAmount" type="double"/>
          <element name="payeeId" nillable="true" type="long"/>
          <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="externalCheckNumber" nillable="true" type="string"/>
          <element name="transactionMethod" type="tns:RoutablePaymentTransactionMethod"/>
        </all>
        <attribute name="scheduleId" type="long" use="optional"/>
        <attribute name="operation" type="tns:Operations" use="optional"/>
      </complexType>
      <complexType name="SettlementSchedule">
        <all>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="paymentAmount" type="double"/>
          <element name="payeeId" nillable="true" type="long"/>
          <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="externalCheckNumber" nillable="true" type="string"/>
          <element name="transactionMethod" type="tns:PaymentTransactionMethod"/>
        </all>
        <attribute name="scheduleId" type="long" use="optional"/>
        <attribute name="operation" type="tns:Operations" use="optional"/>
      </complexType>
      <complexType name="SettlementPayment">
        <all>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="paymentAmount" type="double"/>
          <element name="payeeId" nillable="true" type="long"/>
          <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="externalCheckNumber" nillable="true" type="string"/>
          <element name="transactionMethod" type="tns:PaymentTransactionMethod"/>
          <element minOccurs="0" name="associatedFeeList" nillable="true" type="tns:AssociatedFeeList"/>
        </all>
        <attribute name="scheduleId" type="long" use="optional"/>
        <attribute name="operation" type="tns:Operations" use="optional"/>
      </complexType>
      <complexType name="AssociatedFeeList">
        <sequence>
          <element maxOccurs="unbounded" name="associatedFee" type="tns:AssociatedFee"/>
        </sequence>
      </complexType>
      <complexType name="AssociatedFee">
        <all>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="feeId" nillable="true" type="long"/>
          <element minOccurs="0" name="externalFeeId" nillable="true" type="string"/>
          <element minOccurs="0" name="effectiveDate" nillable="true" type="tns:NpnDate"/>
        </all>
        <attribute name="scheduleId" type="long" use="optional"/>
        <attribute name="operation" type="tns:Operations" use="optional"/>
      </complexType>
      <complexType name="PaymentScheduleList">
        <sequence>
          <element maxOccurs="unbounded" name="PaymentScheduleInfo" type="tns:PaymentSchedule"/>
        </sequence>
      </complexType>
      <complexType name="PaymentSchedule">
        <sequence>
          <element name="scheduledDate" type="tns:NpnDate"/>
          <element name="paymentAmount" type="double"/>
          <element name="status" nillable="true" type="string"/>
          <element name="paymentId" nillable="true" type="long"/>
          <element name="payeeId" nillable="true" type="long"/>
          <element name="agency" nillable="true" type="string"/>
          <element name="transactionMethod" type="tns:PaymentTransactionMethod"/>
        </sequence>
      </complexType>
      <complexType name="ApprovalAttempt">
        <sequence>
          <element name="attemptedDate" type="string"/>
          <element name="attemptedDateFormat" type="string"/>
          <element name="notes" nillable="true" type="string"/>
          <element name="approvalAttemptId" type="long"/>
          <element name="approvalAttemptMode" type="tns:ApprovalAttemptMode"/>
          <element name="approvalAttemptDisposition" nillable="true" type="tns:ApprovalAttemptDisposition"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="ApprovalAttemptList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="approvalAttempts" nillable="true" type="tns:ApprovalAttempt"/>
        </sequence>
      </complexType>
      <simpleType name="ApprovalAttemptMode">
        <restriction base="string">
          <enumeration value="EMAIL"/>
          <enumeration value="PHONE"/>
        </restriction>
      </simpleType>
      <simpleType name="ApprovalAttemptDisposition">
        <restriction base="string">
          <enumeration value="NO_RESPONSE"/>
          <enumeration value="ACCEPTED"/>
          <enumeration value="REJECTED"/>
        </restriction>
      </simpleType>
      <simpleType name="ReprocessStatus">
        <restriction base="string">
          <enumeration value="REPROCESS_USING_SVA"/>
          <enumeration value="REPROCESS_USING_SUB_FEE"/>
          <enumeration value="REPROCESS_USING_CFT_FEE"/>
          <enumeration value="REPROCESS_USING_EXIST_STL"/>
          <enumeration value="REPROCESS_USING_OTHER_STL"/>
        </restriction>
      </simpleType>
      <complexType name="ScheduleDraft">
        <annotation>
          <documentation>A draft schedule</documentation>
        </annotation>
        <sequence>
          <element name="scheduleId" type="long"/>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="estimatedCompletedDate" nillable="true" type="tns:NpnDate"/>
          <element name="transactionClass" type="string"/>
          <element name="transactionMethod" type="string"/>
          <element name="sourceId" nillable="true" type="long"/>
          <element name="sourceBank" nillable="true" type="string"/>
          <element name="sourceAccount" nillable="true" type="string"/>
          <element name="status" nillable="true" type="string"/>
          <element minOccurs="0" name="statusDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="nextDraftDate" type="tns:NpnDate"/>
          <element name="type" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element name="client" type="tns:BriefClient"/>
          <element name="amount" type="double"/>
          <element name="externalReferenceId" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="long"/>
          <element name="destinationBank" nillable="true" type="string"/>
          <element name="destinationAccount" nillable="true" type="string"/>
          <element name="affiliateId" nillable="true" type="long"/>
          <element name="externalId" nillable="true" type="string"/>
          <element name="affiliateType" nillable="true" type="tns:SubscriberAffiliateType"/>
          <element minOccurs="0" name="isReferral" type="boolean"/>
          <element name="remark" nillable="true" type="string"/>
          <element name="subscriberId" nillable="true" type="long"/>
          <element name="assuranceStatus" nillable="true" type="tns:AssuranceStatus"/>
          <element name="isReprocessed" nillable="true" type="tns:ReprocessStatus"/>
          <element minOccurs="0" name="comment" type="string"/>
          <element name="enrollmentStatus" nillable="true" type="string"/>
          <element name="errorCode" nillable="true" type="string"/>
          <element name="errorDescription" nillable="true" type="string"/>
          <element minOccurs="0" name="feeId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="ScheduleFee">
        <annotation>
          <documentation>A fee schedule</documentation>
        </annotation>
        <sequence>
          <element name="scheduleId" type="long"/>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="status" nillable="true" type="string"/>
          <element minOccurs="0" name="statusDate" type="tns:NpnDate"/>
          <element name="transactionClass" nillable="true" type="string"/>
          <element name="transactionMethod" nillable="true" type="string"/>
          <element name="name" nillable="true" type="string"/>
          <element name="type" nillable="true" type="string"/>
          <element name="owner" nillable="true" type="string"/>
          <element name="enrollmentFeeId" nillable="true" type="long"/>
          <element name="amount" type="double"/>
          <element name="source" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element minOccurs="0" name="client" type="tns:BriefClient"/>
          <element name="remark" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="SingleFeeSchedule">
        <annotation>
          <documentation>A fee schedule</documentation>
        </annotation>
        <sequence>
          <element name="scheduleId" type="long"/>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="status" nillable="true" type="string"/>
          <element name="transactionClass" nillable="true" type="string"/>
          <element name="transactionMethod" nillable="true" type="string"/>
          <element name="name" nillable="true" type="string"/>
          <element name="type" nillable="true" type="string"/>
          <element name="owner" nillable="true" type="string"/>
          <element name="enrollmentFeeId" nillable="true" type="long"/>
          <element name="amount" type="double"/>
          <element name="source" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element minOccurs="0" name="client" type="tns:BriefClient"/>
          <element name="recur" nillable="true" type="long"/>
          <element name="remaining" nillable="true" type="long"/>
          <element name="remark" nillable="true" type="string"/>
          <element minOccurs="0" name="comment" type="string"/>
        </sequence>
      </complexType>
      <complexType name="NpnDate">
        <all>
          <element name="date">
            <complexType>
              <attribute name="format" use="required">
                <simpleType>
                  <restriction base="string">
                    <pattern value="dd/MM/yyyy|dd-MM-yyyy|dd/MM/yy|dd-MM-yy|MM/dd/yyyy|MM-dd-yyyy|MM/dd/yy|MM-dd-yy|dd/MM/yyyy hh:mm:ss a|dd-MM-yyyy hh:mm:ss a|dd/MM/yy hh:mm:ss a|dd-MM-yy hh:mm:ss a|MM/dd/yyyy hh:mm:ss a|MM-dd-yyyy hh:mm:ss a|MM/dd/yy hh:mm:ss a|MM-dd-yy hh:mm:ss a|MM-dd-yyyy HH:mm:ss"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute name="value" type="string" use="required"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="Transactions">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="transaction" type="tns:Transaction"/>
        </sequence>
      </complexType>
      <complexType name="Transaction">
        <all>
          <element name="id" type="long"/>
          <element name="enrollmentId" type="long"/>
          <element name="client" type="tns:BriefClient"/>
          <element name="scheduleId" type="long"/>
          <element name="status" nillable="true" type="string"/>
          <element name="class" type="string"/>
          <element name="type" type="string"/>
          <element name="transactionDate" nillable="true" type="tns:NpnDate"/>
          <element name="processedDate" nillable="true" type="tns:NpnDate"/>
          <element name="estimatedCompletedDate" nillable="true" type="tns:NpnDate"/>
          <element name="statusDate" nillable="true" type="tns:NpnDate"/>
          <element name="scheduledDate" nillable="true" type="tns:NpnDate"/>
          <element minOccurs="0" name="updatedBy" nillable="true" type="string"/>
          <element name="fromAccount" type="string"/>
          <element name="toAccount" type="string"/>
          <element name="amount" type="double"/>
          <element name="svaBalance" type="double"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="checkNumber" nillable="true" type="string"/>
          <element minOccurs="0" name="feeId" nillable="true" type="long"/>
          <element name="externalFeeId" nillable="true" type="string"/>
          <element name="feeName" nillable="true" type="string"/>
          <element name="feeType" nillable="true" type="tns:FeeType"/>
          <element name="externalExceptionCode" nillable="true" type="string"/>
          <element name="transactionProcessorExceptionCode" nillable="true" type="string"/>
          <element name="transactionProcessorExceptionName" nillable="true" type="string"/>
          <element minOccurs="0" name="enrollmentExceptions" type="tns:EnrollmentExceptions"/>
          <element name="SubscriberId" nillable="true" type="long"/>
        </all>
      </complexType>
      <complexType name="PayeeInfo">
        <sequence>
          <element minOccurs="0" name="subscriberId" type="long"/>
          <element name="payeeId" type="long"/>
          <element minOccurs="0" name="externalPayeeId" nillable="true" type="long"/>
          <element name="subscriberPayeeId" nillable="true" type="string"/>
          <element minOccurs="0" name="payeeName" type="string"/>
          <element minOccurs="0" name="payeeStatus" type="boolean"/>
          <element minOccurs="0" name="payeeDescription" type="string"/>
          <element minOccurs="0" name="payeeWebsite" type="string"/>
          <element minOccurs="0" name="faxNo" nillable="true" type="string"/>
          <element minOccurs="0" name="phoneNo" nillable="true" type="string"/>
          <element minOccurs="0" name="payeeAdresses" nillable="true">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="address" nillable="true" type="tns:Address"/>
              </sequence>
            </complexType>
          </element>
          <element minOccurs="0" name="payeeContacts" nillable="true">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="contact" nillable="true" type="tns:Contact"/>
              </sequence>
            </complexType>
          </element>
          <element minOccurs="0" name="payeeBankAccounts" nillable="true">
            <complexType>
              <sequence>
                <element maxOccurs="unbounded" minOccurs="0" name="account" nillable="true" type="tns:Account"/>
              </sequence>
            </complexType>
          </element>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="SettlementPayeeInfo">
        <sequence>
          <element minOccurs="0" name="subscriberId" type="long"/>
          <element name="payeeId" type="long"/>
          <element name="subscriberPayeeId" nillable="true" type="string"/>
          <element minOccurs="0" name="payeeName" type="string"/>
          <element minOccurs="0" name="payeeStatus" type="boolean"/>
          <element minOccurs="0" name="payeeDescription" type="string"/>
          <element minOccurs="0" name="externalPayeeId" nillable="true" type="long"/>
          <element minOccurs="0" name="subscriberPayeeContact" type="tns:Contact"/>
          <element minOccurs="0" name="subscriberPayeeAddress" type="tns:Address"/>
          <element minOccurs="0" name="subscriberPayeeBankAccount" type="tns:Account"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="PayeeList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="payees" nillable="true" type="tns:PayeeInfo"/>
        </sequence>
      </complexType>
      <complexType name="ExternalPayeeInfo">
        <sequence>
          <element name="externalPayeeName" type="string"/>
          <element name="externalPayeeId" type="long"/>
          <element name="address1" type="string"/>
          <element name="address2" type="string"/>
          <element name="city" type="string"/>
          <element name="state" type="string"/>
          <element name="country" type="string"/>
          <element name="zip" type="string"/>
        </sequence>
      </complexType>
      <complexType name="ExternalPayeeList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="externalPayees" nillable="true" type="tns:ExternalPayeeInfo"/>
        </sequence>
      </complexType>
      <complexType name="Subscribers">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="subscribers" nillable="true" type="tns:Subscriber"/>
        </sequence>
      </complexType>
      <complexType name="Subscriber">
        <sequence>
          <element name="subscriberId" type="long"/>
          <element name="subscriberName" type="string"/>
          <element name="address1" type="string"/>
          <element minOccurs="0" name="address2" nillable="true" type="string"/>
          <element name="city" type="string"/>
          <element name="state" type="string"/>
          <element name="zip" type="string"/>
          <element name="contactName" type="string"/>
          <element name="phone" type="string"/>
          <element name="email" type="string"/>
          <element name="password" type="string"/>
          <element minOccurs="0" name="subscriberTheme" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="Approval">
        <sequence>
          <element name="approvalId" type="long"/>
          <element name="subscriberId" type="long"/>
          <element minOccurs="0" name="approvedDate" nillable="true" type="tns:NpnDate"/>
          <element name="approvalRequestedDate" type="tns:NpnDate"/>
          <element name="approvalStatus" nillable="true">
            <simpleType>
              <restriction base="string">
                <enumeration value="PENDING"/>
                <enumeration value="ACCEPTED"/>
                <enumeration value="REJECTED"/>
              </restriction>
            </simpleType>
          </element>
          <element name="approvalType" nillable="true">
            <simpleType>
              <restriction base="string">
                <enumeration value="DRAFT"/>
                <enumeration value="SETTLEMENT"/>
              </restriction>
            </simpleType>
          </element>
          <element name="approvalAttemptList" nillable="true" type="tns:ApprovalAttemptList"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
          <element minOccurs="0" name="briefClient" type="tns:BriefClient"/>
          <element minOccurs="0" name="approvalDocument" type="tns:Document"/>
        </sequence>
      </complexType>
      <complexType name="UserList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="user" type="tns:UserInfo"/>
        </sequence>
      </complexType>
      <complexType name="UserInfo">
        <sequence>
          <element name="userId" type="long"/>
          <element name="firstName" type="string"/>
          <element minOccurs="0" name="middleInitial" nillable="true" type="string"/>
          <element name="lastName" type="string"/>
          <element name="userName" type="string"/>
          <element name="email" type="string"/>
          <element name="phone" type="string"/>
          <element minOccurs="0" name="address1" type="string"/>
          <element minOccurs="0" name="address2" type="string"/>
          <element minOccurs="0" name="state" type="string"/>
          <element minOccurs="0" name="city" type="string"/>
          <element minOccurs="0" name="zip" type="string"/>
          <element minOccurs="0" name="comment" type="string"/>
          <element name="userType" type="tns:UserType"/>
          <element name="applicationType" type="tns:ApplicationType"/>
          <element name="status" type="boolean"/>
          <element name="lockStatus" type="boolean"/>
          <element name="ipValidationRequired" type="boolean"/>
          <element minOccurs="0" name="ipAddresses" nillable="true" type="tns:IpAddressesList"/>
          <element name="userRoles" type="tns:Roles"/>
          <element name="lastLoggin" nillable="true" type="tns:NpnDate"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
          <element name="passwordReset" type="boolean"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentDocuments">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="enrollmentDocument" type="tns:Document"/>
        </sequence>
      </complexType>
      <complexType name="Document">
        <sequence>
          <element name="documentId" type="long"/>
          <element name="note" type="string"/>
          <element name="name" type="string"/>
          <element name="contentType" type="string"/>
          <element name="base64EncodedContent" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberDocuments">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="subscriberDocument" type="tns:SubscriberDocument"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberDocument">
        <sequence>
          <element name="documentId" type="long"/>
          <element name="note" type="string"/>
          <element name="name" type="string"/>
          <element name="contentType" type="string"/>
          <element minOccurs="0" name="base64EncodedContent" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="Roles">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="role" nillable="true" type="tns:Role"/>
        </sequence>
      </complexType>
      <complexType name="Role">
        <sequence>
          <element name="name" type="string"/>
          <element minOccurs="0" name="description" nillable="true" type="string"/>
          <element name="permissions" type="tns:Permissions"/>
        </sequence>
      </complexType>
      <complexType name="Permissions">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="permission" type="tns:Permission"/>
        </sequence>
      </complexType>
      <complexType name="Permission">
        <sequence>
          <element minOccurs="0" name="type" nillable="true" type="string"/>
          <element minOccurs="0" name="name" nillable="true" type="string"/>
          <element minOccurs="0" name="description" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="SPAAForecasts">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="forecast" type="tns:SPAAForecast"/>
        </sequence>
      </complexType>
      <complexType name="SPAAForecast">
        <sequence>
          <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
          <element name="scheduleDate" type="string"/>
          <element name="scheduleDateFormat" type="string"/>
          <element name="transactionClass" type="string"/>
          <element name="transactionMethod" type="string"/>
          <element name="clazz" nillable="true" type="string"/>
          <element name="amount" nillable="true" type="double"/>
          <element minOccurs="0" name="balance" nillable="true" type="double"/>
          <element minOccurs="0" name="startingBalance" nillable="true" type="double"/>
          <element minOccurs="0" name="source" nillable="true" type="string"/>
          <element minOccurs="0" name="destination" nillable="true" type="string"/>
          <element minOccurs="0" name="draftType" nillable="true" type="tns:DraftType"/>
          <element minOccurs="0" name="payeeName" nillable="true" type="string"/>
          <element minOccurs="0" name="feeName" nillable="true" type="string"/>
          <element minOccurs="0" name="feeType" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="SPAAForecastRequestList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="forecast" type="tns:SPAAForecastRequest"/>
        </sequence>
      </complexType>
      <complexType name="SPAAForecastRequest">
        <all>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="type">
            <simpleType>
              <restriction base="string">
                <enumeration value="DRAFT"/>
                <enumeration value="FEE"/>
                <enumeration value="PAYMENT"/>
              </restriction>
            </simpleType>
          </element>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
          <element minOccurs="0" name="transactionMethod" nillable="true" type="tns:TransactionMethod"/>
          <element minOccurs="0" name="draftType" nillable="true" type="tns:DraftType"/>
        </all>
      </complexType>
      <complexType name="SPAABalances">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="balance" type="tns:SPAABalance"/>
        </sequence>
      </complexType>
      <complexType name="SPAABalance">
        <sequence>
          <element name="balanceDate" type="string"/>
          <element name="balanceDateFormat" type="string"/>
          <element minOccurs="0" name="balance" nillable="true" type="double"/>
        </sequence>
      </complexType>
      <complexType name="PaymentList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="payment" nillable="true" type="tns:Payment"/>
        </sequence>
      </complexType>
      <complexType name="PaymentIdList">
        <sequence>
          <element maxOccurs="unbounded" name="paymentId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="Payment">
        <sequence>
          <element name="scheduleDate" type="string"/>
          <element name="settlementId" type="long"/>
          <element minOccurs="0" name="accountInfo" nillable="true" type="string"/>
          <element name="clientId" type="string"/>
          <element name="externalClientId" nillable="true" type="string"/>
          <element name="paymentId" type="long"/>
          <element name="status" type="string"/>
          <element minOccurs="0" name="statusDate" type="tns:NpnDate"/>
          <element name="clientFirstName" type="string"/>
          <element name="clientLastName" type="string"/>
          <element minOccurs="0" name="payee" nillable="true" type="string"/>
          <element name="checkNumber" type="string"/>
          <element minOccurs="0" name="amount" nillable="true" type="double"/>
          <element name="dateFormat" type="string"/>
          <element name="transactionClass" nillable="true" type="string"/>
          <element name="transactionMethod" nillable="true" type="string"/>
          <element name="warning">
            <complexType>
              <attribute name="hasWarning" type="boolean"/>
              <attribute name="message" type="string"/>
            </complexType>
          </element>
          <element name="scheduleId" type="long"/>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="dueDate" type="tns:NpnDate"/>
          <element name="accountNo" type="string"/>
          <element name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="transactionFeeAmount" nillable="true" type="double"/>
          <element name="subscriberPayee" type="tns:PayeeInfo"/>
          <element name="assuranceStatus" nillable="true" type="tns:AssuranceStatus"/>
          <element name="isReprocessed" nillable="true" type="tns:ReprocessStatus"/>
          <element name="trackingNumber" nillable="true" type="string"/>
          <element name="modifiedOn" nillable="true" type="string"/>
          <element name="modifiedBy" nillable="true" type="string"/>
          <element name="createdOn" type="tns:NpnDate"/>
          <element name="createdBy" type="string"/>
          <element name="enrollmentStatus" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="PositivePayDetails">
        <sequence>
          <element name="subscriberId" type="long"/>
          <element name="positivePayId" type="long"/>
          <element name="creditorPhoneNumber" type="string"/>
          <element name="creditorName" type="string"/>
          <element name="contactName" type="string"/>
          <element name="settlementReference" nillable="true" type="string"/>
          <element name="paymentDueDate" type="string"/>
          <element name="clientFirstName" type="string"/>
          <element name="clientLastName" type="string"/>
          <element name="clientAccountNumber" type="string"/>
          <element name="clientAddressLine1" type="string"/>
          <element name="clientAddressLine2" nillable="true" type="string"/>
          <element name="clientCity" type="string"/>
          <element name="clientState" type="string"/>
          <element name="clientZip" type="string"/>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="checkNumber" nillable="true" type="string"/>
          <element name="dateFormat" type="string"/>
        </sequence>
      </complexType>
      <complexType name="UpdatePaymentList">
        <sequence>
          <element maxOccurs="unbounded" name="updatePayment" type="tns:UpdatePayment"/>
        </sequence>
      </complexType>
      <complexType name="UpdatePayment">
        <all>
          <element name="subscriberId" type="long"/>
          <element name="clientId" type="string"/>
          <element name="paymentId" type="long"/>
          <element name="payeeId" type="long"/>
          <element name="accountNumber" nillable="true" type="string"/>
          <element name="transactionMethod" type="string"/>
          <element name="amount" type="double"/>
          <element name="dueDate" type="tns:NpnDate"/>
          <element name="comment" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="DraftError">
        <sequence>
          <element name="transactionDate" type="string"/>
          <element name="transactionId" type="long"/>
          <element name="scheduleId" type="long"/>
          <element name="clientId" type="string"/>
          <element name="clientFirstName" type="string"/>
          <element name="clientLastName" type="string"/>
          <element name="code" type="string"/>
          <element name="reason" type="string"/>
          <element name="status" type="string"/>
          <element name="dateFormat" type="string"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentException">
        <sequence>
          <element name="transactionDate" type="string"/>
          <element name="transactionId" type="long"/>
          <element name="scheduleId" type="long"/>
          <element name="transactionStatus" type="string"/>
          <element name="transactionClass" type="string"/>
          <element name="clientId" type="string"/>
          <element name="clientFirstName" type="string"/>
          <element name="clientLastName" type="string"/>
          <element name="shortDetail" type="string"/>
          <element name="amount" type="double"/>
          <element name="nsfAmount" type="double"/>
          <element name="code" type="string"/>
          <element name="reason" type="string"/>
        </sequence>
      </complexType>
      <complexType name="RolePermissionList">
        <sequence>
          <element maxOccurs="unbounded" name="rolePermission" type="string"/>
        </sequence>
      </complexType>
      <complexType name="IpAddressesList">
        <sequence>
          <element maxOccurs="unbounded" name="IpAddress" type="string"/>
        </sequence>
      </complexType>
      <complexType name="Partner">
        <sequence>
          <element minOccurs="0" name="partnerId" nillable="true" type="long"/>
          <element minOccurs="0" name="partnerName" nillable="true" type="string"/>
          <element minOccurs="0" name="partnerAddress1" nillable="true" type="string"/>
          <element minOccurs="0" name="partnerAddress2" nillable="true" type="string"/>
          <element minOccurs="0" name="partnerCity" nillable="true" type="string"/>
          <element minOccurs="0" name="partnerState" nillable="true" type="string"/>
          <element minOccurs="0" name="partnerZipcode" nillable="true" type="string"/>
          <element minOccurs="0" name="partnerPhone" nillable="true" type="string"/>
          <element minOccurs="0" name="partnerEmail" nillable="true" type="string"/>
          <element minOccurs="0" name="userName" nillable="true" type="string"/>
          <element minOccurs="0" name="status" nillable="true" type="tns:PartnerStatus"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <simpleType name="PartnerStatus">
        <restriction base="string">
          <enumeration value="ACTIVE"/>
          <enumeration value="INACTIVE"/>
        </restriction>
      </simpleType>
      <simpleType name="paymentMethod">
        <restriction base="string">
          <enumeration value="ALL"/>
          <enumeration value="BILL_PAY"/>
          <enumeration value="CHECK_BY_PHONE"/>
          <enumeration value="PHYSICAL_CHECK_BUSINESS"/>
          <enumeration value="PHYSICAL_CHECK_2DAY"/>
          <enumeration value="PHYSICAL_CHECK_OVERNIGHT"/>
          <enumeration value="WIRE_TRANSFER"/>
        </restriction>
      </simpleType>
      <simpleType name="AssuranceStatus">
        <restriction base="string">
          <enumeration value="IGNORED"/>
          <enumeration value="ASSURED"/>
        </restriction>
      </simpleType>
      <complexType name="ScheduleStatuses">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="status" nillable="true" type="tns:ScheduleStatus"/>
        </sequence>
      </complexType>
      <simpleType name="ScheduleStatus">
        <restriction base="string">
          <enumeration value="SCHEDULED"/>
          <enumeration value="SUBMITTED"/>
          <enumeration value="COMPLETED"/>
          <enumeration value="INPROCESS"/>
          <enumeration value="FAILED"/>
          <enumeration value="SUSPENDED"/>
          <enumeration value="CLEARED"/>
          <enumeration value="DELETED"/>
          <enumeration value="PENDING"/>
        </restriction>
      </simpleType>
      <simpleType name="TransactionStatus">
        <restriction base="string">
          <enumeration value="NEW"/>
          <enumeration value="IN_PROCESS"/>
          <enumeration value="SUBMITTED"/>
          <enumeration value="COMPLETED"/>
          <enumeration value="FAILED"/>
          <enumeration value="DELETED"/>
          <enumeration value="CLEARED"/>
        </restriction>
      </simpleType>
      <simpleType name="RuleSetStatus">
        <restriction base="string">
          <enumeration value="INACTIVE"/>
          <enumeration value="ACTIVE"/>
        </restriction>
      </simpleType>
      <simpleType name="TransactionMethod">
        <restriction base="string">
          <enumeration value="INTERNAL"/>
          <enumeration value="CFT_STL_CLN_SVA"/>
          <enumeration value="CLN_SVA_SUB_STL"/>
          <enumeration value="SERVICE"/>
          <enumeration value="TRANSACTION"/>
          <enumeration value="DRAFT"/>
          <enumeration value="DRAFT_BY_CHECK"/>
          <enumeration value="BILL_PAYMENT"/>
          <enumeration value="CHECK_2_DAY"/>
          <enumeration value="CHECK_STD"/>
          <enumeration value="CHECK_OVERNIGHT"/>
          <enumeration value="CHECK_PLUS"/>
          <enumeration value="WIRE"/>
          <enumeration value="PHONE"/>
          <enumeration value="ADVANCE"/>
          <enumeration value="ADJUST"/>
          <enumeration value="LOAD"/>
          <enumeration value="CLN_SVA_CFT_STL"/>
          <enumeration value="SUB_FEE_CFT_STL"/>
        </restriction>
      </simpleType>
      <simpleType name="PaymentTransactionMethod">
        <restriction base="string">
          <enumeration value="BILL_PAYMENT"/>
          <enumeration value="CHECK_2_DAY"/>
          <enumeration value="CHECK_STD"/>
          <enumeration value="CHECK_OVERNIGHT"/>
          <enumeration value="CHECK_PLUS"/>
          <enumeration value="WIRE"/>
          <enumeration value="PHONE"/>
          <enumeration value="P_ACH"/>
          <enumeration value="SUB_FEE_SUB_PHONE_STL"/>
          <enumeration value="SUB_PHONE_STL-CLN_SVA"/>
          <enumeration value="PAYPAL"/>
          <enumeration value="REFUND"/>
        </restriction>
      </simpleType>
      <simpleType name="RoutablePaymentTransactionMethod">
        <restriction base="string">
          <enumeration value="ROUTABLE_PAYMENT"/>
        </restriction>
      </simpleType>
      <simpleType name="RTPTransactionMethod">
        <restriction base="string">
          <enumeration value="BILL_PAYMENT"/>
          <enumeration value="CHECK_2_DAY"/>
          <enumeration value="CHECK_STD"/>
          <enumeration value="CHECK_OVERNIGHT"/>
          <enumeration value="CHECK_PLUS"/>
          <enumeration value="WIRE"/>
          <enumeration value="PHONE"/>
          <enumeration value="P_ACH"/>
          <enumeration value="SUB_FEE_SUB_PHONE_STL"/>
          <enumeration value="SUB_PHONE_STL-CLN_SVA"/>
          <enumeration value="PAYPAL"/>
          <enumeration value="REFUND"/>
          <enumeration value="ROUTABLE_PAYMENT"/>
        </restriction>
      </simpleType>
      <simpleType name="InstantPaymentTransactionMethod">
        <restriction base="string">
          <enumeration value="PAYPAL"/>
        </restriction>
      </simpleType>
      <simpleType name="NotificationReactivationMethod">
        <restriction base="string">
          <enumeration value="SMS"/>
          <enumeration value="EMAIL"/>
        </restriction>
      </simpleType>
      <simpleType name="PositivePayScheduleStatus">
        <restriction base="string">
          <enumeration value="ALL"/>
          <enumeration value="CLEARED"/>
          <enumeration value="NOT_CLEARED"/>
        </restriction>
      </simpleType>
      <simpleType name="SettlementStatus">
        <restriction base="string">
          <enumeration value="ACTIVE"/>
          <enumeration value="INACTIVE"/>
          <enumeration value="COMPLETED"/>
          <enumeration value="DELETED"/>
          <enumeration value="SUSPENDED"/>
        </restriction>
      </simpleType>
      <simpleType name="DraftType">
        <restriction base="string">
          <enumeration value="MONTHLY"/>
          <enumeration value="BIWEEKLY"/>
          <enumeration value="ADHOC"/>
        </restriction>
      </simpleType>
      <complexType name="PaymentOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:PaymentOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="PaymentOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="EFFECTIVE_DATE"/>
                    <enumeration value="SCHEDULE_DATE"/>
                    <enumeration value="SETTLEMENT_ID"/>
                    <enumeration value="PAYMENT_ID"/>
                    <enumeration value="STATUS"/>
                    <enumeration value="PAYMENT_AMOUNT"/>
                    <enumeration value="MODIFIED_ON"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="SettlementOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:SettlementOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="SettlementOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="CREATED_DATE"/>
                    <enumeration value="SETTLEMENT_ID"/>
                    <enumeration value="CLIENT_FIRST_NAME"/>
                    <enumeration value="CLIENT_LAST_NAME"/>
                    <enumeration value="SUBSCRIBER_ID"/>
                    <enumeration value="CLIENT_ID"/>
                    <enumeration value="AGENCY"/>
                    <enumeration value="BALANCE_AMOUNT"/>
                    <enumeration value="SETTLEMENT_AMOUNT"/>
                    <enumeration value="NUMBER_OF_PAYMENTS"/>
                    <enumeration value="STATUS"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="UserOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:UserOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="UserOrderBy">
        <restriction base="string">
          <enumeration value="LASTNAME"/>
          <enumeration value="FIRSTNAME"/>
          <enumeration value="STATUS"/>
          <enumeration value="USERNAME"/>
          <enumeration value="CREATEDON"/>
          <enumeration value="MODIFIEDON"/>
          <enumeration value="ID"/>
        </restriction>
      </simpleType>
      <complexType name="SubscriberPayeeOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:SubscriberPayeeOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="SubscriberPayeeOrderBy">
        <restriction base="string">
          <enumeration value="NAME"/>
          <enumeration value="DESCRIPTION"/>
          <enumeration value="STATUS"/>
          <enumeration value="ID"/>
          <enumeration value="SUBSCRIBERPAYEEID"/>
          <enumeration value="CREATEDON"/>
          <enumeration value="MODIFIEDON"/>
          <enumeration value="CREATEDBY"/>
          <enumeration value="MODIFIEDBY"/>
        </restriction>
      </simpleType>
      <complexType name="TopLevelFees">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="fee" type="tns:TopLevelFee"/>
        </sequence>
      </complexType>
      <complexType name="TopLevelFee">
        <all>
          <element minOccurs="0" name="id" nillable="true" type="long"/>
          <element name="type" type="string"/>
          <element name="owner" type="string"/>
          <element name="code" type="string"/>
          <element name="name" type="string"/>
          <element name="defPriority" type="int"/>
          <element name="defAmount" type="double"/>
          <element name="defFrequency" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="SubscriberFees">
        <sequence>
          <element maxOccurs="unbounded" name="fee" type="tns:SubscriberFee"/>
        </sequence>
      </complexType>
      <complexType name="CreateSubscriberFees">
        <sequence>
          <element maxOccurs="unbounded" name="fee" type="tns:CreateSubscriberFee"/>
        </sequence>
      </complexType>
      <complexType name="CreateSubscriberFee">
        <all>
          <element name="feeId" type="long"/>
          <element minOccurs="0" name="externalFeeId" nillable="true" type="string"/>
          <element name="type" type="tns:FeeType"/>
          <element name="name" type="string"/>
          <element name="description" type="string"/>
          <element name="required" type="boolean"/>
          <element name="priority" type="long"/>
          <element name="amount" type="double"/>
        </all>
      </complexType>
      <complexType name="SubscriberFee">
        <all>
          <element minOccurs="0" name="id" nillable="true" type="long"/>
          <element name="feeId" type="long"/>
          <element name="externalfeeId" nillable="true" type="string"/>
          <element name="type" type="tns:FeeType"/>
          <element name="owner" type="tns:OwnerType"/>
          <element name="name" type="string"/>
          <element name="source" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="string"/>
          <element name="description" type="string"/>
          <element name="required" type="boolean"/>
          <element name="priority" type="long"/>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="status" nillable="true" type="tns:SubscriberFeeStatus"/>
        </all>
      </complexType>
      <complexType name="SubscriberFeeRequest">
        <all>
          <element minOccurs="0" name="id" nillable="true" type="long"/>
          <element name="feeId" type="long"/>
          <element minOccurs="0" name="externalFeeId" nillable="true" type="string"/>
          <element name="type" type="tns:FeeType"/>
          <element name="name" type="string"/>
          <element name="description" type="string"/>
          <element name="required" type="boolean"/>
          <element name="priority" type="long"/>
          <element name="amount" type="double"/>
        </all>
      </complexType>
      <complexType name="EnrollmentFees">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="fee" type="tns:EnrollmentFee"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentFee">
        <all>
          <element name="id" nillable="true" type="long"/>
          <element name="subscriberFeeId" type="long"/>
          <element name="type" type="tns:FeeType"/>
          <element name="priority" type="long"/>
          <element name="amount" type="double"/>
          <element name="frequency" type="tns:FeeFrequencyType"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </all>
      </complexType>
      <complexType name="GetEnrollmentFees">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="fee" type="tns:GetEnrollmentFee"/>
        </sequence>
      </complexType>
      <complexType name="GetEnrollmentFee">
        <all>
          <element name="id" nillable="true" type="long"/>
          <element name="subscriberFeeId" type="long"/>
          <element name="type" type="tns:FeeType"/>
          <element name="name" type="string"/>
          <element name="source" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="string"/>
          <element name="priority" type="long"/>
          <element name="amount" type="double"/>
          <element name="frequency" type="tns:FeeFrequencyType"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </all>
      </complexType>
      <simpleType name="FeeFrequencyType">
        <restriction base="string">
          <enumeration value="ONCE"/>
          <enumeration value="WEEKLY"/>
          <enumeration value="MONTHLY"/>
          <enumeration value="QUARTERLY"/>
          <enumeration value="YEARLY"/>
          <enumeration value="CYCLE"/>
          <enumeration value="ADHOC"/>
          <enumeration value="BIWEEKLY"/>
        </restriction>
      </simpleType>
      <simpleType name="FeeType">
        <restriction base="string">
          <enumeration value="SERVICE"/>
          <enumeration value="TRANSACTION"/>
        </restriction>
      </simpleType>
      <simpleType name="OwnerType">
        <restriction base="string">
          <enumeration value="SUB"/>
          <enumeration value="CFT"/>
          <enumeration value="AFF"/>
        </restriction>
      </simpleType>
      <simpleType name="SubscriberStatus">
        <restriction base="string">
          <enumeration value="ALL"/>
          <enumeration value="ACTIVE"/>
          <enumeration value="INACTIVE"/>
          <enumeration value="SUSPENDED"/>
        </restriction>
      </simpleType>
      <simpleType name="RecurringTypes">
        <restriction base="string">
          <enumeration value="MONTHLY"/>
          <enumeration value="BI WEEKLY"/>
          <enumeration value="SPLIT DRAFT"/>
        </restriction>
      </simpleType>
      <complexType name="SubscriberOrder">
        <sequence>
          <element minOccurs="0" name="orderBy" type="tns:SubscriberOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="NAME"/>
                    <enumeration value="SUBSCRIBER_ID"/>
                    <enumeration value="PRIMARY_CONTACT"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="SubscriberList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="subscriberListInfo" nillable="true" type="tns:SubscriberListInfo"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberListInfo">
        <sequence>
          <element name="subscriberId" type="long"/>
          <element name="name" type="string"/>
          <element name="address1" type="string"/>
          <element minOccurs="0" name="address2" nillable="true" type="string"/>
          <element name="city" type="string"/>
          <element name="state" type="string"/>
          <element name="zip" type="string"/>
          <element name="contactName" type="string"/>
          <element name="phone" type="string"/>
          <element name="email" type="string"/>
          <element name="subscriberAbbreviation" type="string"/>
          <element name="primaryContact" nillable="true" type="string"/>
          <element name="totalEnrollments" type="long"/>
          <element name="pendingSPAAs" type="long"/>
          <element name="pendingSettlements" type="long"/>
          <element name="status" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <simpleType name="UserType">
        <restriction base="string">
          <enumeration value="INTERNAL"/>
          <enumeration value="EXTERNAL"/>
          <enumeration value="CLIENT"/>
          <enumeration value="AFFILIATE"/>
          <enumeration value="AGENCY"/>
          <enumeration value="DEALER"/>
          <enumeration value="FI"/>
          <enumeration value="SUB_AGENT"/>
        </restriction>
      </simpleType>
      <simpleType name="ApplicationType">
        <restriction base="string">
          <enumeration value="NPN"/>
          <enumeration value="PARTNER"/>
        </restriction>
      </simpleType>
      <simpleType name="ApprovalStatus">
        <restriction base="string">
          <enumeration value="PENDING"/>
          <enumeration value="ACCEPTED"/>
          <enumeration value="REJECTED"/>
        </restriction>
      </simpleType>
      <complexType name="PositivePayInquiryList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="PositivePayInquiryInfo" nillable="true" type="tns:PositivePayInquiry"/>
        </sequence>
      </complexType>
      <complexType name="PositivePayInquiry">
        <sequence>
          <element name="positivePayInquiryId" type="long"/>
          <element name="subscriberId" type="long"/>
          <element name="paymentAmount" nillable="true" type="double"/>
          <element name="checkNumber" nillable="true" type="string"/>
          <element name="issueDate" type="tns:NpnDate"/>
          <element name="payee" type="string"/>
          <element name="clientFirstName" type="string"/>
          <element name="clientLastName" nillable="true" type="string"/>
          <element name="clientId" nillable="true" type="string"/>
          <element name="presentedAs" nillable="true" type="string"/>
          <element name="exceptionType" nillable="true" type="string"/>
          <element name="description" nillable="true" type="string"/>
          <element name="status" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="PositivePayExceptionsOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:PositivePayExceptionOrderBy"/>
        </sequence>
      </complexType>
      <simpleType name="PositivePayExceptionOrderBy">
        <restriction base="string">
          <enumeration value="datePresented"/>
          <enumeration value="checkNumber"/>
          <enumeration value="clientName"/>
          <enumeration value="clientId"/>
          <enumeration value="agency"/>
          <enumeration value="paymentAmount"/>
        </restriction>
      </simpleType>
      <simpleType name="AccountType">
        <restriction base="string">
          <enumeration value="CHECKING"/>
          <enumeration value="SAVING"/>
        </restriction>
      </simpleType>
      <complexType name="NpnBankAccountList">
        <sequence>
          <element maxOccurs="unbounded" name="npnBankAccount" type="tns:npnBankAccount"/>
        </sequence>
      </complexType>
      <complexType name="npnBankAccount">
        <sequence>
          <element name="bankInfo" type="tns:BankInfo"/>
          <element name="npnBankAccountId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberBankAccountList">
        <sequence>
          <element maxOccurs="unbounded" name="subscriberBankAccount" type="tns:SubscriberBankAccount"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberBankAccount">
        <sequence>
          <element name="bankInfo" type="tns:BankInfo"/>
          <element name="subscriberBankAccountId" type="long"/>
          <element name="thresholdAmount" type="double"/>
          <element name="subscriberAccountTypes" nillable="true" type="tns:SubscriberAccountTypeList"/>
        </sequence>
      </complexType>
      <complexType name="PaymentDetails">
        <sequence>
          <element name="subscriberId" type="long"/>
          <element name="scheduleId" type="long"/>
          <element name="scheduleStatus" type="string"/>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="statusDate" type="tns:NpnDate"/>
          <element name="scheduledAmount" type="double"/>
          <element name="clientId" type="string"/>
          <element name="clientFirstName" type="string"/>
          <element name="clientLastName" nillable="true" type="string"/>
          <element name="clientAddress1" nillable="true" type="string"/>
          <element name="clientAddress2" nillable="true" type="string"/>
          <element name="clientState" nillable="true" type="string"/>
          <element name="clientCity" nillable="true" type="string"/>
          <element name="clientZipCode" nillable="true" type="string"/>
          <element name="settlementId" nillable="true" type="long"/>
          <element name="settlementReference" nillable="true" type="string"/>
          <element name="accountInfo" nillable="true" type="string"/>
          <element name="payeeId" nillable="true" type="long"/>
          <element name="payeeName" nillable="true" type="string"/>
          <element name="payeeContactName" nillable="true" type="string"/>
          <element name="payeePhoneNumber" nillable="true" type="string"/>
          <element name="checkNumber" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="InternalUserList">
        <sequence>
          <element maxOccurs="unbounded" name="internalUserId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="TransactionMethodsList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="transactionMethod" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <simpleType name="TransactionClass">
        <restriction base="string">
          <enumeration value="DRAFT"/>
          <enumeration value="FEE"/>
          <enumeration value="PAYMENT"/>
          <enumeration value="MISC"/>
          <enumeration value="COMM"/>
          <enumeration value="TRANSFER"/>
          <enumeration value="WITHDRAWAL"/>
          <enumeration value="COMM_PAYOUT"/>
          <enumeration value="PRENOTE"/>
          <enumeration value="R_COMM"/>
          <enumeration value="R_COMM_PAYOUT"/>
          <enumeration value="R_FEE"/>
        </restriction>
      </simpleType>
      <complexType name="TransactionClassList">
        <sequence>
          <element maxOccurs="unbounded" name="transactionClass" type="tns:TransactionClass"/>
        </sequence>
      </complexType>
      <simpleType name="TransactionProcessorDirection">
        <restriction base="string">
          <enumeration value="IN_BOUND"/>
          <enumeration value="OUT_BOUND"/>
        </restriction>
      </simpleType>
      <element name="serviceFault">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" name="error">
              <complexType>
                <sequence>
                  <element name="errorCode" type="string"/>
                  <element name="errorDescription" type="string"/>
                </sequence>
              </complexType>
            </element>
          </sequence>
        </complexType>
      </element>
      <complexType name="CreateSubscriberAccount">
        <sequence>
          <element name="bankInfo" type="tns:SubscriberAccountBankDetails"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberAccount">
        <sequence>
          <element name="subscriberAccountId" type="long"/>
          <element name="bankInfo" type="tns:SubscriberAccountBankDetails"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberAccountBankDetails">
        <all>
          <element name="bankName" type="string"/>
          <element name="accountNumber" type="string"/>
          <element name="routingNumber" type="string"/>
          <element name="subscriberAccountType" type="tns:SubscriberAccountType"/>
        </all>
      </complexType>
      <simpleType name="SubscriberAccountType">
        <restriction base="string">
          <enumeration value="SUB_DRAFT_STL"/>
          <enumeration value="SUB_FEE"/>
          <enumeration value="SUB_CHK_STL"/>
          <enumeration value="SUB_BP_STL"/>
          <enumeration value="SUB_PHONE_STL"/>
          <enumeration value="SUB_WIRE_STL"/>
          <enumeration value="FUNDING"/>
          <enumeration value="CFT_FEE_AND_REVENUE"/>
          <enumeration value="SUB_BUSINESS"/>
          <enumeration value="SUB_LOAN_ACT"/>
          <enumeration value="SUB_PAYPAL_STL"/>
          <enumeration value="SUB_LOAN_ACT1"/>
        </restriction>
      </simpleType>
      <complexType name="SubscriberAccountTypeList">
        <sequence>
          <element maxOccurs="unbounded" name="subscriberAccountType" type="tns:SubscriberAccountType"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberAccountIdList">
        <sequence>
          <element maxOccurs="unbounded" name="subscriberAccountId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="TransactionProcessorList">
        <sequence>
          <element maxOccurs="unbounded" name="transactionProcessor" type="tns:TransactionProcessor"/>
        </sequence>
      </complexType>
      <complexType name="TransactionProcessor">
        <sequence>
          <element name="transactionProcessorId" type="long"/>
          <element name="transactionProcessorName" type="string"/>
          <element name="transactionProcessorType" type="string"/>
          <element minOccurs="0" name="transactionProcessorDirection" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberProcessorSetupList">
        <sequence>
          <element maxOccurs="unbounded" name="subscriberProcessorSetup" type="tns:SubscriberProcessorSetup"/>
        </sequence>
      </complexType>
      <complexType name="SubscriberProcessorSetup">
        <sequence>
          <element name="subscriberProcessorSetupId" type="long"/>
          <element name="transactionProcessor" type="tns:TransactionProcessor"/>
        </sequence>
      </complexType>
      <complexType name="TransactionProcessorListForCreateProcessorSetup">
        <sequence>
          <element maxOccurs="unbounded" name="transactionProcessor" type="tns:TransactionProcessorForCreateProcessorSetup"/>
        </sequence>
      </complexType>
      <complexType name="TransactionProcessorForCreateProcessorSetup">
        <all>
          <element name="transactionProcessorId" type="long"/>
          <element name="transactionProcessorType" type="string"/>
        </all>
      </complexType>
      <complexType name="SubscriberProcessorSetupIds">
        <sequence>
          <element maxOccurs="unbounded" name="subscriberProcessorSetupId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="Affiliate">
        <all>
          <element name="subscriberId" type="long"/>
          <element minOccurs="0" name="affiliateId" type="long"/>
          <element minOccurs="0" name="externalAffiliateId" nillable="true" type="string"/>
          <element minOccurs="0" name="parentAffiliateId" nillable="true" type="long"/>
          <element minOccurs="0" name="parentExternalAffiliateId" nillable="true" type="string"/>
          <element minOccurs="0" name="externalId" nillable="true" type="string"/>
          <element name="affiliateType" type="tns:SubscriberAffiliateType"/>
          <element name="name" type="string"/>
          <element name="address1" type="string"/>
          <element minOccurs="0" name="address2" nillable="true" type="string"/>
          <element name="city" type="string"/>
          <element name="state" type="string"/>
          <element name="zipcode" type="string"/>
          <element name="email" type="string"/>
          <element name="phone" type="string"/>
          <element minOccurs="0" name="fax" nillable="true" type="string"/>
          <element name="businessType" type="tns:BusinessType"/>
          <element minOccurs="0" name="taxId" type="string"/>
          <element default="ACH" minOccurs="0" name="payoutMethod" type="tns:PayoutMethod"/>
          <element default="MONTHLY" minOccurs="0" name="payoutFrequency" type="tns:PayoutFrequency"/>
          <element default="15" minOccurs="0" name="payoutFrequencyValue" type="string"/>
          <element minOccurs="0" name="bankName" nillable="true" type="string"/>
          <element minOccurs="0" name="routingNunber" nillable="true" type="string"/>
          <element minOccurs="0" name="accountType" nillable="true" type="tns:AccountType"/>
          <element minOccurs="0" name="accountNumber" nillable="true" type="string"/>
          <element minOccurs="0" name="holdersName" nillable="true" type="string"/>
          <element minOccurs="0" name="bankAddress1" nillable="true" type="string"/>
          <element minOccurs="0" name="bankAddress2" nillable="true" type="string"/>
          <element minOccurs="0" name="bankCity" nillable="true" type="string"/>
          <element minOccurs="0" name="bankState" nillable="true" type="string"/>
          <element minOccurs="0" name="bankZipcode" nillable="true" type="string"/>
          <element minOccurs="0" name="signatureDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="status" type="tns:AffiliateStatus"/>
          <element minOccurs="0" name="collectedBalance" type="double"/>
          <element minOccurs="0" name="pendingBalance" type="double"/>
          <element minOccurs="0" name="isPaidAsAdvance" type="boolean"/>
          <element minOccurs="0" name="checkAddress" type="tns:AddressInfo"/>
          <element minOccurs="0" name="isReferral" type="boolean"/>
          <element minOccurs="0" name="referralStartDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="referralEndDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="fixed" type="tns:FixedDistTypeUnbounded"/>
          <element minOccurs="0" name="payoutRule" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </all>
      </complexType>
      <complexType name="AffiliateGroup">
        <all>
          <element name="Id" type="long"/>
          <element minOccurs="0" name="name" nillable="true" type="string"/>
          <element minOccurs="0" name="externalRulesetId" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="AffiliateUpdate">
        <all>
          <element minOccurs="0" name="externalAffiliateId" type="string"/>
          <element minOccurs="0" name="parentAffiliateId" type="long"/>
          <element minOccurs="0" name="affiliateType" type="tns:SubscriberAffiliateType"/>
          <element minOccurs="0" name="name" type="string"/>
          <element minOccurs="0" name="address1" type="string"/>
          <element minOccurs="0" name="address2" type="string"/>
          <element minOccurs="0" name="city" type="string"/>
          <element minOccurs="0" name="state" type="string"/>
          <element minOccurs="0" name="zipcode" type="string"/>
          <element minOccurs="0" name="email" type="string"/>
          <element minOccurs="0" name="phone" type="string"/>
          <element minOccurs="0" name="fax" type="string"/>
          <element minOccurs="0" name="businessType" type="tns:BusinessType"/>
          <element minOccurs="0" name="taxId" type="string"/>
          <element minOccurs="0" name="payoutMethod" type="tns:PayoutMethod"/>
          <element minOccurs="0" name="payoutFrequency" type="tns:PayoutFrequency"/>
          <element minOccurs="0" name="payoutFrequencyValue" type="string"/>
          <element minOccurs="0" name="routingNunber" type="string"/>
          <element minOccurs="0" name="accountType" type="tns:AccountType"/>
          <element minOccurs="0" name="accountNumber" type="string"/>
          <element minOccurs="0" name="holdersName" type="string"/>
          <element minOccurs="0" name="checkAddress" type="tns:AddressInfo"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </all>
      </complexType>
      <complexType name="AffiliateAdmin">
        <all>
          <element name="subscriberId" type="long"/>
          <element minOccurs="0" name="externalAffiliateId" nillable="true" type="string"/>
          <element minOccurs="0" name="parentAffiliateId" nillable="true" type="long"/>
          <element minOccurs="0" name="parentExternalAffiliateId" nillable="true" type="string"/>
          <element name="affiliateType" type="tns:SubscriberAffiliateType"/>
          <element name="name" type="string"/>
          <element name="address1" type="string"/>
          <element minOccurs="0" name="address2" type="string"/>
          <element name="city" type="string"/>
          <element name="state" type="string"/>
          <element name="zipcode" type="string"/>
          <element name="email" type="string"/>
          <element name="phone" type="string"/>
          <element minOccurs="0" name="fax" type="string"/>
          <element name="businessType" type="tns:BusinessType"/>
          <element minOccurs="0" name="taxId" type="string"/>
          <element minOccurs="0" name="bankName" type="string"/>
          <element minOccurs="0" name="routingNunber" type="string"/>
          <element minOccurs="0" name="accountType" type="tns:AccountType"/>
          <element minOccurs="0" name="accountNumber" type="string"/>
          <element minOccurs="0" name="holdersName" type="string"/>
          <element minOccurs="0" name="bankAddress1" type="string"/>
          <element minOccurs="0" name="bankAddress2" type="string"/>
          <element minOccurs="0" name="bankCity" type="string"/>
          <element minOccurs="0" name="bankState" type="string"/>
          <element minOccurs="0" name="bankZipcode" type="string"/>
          <element default="ACH" name="payoutMethod" type="tns:PayoutMethod"/>
          <element default="MONTHLY" name="payoutFrequency" type="tns:PayoutFrequency"/>
          <element default="15" name="payoutFrequencyValue" type="string"/>
          <element default="100" name="payoutThreshold" type="double"/>
          <element minOccurs="0" name="level" type="int"/>
          <element minOccurs="0" name="classification" type="string"/>
          <element name="isReferral" type="boolean"/>
          <element minOccurs="0" name="referralStartDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="referralEndDate" type="tns:NpnDate"/>
          <element name="commStartDate" type="tns:NpnDate"/>
          <element name="commEndDate" type="tns:NpnDate"/>
          <element name="isAdvanceComm" type="boolean"/>
          <element minOccurs="0" name="advanceCommPercentage" type="double"/>
          <element minOccurs="0" name="advanceCommStartDate" type="tns:NpnDate"/>
          <element name="enableRedirect" type="boolean"/>
          <element minOccurs="0" name="redirectToType" type="tns:CommissionDistributionOwnerType"/>
          <element minOccurs="0" name="redirectStartDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="redirectEndDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="redirectTo" type="long"/>
          <element name="comments" type="string"/>
          <element name="signatureDate" type="tns:NpnDate"/>
          <element name="status" type="tns:AffiliateStatus"/>
          <element minOccurs="0" name="checkAddress" type="tns:AddressInfo"/>
          <element minOccurs="0" name="fixed" type="tns:FixedDistTypeUnbounded"/>
          <element minOccurs="0" name="payoutRule" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element minOccurs="0" name="isGuaranteed" type="boolean"/>
          <element minOccurs="0" name="isFlexyDrafts" type="boolean"/>
        </all>
      </complexType>
      <complexType name="AffiliateAdminUpdate">
        <all>
          <element minOccurs="0" name="externalAffiliateId" type="string"/>
          <element minOccurs="0" name="parentAffiliateId" type="long"/>
          <element minOccurs="0" name="affiliateType" type="tns:SubscriberAffiliateType"/>
          <element minOccurs="0" name="name" type="string"/>
          <element minOccurs="0" name="address1" type="string"/>
          <element minOccurs="0" name="address2" type="string"/>
          <element minOccurs="0" name="city" type="string"/>
          <element minOccurs="0" name="state" type="string"/>
          <element minOccurs="0" name="zipcode" type="string"/>
          <element minOccurs="0" name="email" type="string"/>
          <element minOccurs="0" name="phone" type="string"/>
          <element minOccurs="0" name="fax" type="string"/>
          <element minOccurs="0" name="businessType" type="tns:BusinessType"/>
          <element minOccurs="0" name="taxId" type="string"/>
          <element minOccurs="0" name="routingNunber" type="string"/>
          <element minOccurs="0" name="accountType" type="tns:AccountType"/>
          <element minOccurs="0" name="accountNumber" type="string"/>
          <element minOccurs="0" name="holdersName" type="string"/>
          <element minOccurs="0" name="payoutMethod" type="tns:PayoutMethod"/>
          <element minOccurs="0" name="payoutFrequency" type="tns:PayoutFrequency"/>
          <element minOccurs="0" name="payoutFrequencyValue" type="string"/>
          <element minOccurs="0" name="payoutThreshold" type="double"/>
          <element minOccurs="0" name="level" type="int"/>
          <element minOccurs="0" name="classification" type="string"/>
          <element minOccurs="0" name="isReferral" type="boolean"/>
          <element minOccurs="0" name="referralStartDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="referralEndDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="commStartDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="commEndDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="isAdvanceComm" type="boolean"/>
          <element minOccurs="0" name="advanceCommPercentage" type="double"/>
          <element minOccurs="0" name="advanceCommStartDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="enableRedirect" type="boolean"/>
          <element minOccurs="0" name="redirectToType" type="tns:CommissionDistributionOwnerType"/>
          <element minOccurs="0" name="redirectStartDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="redirectEndDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="redirectTo" type="long"/>
          <element minOccurs="0" name="comments" type="string"/>
          <element minOccurs="0" name="signatureDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="status" type="tns:AffiliateStatus"/>
          <element minOccurs="0" name="checkAddress" type="tns:AddressInfo"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element minOccurs="0" name="isGuaranteed" type="boolean"/>
          <element minOccurs="0" name="isFlexyDrafts" type="boolean"/>
        </all>
      </complexType>
      <simpleType name="BusinessType">
        <restriction base="string">
          <enumeration value="INDIVIDUAL"/>
          <enumeration value="COMPANY"/>
        </restriction>
      </simpleType>
      <simpleType name="SubscriberAffiliateType">
        <restriction base="string">
          <enumeration value="AFF"/>
          <enumeration value="AGN"/>
          <enumeration value="SAG"/>
          <enumeration value="DLR"/>
          <enumeration value="FIM"/>
          <enumeration value="NPN"/>
          <enumeration value="BRK"/>
          <enumeration value="LOA"/>
        </restriction>
      </simpleType>
      <simpleType name="AffiliateStatus">
        <restriction base="string">
          <enumeration value="ACTIVE"/>
          <enumeration value="INACTIVE"/>
          <enumeration value="PENDING"/>
        </restriction>
      </simpleType>
      <simpleType name="CommissionDistributionOwnerType">
        <restriction base="string">
          <enumeration value="SUBSCRIBER"/>
          <enumeration value="AFFILIATE"/>
        </restriction>
      </simpleType>
      <simpleType name="PayoutMethod">
        <restriction base="string">
          <enumeration value="ACH"/>
          <enumeration value="CHECK"/>
        </restriction>
      </simpleType>
      <simpleType name="PayoutFrequency">
        <restriction base="string">
          <enumeration value="DAILY"/>
          <enumeration value="WEEKLY"/>
          <enumeration value="MONTHLY"/>
        </restriction>
      </simpleType>
      <complexType name="AffiliateConfigOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:AffiliateConfigOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="AffiliateListOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:AffiliateListOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="AffiliateConfigOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                    <enumeration value="NAME"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="AffiliateListOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                    <enumeration value="NAME"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="AffiliateUserOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:AffiliateUserOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="AffiliateUserOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="LASTNAME"/>
                    <enumeration value="FIRSTNAME"/>
                    <enumeration value="STATUS"/>
                    <enumeration value="USERNAME"/>
                    <enumeration value="CREATEDON"/>
                    <enumeration value="MODIFIEDON"/>
                    <enumeration value="ID"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="AffiliateDocumentListOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:AffiliateDocumentListOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="AffiliateDocumentListOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                    <enumeration value="NAME"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="AffiliateStatusList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="status" type="tns:AffiliateStatus"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentAffiliateListOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:EnrollmentAffiliateListOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentAffiliateListOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="FixedDistType">
        <sequence>
          <element maxOccurs="2" minOccurs="2" name="cycle">
            <complexType>
              <all>
                <element name="distType" type="tns:FixedDistBasisTypes"/>
                <element name="cycleId" type="long"/>
                <element name="value" type="double"/>
              </all>
            </complexType>
          </element>
        </sequence>
      </complexType>
      <complexType name="FixedDistTypeUnbounded">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="cycle">
            <complexType>
              <all>
                <element name="distType" nillable="true" type="tns:FixedDistBasisTypes"/>
                <element name="cycleId" nillable="true" type="long"/>
                <element name="value" nillable="true" type="double"/>
              </all>
            </complexType>
          </element>
        </sequence>
      </complexType>
      <complexType name="RuleSetInfo">
        <sequence>
          <element minOccurs="0" name="commissionSet" type="tns:CommissionSet"/>
          <element minOccurs="0" name="auditInfo" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="CommissionSets">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="commissionSet" type="tns:CommissionSet"/>
        </sequence>
      </complexType>
      <complexType name="RuleSet">
        <sequence>
          <element name="ruleSetId" type="long"/>
          <element name="externalRuleSetId" type="string"/>
          <element name="name" type="string"/>
          <element name="status" type="string"/>
          <element name="modifiedOn" type="tns:NpnDate"/>
          <element name="modifiedBy" type="string"/>
          <element name="createdOn" type="tns:NpnDate"/>
          <element name="createdBy" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentError">
        <sequence>
          <element name="enrollmentErrorId" type="long"/>
          <element name="enrollmentErrorCode" type="string"/>
          <element name="reason" type="string"/>
          <element name="status" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element minOccurs="0" name="client" type="tns:BriefClient"/>
        </sequence>
      </complexType>
      <complexType name="CommissionSet">
        <sequence>
          <element name="number" type="long"/>
          <element name="amount" type="double"/>
          <element name="basis" type="tns:BasisTypes"/>
          <element minOccurs="0" name="distributionRule" nillable="true" type="tns:DistributionRules"/>
          <element minOccurs="0" name="occuranceType" nillable="true" type="tns:OccurranceType"/>
          <element minOccurs="0" name="occuranceRange" nillable="true" type="tns:OccurranceRange"/>
        </sequence>
        <attribute name="affiliateId" type="long" use="optional"/>
        <attribute name="externalAffiliateId" use="optional"/>
        <attribute name="feeId" type="long" use="optional"/>
        <attribute name="externalFeeId" use="optional"/>
      </complexType>
      <simpleType name="BasisTypes">
        <restriction base="string">
          <enumeration value="FIXED"/>
          <enumeration value="PERCENTAGE"/>
          <enumeration value="PAYOUT_RULE"/>
        </restriction>
      </simpleType>
      <simpleType name="DistributionRules">
        <restriction base="string">
          <enumeration value="ALWAYS"/>
          <enumeration value="ONLY_WHEN_SUFFICIENT_FEE_EXIST"/>
        </restriction>
      </simpleType>
      <complexType name="OccurranceRange">
        <all>
          <element name="startValue" type="long"/>
          <element name="endValue" type="long"/>
        </all>
      </complexType>
      <simpleType name="OccurranceType">
        <restriction base="string">
          <enumeration value="ALL"/>
          <enumeration value="DISCRETE"/>
          <enumeration value="RANGE"/>
        </restriction>
      </simpleType>
      <simpleType name="FixedDistBasisTypes">
        <restriction base="string">
          <enumeration value="FIXED"/>
          <enumeration value="PERCENTAGE"/>
        </restriction>
      </simpleType>
      <simpleType name="RequiredFlag">
        <restriction base="string">
          <enumeration value="YES"/>
          <enumeration value="NO"/>
        </restriction>
      </simpleType>
      <complexType name="Error">
        <sequence>
          <element minOccurs="0" name="errorCode" nillable="true" type="string"/>
          <element minOccurs="0" name="errorDescription" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <simpleType name="Channel">
        <restriction base="string">
          <enumeration value="AUTO"/>
          <enumeration value="MORTGAGE"/>
          <enumeration value="DEBT"/>
        </restriction>
      </simpleType>
      <complexType name="EnrollmentChannelAttributeValue">
        <sequence>
          <element name="code" type="string"/>
          <element name="name" type="string"/>
          <element name="isRequired" type="boolean"/>
          <element name="numericValue" nillable="true" type="long"/>
          <element name="alphaValue" nillable="true" type="string"/>
          <element name="dateValue" nillable="true" type="tns:NpnDate"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentChannelAttributeValueOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:EnrollmentChannelAttributeValueOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentChannelAttributeValueOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="EnrollmentTicket">
        <sequence>
          <element name="enrollmentTicketId" type="long"/>
          <element name="enrollmentId" type="long"/>
          <element name="clientId" nillable="true" type="long"/>
          <element minOccurs="0" name="referenceTicketId" nillable="true" type="long"/>
          <element minOccurs="0" name="transactionId" nillable="true" type="long"/>
          <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
          <element name="ticketType" type="string"/>
          <element name="ticketStatus" type="tns:EnrollmentTicketStatus"/>
          <element name="subject" type="string"/>
          <element name="assigneeId" type="long"/>
          <element name="assigneeName" type="string"/>
          <element minOccurs="0" name="reviewDate" type="tns:NpnDate"/>
          <element name="assosiatedAmount" type="double"/>
          <element name="reason" type="string"/>
          <element name="message" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element maxOccurs="unbounded" minOccurs="0" name="enrollmentComments" type="tns:EnrollComment"/>
        </sequence>
      </complexType>
      <complexType name="EnrollmentTickets">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="enrollmentTicket" type="tns:EnrollmentTicket"/>
        </sequence>
      </complexType>
      <simpleType name="EnrollmentTicketStatus">
        <restriction base="string">
          <enumeration value="NEW"/>
          <enumeration value="IN_PROCESS"/>
          <enumeration value="RESOLVED"/>
        </restriction>
      </simpleType>
      <complexType name="AffiliateDocument">
        <all>
          <element minOccurs="0" name="documentId" type="long"/>
          <element name="note" type="string"/>
          <element name="name" type="string"/>
          <element name="contentType" type="string"/>
          <element name="base64EncodedContent" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </all>
      </complexType>
      <complexType name="AddressInfo">
        <all>
          <element minOccurs="0" name="address1" type="string"/>
          <element minOccurs="0" name="address2" type="string"/>
          <element minOccurs="0" name="city" type="string"/>
          <element minOccurs="0" name="state" type="string"/>
          <element minOccurs="0" name="zip" type="string"/>
        </all>
      </complexType>
      <complexType name="ClientContactInfo">
        <all>
          <element name="firstName" type="string"/>
          <element name="lastName" type="string"/>
          <element name="address" type="tns:AddressInfo"/>
          <element minOccurs="0" name="ssn" type="string"/>
          <element minOccurs="0" name="birthDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="phone" type="string"/>
          <element minOccurs="0" name="email" type="string"/>
        </all>
      </complexType>
      <complexType name="ClientPaymentInfo">
        <all>
          <element minOccurs="0" name="loanNumber" type="string"/>
          <element name="draftAmount" type="double"/>
          <element minOccurs="0" name="term" type="string"/>
          <element minOccurs="0" name="vin" type="string"/>
          <element minOccurs="0" name="year" type="string"/>
          <element minOccurs="0" name="make" type="string"/>
          <element minOccurs="0" name="model" type="string"/>
          <element minOccurs="0" name="brand" type="string"/>
        </all>
      </complexType>
      <complexType name="LenderInfo">
        <all>
          <element minOccurs="0" name="payeeId" type="long"/>
          <element minOccurs="0" name="addressId" type="long"/>
          <element minOccurs="0" name="name" type="string"/>
          <element minOccurs="0" name="phone" type="string"/>
          <element minOccurs="0" name="address" type="tns:AddressInfo"/>
          <element minOccurs="0" name="routingNumber" type="string"/>
        </all>
      </complexType>
      <complexType name="DebitAuthorization">
        <all>
          <element minOccurs="0" name="phone" type="string"/>
          <element minOccurs="0" name="accountName" type="string"/>
          <element minOccurs="0" name="accountType" type="tns:AccountType"/>
          <element minOccurs="0" name="accountNumber" type="string"/>
          <element minOccurs="0" name="routingNumber" type="string"/>
          <element minOccurs="0" name="firstDebitDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="firstDebitAmount" type="double"/>
          <element minOccurs="0" name="firstBiweeklyDebitDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="firstBiweeklyDebitAmount" type="double"/>
          <element minOccurs="0" name="firstLoanDueDate" type="tns:NpnDate"/>
        </all>
      </complexType>
      <complexType name="Acknowledgment">
        <all>
          <element minOccurs="0" name="signaturePresent" type="boolean"/>
          <element minOccurs="0" name="signatureDate" type="tns:NpnDate"/>
        </all>
      </complexType>
      <complexType name="PartialEnrollmentInfo">
        <sequence>
          <element minOccurs="0" name="partialEnrollmentId" type="long"/>
          <element minOccurs="0" name="affiliatesInfo" type="tns:PartialEnrollmentAffiliateInfoList"/>
          <element minOccurs="0" name="partnerId" type="long"/>
          <element minOccurs="0" name="partner" type="tns:Partner"/>
          <element minOccurs="0" name="affiliates" type="tns:PartialEnrollmentAffiliatesList"/>
          <element minOccurs="0" name="status" type="tns:PartialEnrollmentStatus"/>
          <element minOccurs="0" name="firstName" type="string"/>
          <element minOccurs="0" name="lastName" type="string"/>
          <element minOccurs="0" name="address1" type="string"/>
          <element minOccurs="0" name="address2" type="string"/>
          <element minOccurs="0" name="city" type="string"/>
          <element minOccurs="0" name="state" type="string"/>
          <element minOccurs="0" name="zipcode" type="string"/>
          <element minOccurs="0" name="emailAddress" type="string"/>
          <element minOccurs="0" name="phoneNumber1" type="string"/>
          <element minOccurs="0" name="phoneNumber2" type="string"/>
          <element minOccurs="0" name="flex_1" type="string"/>
          <element minOccurs="0" name="flex_2" type="string"/>
          <element minOccurs="0" name="flex_3" type="string"/>
          <element minOccurs="0" name="flex_4" type="string"/>
          <element minOccurs="0" name="flex_5" type="string"/>
          <element minOccurs="0" name="flex_6" type="string"/>
          <element minOccurs="0" name="flex_7" type="string"/>
          <element minOccurs="0" name="flex_8" type="string"/>
          <element minOccurs="0" name="flex_9" type="string"/>
          <element minOccurs="0" name="flex_10" type="string"/>
          <element minOccurs="0" name="flex_11" type="string"/>
          <element minOccurs="0" name="flex_12" type="string"/>
          <element minOccurs="0" name="flex_13" type="string"/>
          <element minOccurs="0" name="flex_14" type="string"/>
          <element minOccurs="0" name="flex_15" type="string"/>
          <element minOccurs="0" name="flex_16" type="string"/>
          <element minOccurs="0" name="flex_17" type="string"/>
          <element minOccurs="0" name="flex_18" type="string"/>
          <element minOccurs="0" name="flex_19" type="string"/>
          <element minOccurs="0" name="flex_20" type="string"/>
          <element minOccurs="0" name="flex_21" type="string"/>
          <element minOccurs="0" name="flex_22" type="string"/>
          <element minOccurs="0" name="flex_23" type="string"/>
          <element minOccurs="0" name="flex_24" type="string"/>
          <element minOccurs="0" name="flex_25" type="string"/>
          <element minOccurs="0" name="flex_26" type="string"/>
          <element minOccurs="0" name="flex_27" type="string"/>
          <element minOccurs="0" name="flex_28" type="string"/>
          <element minOccurs="0" name="flex_29" type="string"/>
          <element minOccurs="0" name="flex_30" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="PartialEnrollmentAffiliateInfoList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="partialEnrollmentAffiliateInfo" type="tns:PartialEnrollmentAffiliateInfo"/>
        </sequence>
      </complexType>
      <complexType name="PartialEnrollmentAffiliateInfo">
        <sequence>
          <element name="affiliateId" nillable="true" type="long"/>
          <element name="affiliateType" nillable="true" type="tns:SubscriberAffiliateType"/>
        </sequence>
      </complexType>
      <complexType name="PartialEnrollmentAffiliatesList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="partialEnrollmentAffiliates" type="tns:Affiliate"/>
        </sequence>
      </complexType>
      <complexType name="PartialEnrollmentListOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:PartialEnrollmentListOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="PartialEnrollmentListOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                    <enumeration value="FIRST_NAME"/>
                    <enumeration value="LAST_NAME"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <simpleType name="PartialEnrollmentStatus">
        <restriction base="string">
          <enumeration value="PARTIAL"/>
          <enumeration value="COMPLETED"/>
          <enumeration value="DELETED"/>
        </restriction>
      </simpleType>
      <complexType name="PaymentMonitor">
        <sequence>
          <element name="clientId" type="string"/>
          <element name="lastName" type="string"/>
          <element name="middleInitial" type="string"/>
          <element name="firstName" type="string"/>
          <element name="loanAccountNumber" type="string"/>
          <element name="dealerId" type="string"/>
          <element name="clearedFunds" type="double"/>
          <element name="pendingFunds" type="double"/>
          <element name="previousDraftDate" nillable="true" type="tns:NpnDate"/>
          <element name="previousDraftAmount" nillable="true" type="double"/>
          <element name="nextDraftDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextDraftAmount" nillable="true" type="double"/>
          <element name="paymentDate" type="tns:NpnDate"/>
          <element name="paymentAmount" type="double"/>
          <element name="payeeName" type="string"/>
        </sequence>
      </complexType>
      <complexType name="PaymentMonitorListOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:PaymentMonitorListOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="BankAccount">
        <sequence>
          <element name="accountType">
            <simpleType>
              <restriction base="string">
                <enumeration value="CLN_SVA"/>
                <enumeration value="CLIENT_DDA"/>
                <enumeration value="SUB_PHONE_STL"/>
                <enumeration value="SUB_CHK_STL"/>
                <enumeration value="SUB_WIRE_STL"/>
                <enumeration value="SUB_DRAFT_STL"/>
                <enumeration value="SUB_BP_STL"/>
                <enumeration value="SUB_FEE"/>
                <enumeration value="CFT_FEE"/>
              </restriction>
            </simpleType>
          </element>
          <element minOccurs="0" name="accountId" nillable="true" type="long"/>
        </sequence>
      </complexType>
      <complexType name="ScheduleSummary">
        <annotation>
          <documentation>Summary schedule</documentation>
        </annotation>
        <sequence>
          <element name="groupKey" type="int"/>
          <element name="noOfOccurences" type="int"/>
          <element name="remainingOccurances" type="int"/>
          <element name="completeOccurances" type="int"/>
          <element name="scheduleId" type="long"/>
          <element name="clientId" type="long"/>
          <element name="transactionClass" nillable="true" type="string"/>
          <element name="transactionMethod" nillable="true" type="string"/>
          <element name="scheduleAmount" nillable="true" type="double"/>
          <element name="externalRefenceId" nillable="true" type="string"/>
          <element name="nextOccuranceDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextTransactionFeeDate" nillable="true" type="tns:NpnDate"/>
          <element name="nextTransactionFeeAmount" nillable="true" type="double"/>
          <element name="scheduleStatus" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
        </sequence>
      </complexType>
      <complexType name="PaymentMonitorListOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                    <enumeration value="FIRST_NAME"/>
                    <enumeration value="LAST_NAME"/>
                    <enumeration value="PAYEE"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <complexType name="Address">
        <all>
          <element minOccurs="0" name="id" nillable="true" type="long"/>
          <element minOccurs="0" name="externalId" nillable="true" type="string"/>
          <element minOccurs="0" name="address1" nillable="true" type="string"/>
          <element minOccurs="0" name="address2" nillable="true" type="string"/>
          <element minOccurs="0" name="city" nillable="true" type="string"/>
          <element minOccurs="0" name="state" nillable="true" type="string"/>
          <element minOccurs="0" name="zip" nillable="true" type="string"/>
        </all>
        <attribute name="operation" type="tns:Operations" use="optional"/>
      </complexType>
      <complexType name="Contact">
        <all>
          <element minOccurs="0" name="id" nillable="true" type="long"/>
          <element minOccurs="0" name="externalId" nillable="true" type="string"/>
          <element minOccurs="0" name="department" nillable="true" type="string"/>
          <element name="name" type="string"/>
          <element minOccurs="0" name="title" nillable="true" type="string"/>
          <element minOccurs="0" name="homePhone" nillable="true">
            <complexType>
              <simpleContent>
                <extension base="string">
                  <attribute name="ext"/>
                </extension>
              </simpleContent>
            </complexType>
          </element>
          <element minOccurs="0" name="businessPhone" nillable="true">
            <complexType>
              <simpleContent>
                <extension base="string">
                  <attribute name="ext"/>
                </extension>
              </simpleContent>
            </complexType>
          </element>
          <element minOccurs="0" name="mobilePhone" nillable="true" type="string"/>
          <element minOccurs="0" name="fax" nillable="true" type="string"/>
          <element minOccurs="0" name="email" nillable="true" type="string"/>
        </all>
        <attribute name="operation" type="tns:Operations" use="optional"/>
      </complexType>
      <complexType name="Account">
        <all>
          <element minOccurs="0" name="id" nillable="true" type="long"/>
          <element minOccurs="0" name="externalId" nillable="true" type="string"/>
          <element minOccurs="0" name="bankName" nillable="true" type="string"/>
          <element name="routingNumber" type="string"/>
          <element minOccurs="0" name="accountHolderName" nillable="true" type="string"/>
          <element minOccurs="0" name="accountNumber" nillable="true" type="string"/>
          <element minOccurs="0" name="accountType" nillable="true" type="tns:AccountType"/>
          <element minOccurs="0" name="status" nillable="true" type="string"/>
        </all>
        <attribute name="operation" type="tns:Operations" use="optional"/>
      </complexType>
      <simpleType name="Operations">
        <restriction base="string">
          <enumeration value="EDIT"/>
          <enumeration value="DELETE"/>
          <enumeration value="CREATE"/>
        </restriction>
      </simpleType>
      <complexType name="FeeScheduleList">
        <sequence>
          <element maxOccurs="unbounded" name="schedule" type="tns:FeeSchedule"/>
        </sequence>
      </complexType>
      <complexType name="FeeSchedule">
        <all>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="comment" nillable="true" type="string"/>
          <element minOccurs="0" name="feeId" nillable="true" type="long"/>
          <element minOccurs="0" name="externalFeeId" nillable="true" type="string"/>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="remark" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="DraftItemScheduleList">
        <sequence>
          <element maxOccurs="unbounded" name="draftItemSchedule" type="tns:DraftItemSchedule"/>
        </sequence>
      </complexType>
      <complexType name="DraftItemSchedule">
        <all>
          <element minOccurs="0" name="scheduleId" nillable="true" type="long"/>
          <element minOccurs="0" name="clientId" nillable="true" type="long"/>
          <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long"/>
          <element name="status" type="tns:ScheduleStatus"/>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="scheduleDate" nillable="true" type="tns:NpnDate"/>
          <element default="false" minOccurs="0" name="updateRemainingSchedules" nillable="true" type="boolean"/>
          <element default="false" minOccurs="0" name="allowDuplicates" nillable="true" type="boolean"/>
          <element minOccurs="0" name="comment" nillable="true" type="string"/>
          <element minOccurs="0" name="remark" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="ScheduleList">
        <sequence>
          <element maxOccurs="unbounded" name="schedule" type="tns:Schedule"/>
        </sequence>
      </complexType>
      <complexType name="Schedule">
        <all>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="clientBankAccountId" nillable="true" type="long"/>
          <element minOccurs="0" name="comment" nillable="true" type="string"/>
          <element minOccurs="0" name="remark" nillable="true" type="string"/>
          <element default="false" minOccurs="0" name="allowDuplicates" nillable="true" type="boolean"/>
        </all>
      </complexType>
      <complexType name="DepositList">
        <sequence>
          <element maxOccurs="unbounded" name="deposit" type="tns:Deposit"/>
        </sequence>
      </complexType>
      <complexType name="Deposit">
        <all>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="amount" type="double"/>
          <element minOccurs="0" name="externalReferenceId" nillable="true" type="string"/>
          <element minOccurs="0" name="comment" nillable="true" type="string"/>
          <element minOccurs="0" name="remark" nillable="true" type="string"/>
          <element default="false" minOccurs="0" name="allowDuplicates" nillable="true" type="boolean"/>
        </all>
      </complexType>
      <complexType name="ReferralId">
        <all>
          <element name="id" type="string"/>
        </all>
        <attribute default="RULESET" name="type">
          <simpleType>
            <restriction base="string">
              <enumeration value="RULESET"/>
            </restriction>
          </simpleType>
        </attribute>
        <attribute default="YES" name="internal">
          <simpleType>
            <restriction base="string">
              <enumeration value="YES"/>
              <enumeration value="NO"/>
            </restriction>
          </simpleType>
        </attribute>
      </complexType>
      <complexType name="ClientIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="clientId" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <simpleType name="positiveNumber">
        <restriction base="int">
          <pattern value="[0-9]*"/>
        </restriction>
      </simpleType>
      <complexType name="ClientBankAccountList">
        <sequence>
          <element maxOccurs="unbounded" name="clientBankAccount" type="tns:clientBankAccount"/>
        </sequence>
      </complexType>
      <complexType name="clientBankAccount">
        <sequence>
          <element name="bankInfo" type="tns:BankInfo"/>
          <element name="clientBankAccountId" type="long"/>
          <element name="clientId" nillable="true" type="long"/>
          <element name="externalBankId" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <complexType name="PostedTransactionList">
        <sequence>
          <element maxOccurs="unbounded" name="postedTransaction" type="tns:PostedTransaction"/>
        </sequence>
      </complexType>
      <complexType name="Id">
        <all>
          <element name="internalId" type="long"/>
          <element name="externalReferenceId" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="AddressesIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="addressId" nillable="true" type="tns:Id"/>
        </sequence>
      </complexType>
      <complexType name="ContactsIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="contactId" nillable="true" type="tns:Id"/>
        </sequence>
      </complexType>
      <complexType name="BankAccountIds">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="bankAccountId" nillable="true" type="tns:Id"/>
        </sequence>
      </complexType>
      <complexType name="ScheduleReturn">
        <annotation>
          <documentation>A Return schedule</documentation>
        </annotation>
        <sequence>
          <element name="scheduleId" type="long"/>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="transactionClass" type="string"/>
          <element name="transactionMethod" type="string"/>
          <element name="sourceId" nillable="true" type="long"/>
          <element name="sourceBank" nillable="true" type="string"/>
          <element name="sourceAccount" nillable="true" type="string"/>
          <element name="status" nillable="true" type="string"/>
          <element name="parentId" nillable="true" type="long"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element name="client" type="tns:BriefClient"/>
          <element name="amount" type="double"/>
          <element name="externalReferenceId" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="long"/>
          <element name="destinationBank" nillable="true" type="string"/>
          <element name="destinationAccount" nillable="true" type="string"/>
          <element name="recoupeFeeDate" nillable="true" type="tns:NpnDate"/>
          <element name="enrollmentStatus" nillable="true" type="string"/>
        </sequence>
      </complexType>
      <simpleType name="ScheduleStatusForListing">
        <restriction base="string">
          <enumeration value="SCHEDULED"/>
          <enumeration value="SUBMITTED"/>
          <enumeration value="COMPLETED"/>
          <enumeration value="INPROCESS"/>
          <enumeration value="FAILED"/>
          <enumeration value="SUSPENDED"/>
          <enumeration value="CLEARED"/>
          <enumeration value="ZOMBIE"/>
          <enumeration value="PENDING"/>
        </restriction>
      </simpleType>
      <simpleType name="ReturnScheduleOrder">
        <restriction base="string">
          <enumeration value="scheduleDate"/>
          <enumeration value="scheduleId"/>
          <enumeration value="transactionDate"/>
          <enumeration value="transactionId"/>
          <enumeration value="status"/>
          <enumeration value="amount"/>
          <enumeration value="modifiedOn"/>
          <enumeration value="modifiedBy"/>
        </restriction>
      </simpleType>
      <simpleType name="ReturnTransactionClass">
        <restriction base="string">
          <enumeration value="R_FEE"/>
          <enumeration value="REFUND"/>
          <enumeration value="WITHDRAWAL"/>
          <enumeration value="ADVANCE"/>
        </restriction>
      </simpleType>
      <simpleType name="DepositTypes">
        <restriction base="string">
          <enumeration value="L_ACH"/>
          <enumeration value="Draft"/>
        </restriction>
      </simpleType>
      <simpleType name="ReturnTransactionMethod">
        <restriction base="string">
          <enumeration value="REFUND"/>
          <enumeration value="R-Service CFT"/>
          <enumeration value="R-Service Subscriber"/>
          <enumeration value="R-Transaction"/>
          <enumeration value="R-Recover"/>
          <enumeration value="W-ACH"/>
          <enumeration value="W-CHECK-S"/>
          <enumeration value="W-CHECK-2"/>
          <enumeration value="W-CHECK-O"/>
          <enumeration value="W-WIRE"/>
          <enumeration value="SUB_FEE-CLN_SVA"/>
          <enumeration value="L_ACH"/>
        </restriction>
      </simpleType>
      <simpleType name="CancelReasonCode">
        <restriction base="string">
          <enumeration value="RS-01"/>
          <enumeration value="RS-02"/>
          <enumeration value="RS-03"/>
          <enumeration value="RS-04"/>
          <enumeration value="RS-05"/>
          <enumeration value="RS-06"/>
          <enumeration value="RS-07"/>
          <enumeration value="RS-08"/>
          <enumeration value="RS-09"/>
          <enumeration value="RS-10"/>
          <enumeration value="RS-11"/>
          <enumeration value="RS-12"/>
          <enumeration value="RS-13"/>
          <enumeration value="RS-14"/>
          <enumeration value="RS-15"/>
          <enumeration value="RS-16"/>
          <enumeration value="RS-17"/>
        </restriction>
      </simpleType>
      <simpleType name="CancelledBy">
        <restriction base="string">
          <enumeration value="SYSTEM"/>
          <enumeration value="USER"/>
        </restriction>
      </simpleType>
      <simpleType name="AffiliateUserType">
        <restriction base="string">
          <enumeration value="AFFILIATE"/>
          <enumeration value="AGENCY"/>
          <enumeration value="DEALER"/>
          <enumeration value="FI"/>
          <enumeration value="SUB_AGENT"/>
        </restriction>
      </simpleType>
      <complexType name="PartnerListOrder">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="orderBy" type="tns:PartnerListOrderBy"/>
        </sequence>
      </complexType>
      <complexType name="PartnerListOrderBy">
        <all>
          <element name="order">
            <complexType>
              <attribute name="value">
                <simpleType>
                  <restriction base="string">
                    <enumeration value="ID"/>
                    <enumeration value="NAME"/>
                  </restriction>
                </simpleType>
              </attribute>
              <attribute default="true" name="isAscending" type="boolean"/>
            </complexType>
          </element>
        </all>
      </complexType>
      <simpleType name="AffiliateConfig">
        <restriction base="string">
          <enumeration value="PRODUCER_ID"/>
          <enumeration value="CLIENT_CODE"/>
          <enumeration value="PASSWORD"/>
          <enumeration value="USER_ID"/>
          <enumeration value="PULL_TYPE"/>
        </restriction>
      </simpleType>
      <simpleType name="PartnerConfig">
        <restriction base="string">
          <enumeration value="HOST_NAME"/>
          <enumeration value="HOST_ADDRESS"/>
          <enumeration value="PORT"/>
        </restriction>
      </simpleType>
      <simpleType name="AddressType">
        <restriction base="string">
          <enumeration value="PHYSICAL"/>
          <enumeration value="MAILING"/>
          <enumeration value="RESIDENTIAL"/>
        </restriction>
      </simpleType>
      <complexType name="KeyValue">
        <all>
          <element name="key" type="string"/>
          <element name="value" nillable="true" type="string"/>
        </all>
      </complexType>
      <complexType name="Settings">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="settingValue" nillable="true" type="tns:KeyValue"/>
        </sequence>
      </complexType>
      <complexType name="ScheduleIdList">
        <sequence>
          <element maxOccurs="unbounded" name="scheduleId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="UpdateScheduleList">
        <sequence>
          <element name="scheduleId" type="long"/>
          <element name="status" type="int">
            <annotation>
              <documentation>status 1 for success, 0 for failure</documentation>
            </annotation>
          </element>
          <element name="message" type="string">
            <annotation>
              <documentation>Descriptive message</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <simpleType name="ReturnScheduleStatusForUpdate">
        <restriction base="string">
          <enumeration value="SUSPENDED"/>
        </restriction>
      </simpleType>
      <simpleType name="SubscriberFeeStatus">
        <restriction base="string">
          <enumeration value="ACTIVE"/>
          <enumeration value="DELETED"/>
        </restriction>
      </simpleType>
      <complexType name="FeeIdList">
        <sequence>
          <element maxOccurs="unbounded" name="feeId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="FeeTypeIdList">
        <sequence>
          <element maxOccurs="unbounded" name="feeTypeId" type="long"/>
        </sequence>
      </complexType>
      <complexType name="ExternalFeeIdList">
        <sequence>
          <element maxOccurs="unbounded" name="externalFeeId" type="string"/>
        </sequence>
      </complexType>
      <complexType name="CftPayees">
        <sequence>
          <element maxOccurs="unbounded" name="payee" type="tns:CftPayee"/>
        </sequence>
      </complexType>
      <complexType name="CftPayee">
        <sequence>
          <element name="externalPayeeId" type="long"/>
          <element name="payeeName" type="string"/>
          <element minOccurs="0" name="addresses" type="tns:CftPayeeAddress"/>
        </sequence>
      </complexType>
      <complexType name="CftPayeeAddress">
        <sequence>
          <element maxOccurs="unbounded" name="addressInfo" type="tns:AddressInfo"/>
        </sequence>
      </complexType>
      <complexType name="ClientBalance">
        <sequence>
          <element name="clientId" type="long"/>
          <element minOccurs="0" name="externalClientId" nillable="true" type="string"/>
          <element name="accountNumber" type="long"/>
          <element name="currentBalance" type="double"/>
        </sequence>
      </complexType>
      <complexType name="Individual">
        <sequence>
          <element minOccurs="0" name="firstName" type="string"/>
          <element minOccurs="0" name="lastName" type="string"/>
        </sequence>
      </complexType>
      <complexType name="SdnMatch">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="sdn" type="tns:SdnName"/>
        </sequence>
      </complexType>
      <complexType name="SdnName">
        <sequence>
          <element name="entryNumber" type="long"/>
          <element minOccurs="0" name="name" type="string"/>
          <element minOccurs="0" name="addresses" type="tns:SdnAddressList"/>
          <element minOccurs="0" name="aliases" type="tns:SdnAliasList"/>
          <element minOccurs="0" name="remarks" type="string"/>
        </sequence>
      </complexType>
      <complexType name="SdnAddressList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="sdnAddress" type="tns:SdnAddress"/>
        </sequence>
      </complexType>
      <complexType name="SdnAddress">
        <sequence>
          <element name="addressId" type="long"/>
          <element minOccurs="0" name="address" type="string"/>
          <element minOccurs="0" name="cityStateZip" type="string"/>
          <element minOccurs="0" name="country" type="string"/>
          <element minOccurs="0" name="remarks" type="string"/>
        </sequence>
      </complexType>
      <complexType name="SdnAliasList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="sdnAlias" type="tns:SdnAlias"/>
        </sequence>
      </complexType>
      <complexType name="SdnAlias">
        <sequence>
          <element name="aliasId" type="long"/>
          <element minOccurs="0" name="alias" type="string"/>
          <element minOccurs="0" name="type" type="string"/>
          <element minOccurs="0" name="remarks" type="string"/>
        </sequence>
      </complexType>
      <complexType name="DebtFeeInformation">
        <sequence>
          <element name="originalDebt" type="double"/>
          <element name="dscFeeBasis" type="tns:DscFeeBasis"/>
        </sequence>
      </complexType>
      <complexType name="DscFeeBasis">
        <sequence>
          <choice>
            <element name="Percentage" type="double"/>
            <element name="Fixed" type="double"/>
          </choice>
        </sequence>
      </complexType>
      <complexType name="SingleFeeScheduleBasis">
        <annotation>
          <documentation>A fee schedule</documentation>
        </annotation>
        <sequence>
          <element name="scheduleId" type="long"/>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="status" nillable="true" type="string"/>
          <element name="transactionClass" nillable="true" type="string"/>
          <element name="transactionMethod" nillable="true" type="string"/>
          <element name="name" nillable="true" type="string"/>
          <element name="type" nillable="true" type="string"/>
          <element name="owner" nillable="true" type="string"/>
          <element name="enrollmentFeeId" nillable="true" type="long"/>
          <element name="amount" type="double"/>
          <element name="source" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element minOccurs="0" name="client" type="tns:BriefClient"/>
          <element name="recur" nillable="true" type="long"/>
          <element name="remaining" nillable="true" type="long"/>
          <element name="remark" nillable="true" type="string"/>
          <element minOccurs="0" name="comment" type="string"/>
          <element name="settlementId" nillable="true" type="long"/>
        </sequence>
      </complexType>
      <complexType name="ScheduleFeeBasis">
        <annotation>
          <documentation>A fee schedule</documentation>
        </annotation>
        <sequence>
          <element name="scheduleId" type="long"/>
          <element name="scheduleDate" type="tns:NpnDate"/>
          <element name="effectiveDate" type="tns:NpnDate"/>
          <element name="status" nillable="true" type="string"/>
          <element minOccurs="0" name="statusDate" type="tns:NpnDate"/>
          <element name="transactionClass" nillable="true" type="string"/>
          <element name="transactionMethod" nillable="true" type="string"/>
          <element name="name" nillable="true" type="string"/>
          <element name="type" nillable="true" type="string"/>
          <element name="owner" nillable="true" type="string"/>
          <element name="enrollmentFeeId" nillable="true" type="long"/>
          <element name="amount" type="double"/>
          <element name="source" nillable="true" type="string"/>
          <element name="destination" nillable="true" type="string"/>
          <element minOccurs="0" name="auditInformation" type="tns:AuditInformation"/>
          <element minOccurs="0" name="client" type="tns:BriefClient"/>
          <element name="remark" nillable="true" type="string"/>
          <element name="settlementId" nillable="true" type="long"/>
        </sequence>
      </complexType>
      <simpleType name="FeeScheduleOrder">
        <restriction base="string">
          <enumeration value="scheduleDate"/>
          <enumeration value="scheduleId"/>
          <enumeration value="status"/>
          <enumeration value="amount"/>
          <enumeration value="modifiedOn"/>
          <enumeration value="modifiedBy"/>
        </restriction>
      </simpleType>
      <simpleType name="FeeScheduleOwner">
        <restriction base="string">
          <enumeration value="CFT"/>
          <enumeration value="SUB"/>
        </restriction>
      </simpleType>
      <complexType name="SettlementFeeBasis">
        <sequence>
          <element name="transactionId" type="long"/>
          <element name="feeType" nillable="true" type="string"/>
          <element name="amount" type="double"/>
        </sequence>
      </complexType>
      <complexType name="ClientDocument">
        <all>
          <element name="note" nillable="true" type="string"/>
          <element name="documentType">
            <simpleType>
              <restriction base="string">
                <enumeration value="SETTLEMENT"/>
                <enumeration value="DRAFT"/>
                <enumeration value="ENROLLMENT"/>
                <enumeration value="SUBSCRIBER_DOC"/>
                <enumeration value="AFFILIATE_DOC"/>
                <enumeration value="CONFIRMATION_LETTER"/>
                <enumeration value="STATE_LICENSE"/>
              </restriction>
            </simpleType>
          </element>
          <element name="base64EncodedContent" type="string"/>
          <element name="contentType" type="string"/>
          <element name="documentName" type="string"/>
        </all>
      </complexType>
      <complexType name="tradeLines">
        <sequence>
          <element maxOccurs="unbounded" name="tradeLine" nillable="true" type="tns:FeeTradeLine"/>
        </sequence>
      </complexType>
      <complexType name="FeeTradeLine">
        <sequence>
          <element name="tradeLineName" nillable="true" type="string"/>
          <element name="currentBalance" nillable="true" type="double"/>
        </sequence>
      </complexType>
      <complexType name="StateFeeCapList">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="stateFeeCap" type="tns:StateFeeCapInfo"/>
        </sequence>
      </complexType>
      <complexType name="StateFeeCapInfo">
        <sequence>
          <element name="stateCode" type="string"/>
          <element name="stateName" type="string"/>
          <element name="isRestricted" type="string"/>
          <element name="licenseRequired" type="string"/>
          <element name="isDocumentUploaded" type="boolean"/>
          <element name="licenseExpiry" nillable="true" type="tns:NpnDate"/>
          <element name="stateFeeType" type="string"/>
          <element name="stateFeeValue" nillable="true" type="double"/>
        </sequence>
      </complexType>
      <complexType name="captureSpaDrafts">
        <sequence>
          <element maxOccurs="unbounded" name="captureSpaDraft" nillable="true" type="tns:spaDraft"/>
        </sequence>
      </complexType>
      <complexType name="spaDraft">
        <sequence>
          <element minOccurs="0" name="captureDraftId" nillable="true" type="string"/>
          <element minOccurs="0" name="recurringType" nillable="true" type="tns:RecurringTypes"/>
          <element minOccurs="0" name="recurringStartDate" nillable="true" type="tns:NpnDate"/>
          <element minOccurs="0" name="recurringAmount1" nillable="true" type="double"/>
          <element minOccurs="0" name="recurringDay1" nillable="true" type="long"/>
          <element minOccurs="0" name="recurringAmount2" nillable="true" type="double"/>
          <element minOccurs="0" name="recurringDay2" nillable="true" type="long"/>
          <element minOccurs="0" name="lumpSumDate" nillable="true" type="tns:NpnDate"/>
          <element minOccurs="0" name="lumpSumAmount" nillable="true" type="double"/>
          <element default="false" name="lumpSumOnly" type="boolean"/>
        </sequence>
      </complexType>
    </schema>
  </wsdl:types>
  <wsdl:message name="RejectPaymentResponse">
    <wsdl:part element="sch0:RejectPaymentResponse" name="RejectPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPartialEnrollmentRequest">
    <wsdl:part element="sch0:GetPartialEnrollmentRequest" name="GetPartialEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftErrorListRequest">
    <wsdl:part element="sch0:GetDraftErrorListRequest" name="GetDraftErrorListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ResetPasswordRequest">
    <wsdl:part element="sch0:ResetPasswordRequest" name="ResetPasswordRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberRequest">
    <wsdl:part element="sch0:AdminCreateSubscriberRequest" name="AdminCreateSubscriberRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentTicketResponse">
    <wsdl:part element="sch0:GetEnrollmentTicketResponse" name="GetEnrollmentTicketResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetApprovalsByIdResponse">
    <wsdl:part element="sch0:GetApprovalsByIdResponse" name="GetApprovalsByIdResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddReferralAffiliateResponse">
    <wsdl:part element="sch0:AddReferralAffiliateResponse" name="AddReferralAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetAffiliateListRequest">
    <wsdl:part element="sch0:AdminGetAffiliateListRequest" name="AdminGetAffiliateListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminActivateEnrollmentResponse">
    <wsdl:part element="sch0:AdminActivateEnrollmentResponse" name="AdminActivateEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="OverrideSubscriberFeeResponse">
    <wsdl:part element="sch0:OverrideSubscriberFeeResponse" name="OverrideSubscriberFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateReturnScheduleRequest">
    <wsdl:part element="sch0:UpdateReturnScheduleRequest" name="UpdateReturnScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSettlementFeesResponse">
    <wsdl:part element="sch0:AdminGetSettlementFeesResponse" name="AdminGetSettlementFeesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAutoPayeeInfoResponse">
    <wsdl:part element="sch0:UpdateAutoPayeeInfoResponse" name="UpdateAutoPayeeInfoResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePartialEnrollmentResponse">
    <wsdl:part element="sch0:CreatePartialEnrollmentResponse" name="CreatePartialEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleRequest">
    <wsdl:part element="sch0:GetFeeScheduleRequest" name="GetFeeScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateRuleSetResponse">
    <wsdl:part element="sch0:UpdateRuleSetResponse" name="UpdateRuleSetResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizePaymentResponse">
    <wsdl:part element="sch0:AuthorizePaymentResponse" name="AuthorizePaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="OverrideSubscriberFeeRequest">
    <wsdl:part element="sch0:OverrideSubscriberFeeRequest" name="OverrideSubscriberFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAutoEnrollmentDetailFromStoneEagleResponse">
    <wsdl:part element="sch0:GetAutoEnrollmentDetailFromStoneEagleResponse" name="GetAutoEnrollmentDetailFromStoneEagleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberAffiliateConfigsResponse">
    <wsdl:part element="sch0:CreateSubscriberAffiliateConfigsResponse" name="CreateSubscriberAffiliateConfigsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberDetailRequest">
    <wsdl:part element="sch0:AdminGetSubscriberDetailRequest" name="AdminGetSubscriberDetailRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSignatureDateRequest">
    <wsdl:part element="sch0:UpdateSignatureDateRequest" name="UpdateSignatureDateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberProcessorSetupRequest">
    <wsdl:part element="sch0:AdminCreateSubscriberProcessorSetupRequest" name="AdminCreateSubscriberProcessorSetupRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberBankAccountResponse">
    <wsdl:part element="sch0:AdminCreateSubscriberBankAccountResponse" name="AdminCreateSubscriberBankAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetOverriddenSubscriberFeeRequest">
    <wsdl:part element="sch0:GetOverriddenSubscriberFeeRequest" name="GetOverriddenSubscriberFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateInterClientTransferRequest">
    <wsdl:part element="sch0:CreateInterClientTransferRequest" name="CreateInterClientTransferRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberPayeeResponse">
    <wsdl:part element="sch0:CreateSubscriberPayeeResponse" name="CreateSubscriberPayeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetTransactionListRequest">
    <wsdl:part element="sch0:AdminGetTransactionListRequest" name="AdminGetTransactionListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSPAMonthlyBalanceListResponse">
    <wsdl:part element="sch0:GetSPAMonthlyBalanceListResponse" name="GetSPAMonthlyBalanceListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetNewPositivePayListResponse">
    <wsdl:part element="sch0:GetNewPositivePayListResponse" name="GetNewPositivePayListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SaveStatewiseFeeCapRequest">
    <wsdl:part element="sch0:SaveStatewiseFeeCapRequest" name="SaveStatewiseFeeCapRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPositivePayInquiriesResponse">
    <wsdl:part element="sch0:GetPositivePayInquiriesResponse" name="GetPositivePayInquiriesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateAffiliateRequest">
    <wsdl:part element="sch0:AdminCreateAffiliateRequest" name="AdminCreateAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePerformanceSettlementResponse">
    <wsdl:part element="sch0:CreatePerformanceSettlementResponse" name="CreatePerformanceSettlementResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberFeeRequest">
    <wsdl:part element="sch0:CreateSubscriberFeeRequest" name="CreateSubscriberFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionMethodsResponse">
    <wsdl:part element="sch0:GetTransactionMethodsResponse" name="GetTransactionMethodsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAutoNPNFeeRequest">
    <wsdl:part element="sch0:CreateAutoNPNFeeRequest" name="CreateAutoNPNFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePerformanceSettlementBasisRequest">
    <wsdl:part element="sch0:CreatePerformanceSettlementBasisRequest" name="CreatePerformanceSettlementBasisRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentChannelAttributeValuesListRequest">
    <wsdl:part element="sch0:GetEnrollmentChannelAttributeValuesListRequest" name="GetEnrollmentChannelAttributeValuesListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleBasisResponse">
    <wsdl:part element="sch0:GetFeeScheduleBasisResponse" name="GetFeeScheduleBasisResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCaptureDraftResponse">
    <wsdl:part element="sch0:GetCaptureDraftResponse" name="GetCaptureDraftResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentListOnPositivePayResponse">
    <wsdl:part element="sch0:GetPaymentListOnPositivePayResponse" name="GetPaymentListOnPositivePayResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateEnrollmentResponse">
    <wsdl:part element="sch0:AdminUpdateEnrollmentResponse" name="AdminUpdateEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPartialEnrollmentListResponse">
    <wsdl:part element="sch0:GetPartialEnrollmentListResponse" name="GetPartialEnrollmentListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateFeeItemsResponse">
    <wsdl:part element="sch0:CreateFeeItemsResponse" name="CreateFeeItemsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetScheduleListRequest">
    <wsdl:part element="sch0:GetScheduleListRequest" name="GetScheduleListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateDraftItemsRequest">
    <wsdl:part element="sch0:CreateDraftItemsRequest" name="CreateDraftItemsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndAdvancePaymentRequest">
    <wsdl:part element="sch0:AuthorizeAndAdvancePaymentRequest" name="AuthorizeAndAdvancePaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSettlementListResponse">
    <wsdl:part element="sch0:AdminGetSettlementListResponse" name="AdminGetSettlementListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SkipPaymentResponse">
    <wsdl:part element="sch0:SkipPaymentResponse" name="SkipPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="RemoveAffiliateDocumentResponse">
    <wsdl:part element="sch0:RemoveAffiliateDocumentResponse" name="RemoveAffiliateDocumentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentPayeeResponse">
    <wsdl:part element="sch0:GetEnrollmentPayeeResponse" name="GetEnrollmentPayeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentErrorRequest">
    <wsdl:part element="sch0:CreateEnrollmentErrorRequest" name="CreateEnrollmentErrorRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSettlementScheduleRequest">
    <wsdl:part element="sch0:UpdateSettlementScheduleRequest" name="UpdateSettlementScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetCFTBankAccountListRequest">
    <wsdl:part element="sch0:AdminGetCFTBankAccountListRequest" name="AdminGetCFTBankAccountListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateDraftScheduleResponse">
    <wsdl:part element="sch0:UpdateDraftScheduleResponse" name="UpdateDraftScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateUserListRequest">
    <wsdl:part element="sch0:GetAffiliateUserListRequest" name="GetAffiliateUserListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SuspendSettlementResponse">
    <wsdl:part element="sch0:SuspendSettlementResponse" name="SuspendSettlementResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCancelReasonCodesRequest">
    <wsdl:part element="sch0:GetCancelReasonCodesRequest" name="GetCancelReasonCodesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberBankAccountRequest">
    <wsdl:part element="sch0:AdminCreateSubscriberBankAccountRequest" name="AdminCreateSubscriberBankAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateInternalUserResponse">
    <wsdl:part element="sch0:AdminUpdateInternalUserResponse" name="AdminUpdateInternalUserResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetClientsRequest">
    <wsdl:part element="sch0:AdminGetClientsRequest" name="AdminGetClientsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberListResponse">
    <wsdl:part element="sch0:AdminGetSubscriberListResponse" name="AdminGetSubscriberListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPartialEnrollmentListRequest">
    <wsdl:part element="sch0:GetPartialEnrollmentListRequest" name="GetPartialEnrollmentListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePartialEnrollmentStatusResponse">
    <wsdl:part element="sch0:UpdatePartialEnrollmentStatusResponse" name="UpdatePartialEnrollmentStatusResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPostedTransactionRequest">
    <wsdl:part element="sch0:GetPostedTransactionRequest" name="GetPostedTransactionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SaveStatewiseFeeCapResponse">
    <wsdl:part element="sch0:SaveStatewiseFeeCapResponse" name="SaveStatewiseFeeCapResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ResetPasswordResponse">
    <wsdl:part element="sch0:ResetPasswordResponse" name="ResetPasswordResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentDocumentListRequest">
    <wsdl:part element="sch0:GetEnrollmentDocumentListRequest" name="GetEnrollmentDocumentListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeBasisResponse">
    <wsdl:part element="sch0:GetFeeBasisResponse" name="GetFeeBasisResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberFeeResponse">
    <wsdl:part element="sch0:CreateSubscriberFeeResponse" name="CreateSubscriberFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentDetailsResponse">
    <wsdl:part element="sch0:GetPaymentDetailsResponse" name="GetPaymentDetailsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CheckSdnMatchRequest">
    <wsdl:part element="sch0:CheckSdnMatchRequest" name="CheckSdnMatchRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateFeeBasisResponse">
    <wsdl:part element="sch0:UpdateFeeBasisResponse" name="UpdateFeeBasisResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateApprovalAttemptResponse">
    <wsdl:part element="sch0:CreateApprovalAttemptResponse" name="CreateApprovalAttemptResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ReactivateFeeScheduleResponse">
    <wsdl:part element="sch0:ReactivateFeeScheduleResponse" name="ReactivateFeeScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateDocumentListRequest">
    <wsdl:part element="sch0:GetAffiliateDocumentListRequest" name="GetAffiliateDocumentListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPartialEnrollmentResponse">
    <wsdl:part element="sch0:GetPartialEnrollmentResponse" name="GetPartialEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleBasisRequest">
    <wsdl:part element="sch0:GetFeeScheduleBasisRequest" name="GetFeeScheduleBasisRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetHierarchyAffiliateCommissionDistResponse">
    <wsdl:part element="sch0:GetHierarchyAffiliateCommissionDistResponse" name="GetHierarchyAffiliateCommissionDistResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateTransactionListResponse">
    <wsdl:part element="sch0:GetAffiliateTransactionListResponse" name="GetAffiliateTransactionListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberAffiliateConfigsRequest">
    <wsdl:part element="sch0:CreateSubscriberAffiliateConfigsRequest" name="CreateSubscriberAffiliateConfigsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSuscriberTemplateAssetRequest">
    <wsdl:part element="sch0:CreateSuscriberTemplateAssetRequest" name="CreateSuscriberTemplateAssetRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="RevalidateAutoEnrollmentResponse">
    <wsdl:part element="sch0:RevalidateAutoEnrollmentResponse" name="RevalidateAutoEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberPayeeResponse">
    <wsdl:part element="sch0:GetSubscriberPayeeResponse" name="GetSubscriberPayeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSummaryScheduleListRequest">
    <wsdl:part element="sch0:GetSummaryScheduleListRequest" name="GetSummaryScheduleListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateFeeScheduleResponse">
    <wsdl:part element="sch0:UpdateFeeScheduleResponse" name="UpdateFeeScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateRuleSetDefinitionResponse">
    <wsdl:part element="sch0:UpdateRuleSetDefinitionResponse" name="UpdateRuleSetDefinitionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateClientBankAccountResponse">
    <wsdl:part element="sch0:UpdateClientBankAccountResponse" name="UpdateClientBankAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateSubscriberFeeRequest">
    <wsdl:part element="sch0:AdminUpdateSubscriberFeeRequest" name="AdminUpdateSubscriberFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientStatusRequest">
    <wsdl:part element="sch0:GetClientStatusRequest" name="GetClientStatusRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateEnrollmentErrorResponse">
    <wsdl:part element="sch0:UpdateEnrollmentErrorResponse" name="UpdateEnrollmentErrorResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetPostedTransactionListResponse">
    <wsdl:part element="sch0:AdminGetPostedTransactionListResponse" name="AdminGetPostedTransactionListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPartnerListResponse">
    <wsdl:part element="sch0:GetPartnerListResponse" name="GetPartnerListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetStatusEnumListResponse">
    <wsdl:part element="sch0:GetStatusEnumListResponse" name="GetStatusEnumListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberAffiliateConfigsRequest">
    <wsdl:part element="sch0:GetSubscriberAffiliateConfigsRequest" name="GetSubscriberAffiliateConfigsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateApprovalResponse">
    <wsdl:part element="sch0:UpdateApprovalResponse" name="UpdateApprovalResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminViewEnrollmentRequest">
    <wsdl:part element="sch0:AdminViewEnrollmentRequest" name="AdminViewEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetUserRolesListRequest">
    <wsdl:part element="sch0:GetUserRolesListRequest" name="GetUserRolesListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPositivePayDetailsResponse">
    <wsdl:part element="sch0:GetPositivePayDetailsResponse" name="GetPositivePayDetailsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetUserRolesListResponse">
    <wsdl:part element="sch0:GetUserRolesListResponse" name="GetUserRolesListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentAffiliateListRequest">
    <wsdl:part element="sch0:GetEnrollmentAffiliateListRequest" name="GetEnrollmentAffiliateListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSubscriberPartnerResponse">
    <wsdl:part element="sch0:UpdateSubscriberPartnerResponse" name="UpdateSubscriberPartnerResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSubscriberUserRequest">
    <wsdl:part element="sch0:UpdateSubscriberUserRequest" name="UpdateSubscriberUserRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateChannelAttributeValueResponse">
    <wsdl:part element="sch0:UpdateChannelAttributeValueResponse" name="UpdateChannelAttributeValueResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SearchCFTPayeesRequest">
    <wsdl:part element="sch0:SearchCFTPayeesRequest" name="SearchCFTPayeesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberBankAccountResponse">
    <wsdl:part element="sch0:AdminGetSubscriberBankAccountResponse" name="AdminGetSubscriberBankAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ActivateSettlementRequest">
    <wsdl:part element="sch0:ActivateSettlementRequest" name="ActivateSettlementRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SkipDraftRequest">
    <wsdl:part element="sch0:SkipDraftRequest" name="SkipDraftRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionProcessorsRequest">
    <wsdl:part element="sch0:GetTransactionProcessorsRequest" name="GetTransactionProcessorsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientBankAccountRequest">
    <wsdl:part element="sch0:GetClientBankAccountRequest" name="GetClientBankAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientRequest">
    <wsdl:part element="sch0:GetClientRequest" name="GetClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SendEmailRequest">
    <wsdl:part element="sch0:SendEmailRequest" name="SendEmailRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetScheduleListResponse">
    <wsdl:part element="sch0:AdminGetScheduleListResponse" name="AdminGetScheduleListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyLoanAmountResponse">
    <wsdl:part element="sch0:ModifyLoanAmountResponse" name="ModifyLoanAmountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="RejectPaymentRequest">
    <wsdl:part element="sch0:RejectPaymentRequest" name="RejectPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateFeeItemsRequest">
    <wsdl:part element="sch0:CreateFeeItemsRequest" name="CreateFeeItemsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetRuleSetResponse">
    <wsdl:part element="sch0:GetRuleSetResponse" name="GetRuleSetResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyLoanDueDateResponse">
    <wsdl:part element="sch0:ModifyLoanDueDateResponse" name="ModifyLoanDueDateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCheckImageRequest">
    <wsdl:part element="sch0:GetCheckImageRequest" name="GetCheckImageRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetTransferBankAccountListResponse">
    <wsdl:part element="sch0:AdminGetTransferBankAccountListResponse" name="AdminGetTransferBankAccountListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDelayDraftChangedDatesRequest">
    <wsdl:part element="sch0:GetDelayDraftChangedDatesRequest" name="GetDelayDraftChangedDatesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndLoadPaymentRequest">
    <wsdl:part element="sch0:AuthorizeAndLoadPaymentRequest" name="AuthorizeAndLoadPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetHierarchyAffiliateCommissionDistRequest">
    <wsdl:part element="sch0:GetHierarchyAffiliateCommissionDistRequest" name="GetHierarchyAffiliateCommissionDistRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetRuleSetDefinitionResponse">
    <wsdl:part element="sch0:GetRuleSetDefinitionResponse" name="GetRuleSetDefinitionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetAffiliateResponse">
    <wsdl:part element="sch0:AdminGetAffiliateResponse" name="AdminGetAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ClientVerificationResponse">
    <wsdl:part element="sch0:ClientVerificationResponse" name="ClientVerificationResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateDraftScheduleResponse">
    <wsdl:part element="sch0:CreateDraftScheduleResponse" name="CreateDraftScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyHierarchyAffiliateCommissionDistResponse">
    <wsdl:part element="sch0:ModifyHierarchyAffiliateCommissionDistResponse" name="ModifyHierarchyAffiliateCommissionDistResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateFeeScheduleRequest">
    <wsdl:part element="sch0:CreateFeeScheduleRequest" name="CreateFeeScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetUserByIdResponse">
    <wsdl:part element="sch0:GetUserByIdResponse" name="GetUserByIdResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetChildAffiliateListResponse">
    <wsdl:part element="sch0:GetChildAffiliateListResponse" name="GetChildAffiliateListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAffiliateResponse">
    <wsdl:part element="sch0:UpdateAffiliateResponse" name="UpdateAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateSubscriberRequest">
    <wsdl:part element="sch0:AdminUpdateSubscriberRequest" name="AdminUpdateSubscriberRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MakePhonePaymentRequest">
    <wsdl:part element="sch0:MakePhonePaymentRequest" name="MakePhonePaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateListRequest">
    <wsdl:part element="sch0:GetAffiliateListRequest" name="GetAffiliateListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="RevalidateAutoEnrollmentRequest">
    <wsdl:part element="sch0:RevalidateAutoEnrollmentRequest" name="RevalidateAutoEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetNewPositivePayListRequest">
    <wsdl:part element="sch0:GetNewPositivePayListRequest" name="GetNewPositivePayListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentMonitorListResponse">
    <wsdl:part element="sch0:GetPaymentMonitorListResponse" name="GetPaymentMonitorListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionProcessorsResponse">
    <wsdl:part element="sch0:GetTransactionProcessorsResponse" name="GetTransactionProcessorsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetApprovalsByIdRequest">
    <wsdl:part element="sch0:GetApprovalsByIdRequest" name="GetApprovalsByIdRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientRTPSettlementResponse">
    <wsdl:part element="sch0:GetClientRTPSettlementResponse" name="GetClientRTPSettlementResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateReturnScheduleRequest">
    <wsdl:part element="sch0:CreateReturnScheduleRequest" name="CreateReturnScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetOverriddenSubscriberFeeResponse">
    <wsdl:part element="sch0:GetOverriddenSubscriberFeeResponse" name="GetOverriddenSubscriberFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetEnrollmentsResponse">
    <wsdl:part element="sch0:AdminGetEnrollmentsResponse" name="AdminGetEnrollmentsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminRejectPostedTransactionRequest">
    <wsdl:part element="sch0:AdminRejectPostedTransactionRequest" name="AdminRejectPostedTransactionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPositivePayListRequest">
    <wsdl:part element="sch0:GetPositivePayListRequest" name="GetPositivePayListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateDraftScheduleRequest">
    <wsdl:part element="sch0:UpdateDraftScheduleRequest" name="UpdateDraftScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientBankAccountListResponse">
    <wsdl:part element="sch0:GetClientBankAccountListResponse" name="GetClientBankAccountListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberPayeeListResponse">
    <wsdl:part element="sch0:GetSubscriberPayeeListResponse" name="GetSubscriberPayeeListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminActivateEnrollmentRequest">
    <wsdl:part element="sch0:AdminActivateEnrollmentRequest" name="AdminActivateEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberProcessorSetupResponse">
    <wsdl:part element="sch0:AdminCreateSubscriberProcessorSetupResponse" name="AdminCreateSubscriberProcessorSetupResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberProcessorSetupResponse">
    <wsdl:part element="sch0:AdminGetSubscriberProcessorSetupResponse" name="AdminGetSubscriberProcessorSetupResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSPAMonthlyBalanceListRequest">
    <wsdl:part element="sch0:GetSPAMonthlyBalanceListRequest" name="GetSPAMonthlyBalanceListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminListSubscriberFeeRequest">
    <wsdl:part element="sch0:AdminListSubscriberFeeRequest" name="AdminListSubscriberFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentExceptionsListRequest">
    <wsdl:part element="sch0:GetEnrollmentExceptionsListRequest" name="GetEnrollmentExceptionsListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSignatureDateResponse">
    <wsdl:part element="sch0:UpdateSignatureDateResponse" name="UpdateSignatureDateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateClientsResponse">
    <wsdl:part element="sch0:GetAffiliateClientsResponse" name="GetAffiliateClientsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSettlementApprovalListResponse">
    <wsdl:part element="sch0:GetSettlementApprovalListResponse" name="GetSettlementApprovalListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAffiliateResponse">
    <wsdl:part element="sch0:CreateAffiliateResponse" name="CreateAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePaymentRequest">
    <wsdl:part element="sch0:UpdatePaymentRequest" name="UpdatePaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ReactivateDraftScheduleRequest">
    <wsdl:part element="sch0:ReactivateDraftScheduleRequest" name="ReactivateDraftScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetResetPasswordTokenRequest">
    <wsdl:part element="sch0:GetResetPasswordTokenRequest" name="GetResetPasswordTokenRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateReturnScheduleResponse">
    <wsdl:part element="sch0:UpdateReturnScheduleResponse" name="UpdateReturnScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateHierarchyEnrollmentAffiliateResponse">
    <wsdl:part element="sch0:CreateHierarchyEnrollmentAffiliateResponse" name="CreateHierarchyEnrollmentAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnlockAccountResponse">
    <wsdl:part element="sch0:UnlockAccountResponse" name="UnlockAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateEnrollmentErrorRequest">
    <wsdl:part element="sch0:UpdateEnrollmentErrorRequest" name="UpdateEnrollmentErrorRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSubscriberPayeeResponse">
    <wsdl:part element="sch0:UpdateSubscriberPayeeResponse" name="UpdateSubscriberPayeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ClientVerificationRequest">
    <wsdl:part element="sch0:ClientVerificationRequest" name="ClientVerificationRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SuspendSettlementRequest">
    <wsdl:part element="sch0:SuspendSettlementRequest" name="SuspendSettlementRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSummaryScheduleListResponse">
    <wsdl:part element="sch0:GetSummaryScheduleListResponse" name="GetSummaryScheduleListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="DelayDraftRequest">
    <wsdl:part element="sch0:DelayDraftRequest" name="DelayDraftRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetResetPasswordTokenResponse">
    <wsdl:part element="sch0:GetResetPasswordTokenResponse" name="GetResetPasswordTokenResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="PopulateBiweeklyEnrollmentScheduleResponse">
    <wsdl:part element="sch0:PopulateBiweeklyEnrollmentScheduleResponse" name="PopulateBiweeklyEnrollmentScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSubscriberPayeeRequest">
    <wsdl:part element="sch0:UpdateSubscriberPayeeRequest" name="UpdateSubscriberPayeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyHierarchyAffiliateCommissionDistRequest">
    <wsdl:part element="sch0:ModifyHierarchyAffiliateCommissionDistRequest" name="ModifyHierarchyAffiliateCommissionDistRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateClientBankAccountRequest">
    <wsdl:part element="sch0:UpdateClientBankAccountRequest" name="UpdateClientBankAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateHierarchyResponse">
    <wsdl:part element="sch0:GetAffiliateHierarchyResponse" name="GetAffiliateHierarchyResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="PopulateBiweeklyEnrollmentScheduleRequest">
    <wsdl:part element="sch0:PopulateBiweeklyEnrollmentScheduleRequest" name="PopulateBiweeklyEnrollmentScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentListRequest">
    <wsdl:part element="sch0:GetPaymentListRequest" name="GetPaymentListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentCountResponse">
    <wsdl:part element="sch0:GetEnrollmentCountResponse" name="GetEnrollmentCountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UploadDocumentResponse">
    <wsdl:part element="sch0:UploadDocumentResponse" name="UploadDocumentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateGroupEnrollmentAffiliateResponse">
    <wsdl:part element="sch0:CreateGroupEnrollmentAffiliateResponse" name="CreateGroupEnrollmentAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetRuleSetDefinitionRequest">
    <wsdl:part element="sch0:GetRuleSetDefinitionRequest" name="GetRuleSetDefinitionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetBankListResponse">
    <wsdl:part element="sch0:GetBankListResponse" name="GetBankListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberResponse">
    <wsdl:part element="sch0:AdminCreateSubscriberResponse" name="AdminCreateSubscriberResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientsRequest">
    <wsdl:part element="sch0:GetClientsRequest" name="GetClientsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberBankAccountListRequest">
    <wsdl:part element="sch0:AdminGetSubscriberBankAccountListRequest" name="AdminGetSubscriberBankAccountListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAdhocTransferRequest">
    <wsdl:part element="sch0:UpdateAdhocTransferRequest" name="UpdateAdhocTransferRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetReturnScheduleResponse">
    <wsdl:part element="sch0:GetReturnScheduleResponse" name="GetReturnScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SaveAutoEnrollmentAffiliatesResponse">
    <wsdl:part element="sch0:SaveAutoEnrollmentAffiliatesResponse" name="SaveAutoEnrollmentAffiliatesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCheckImageResponse">
    <wsdl:part element="sch0:GetCheckImageResponse" name="GetCheckImageResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SuspendDraftScheduleResponse">
    <wsdl:part element="sch0:SuspendDraftScheduleResponse" name="SuspendDraftScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetNextScheduleResponse">
    <wsdl:part element="sch0:GetNextScheduleResponse" name="GetNextScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDelayDraftChangedDatesResponse">
    <wsdl:part element="sch0:GetDelayDraftChangedDatesResponse" name="GetDelayDraftChangedDatesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SendEmailResponse">
    <wsdl:part element="sch0:SendEmailResponse" name="SendEmailResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ChangePasswordForTokenRequest">
    <wsdl:part element="sch0:ChangePasswordForTokenRequest" name="ChangePasswordForTokenRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateCaptureDraftResponse">
    <wsdl:part element="sch0:UpdateCaptureDraftResponse" name="UpdateCaptureDraftResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentDocumentResponse">
    <wsdl:part element="sch0:GetEnrollmentDocumentResponse" name="GetEnrollmentDocumentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPositivePayInquiriesRequest">
    <wsdl:part element="sch0:GetPositivePayInquiriesRequest" name="GetPositivePayInquiriesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateGroupEnrollmentAffiliateRequest">
    <wsdl:part element="sch0:CreateGroupEnrollmentAffiliateRequest" name="CreateGroupEnrollmentAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberFeesResponse">
    <wsdl:part element="sch0:AdminCreateSubscriberFeesResponse" name="AdminCreateSubscriberFeesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateEnrollmentRequest">
    <wsdl:part element="sch0:AdminUpdateEnrollmentRequest" name="AdminUpdateEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SuspendFeeScheduleResponse">
    <wsdl:part element="sch0:SuspendFeeScheduleResponse" name="SuspendFeeScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAdhocTransferResponse">
    <wsdl:part element="sch0:CreateAdhocTransferResponse" name="CreateAdhocTransferResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetScheduleListRequest">
    <wsdl:part element="sch0:AdminGetScheduleListRequest" name="AdminGetScheduleListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateCoClientResponse">
    <wsdl:part element="sch0:CreateCoClientResponse" name="CreateCoClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminListSubscriberFeeResponse">
    <wsdl:part element="sch0:AdminListSubscriberFeeResponse" name="AdminListSubscriberFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateApprovalRequest">
    <wsdl:part element="sch0:UpdateApprovalRequest" name="UpdateApprovalRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentDocumentListResponse">
    <wsdl:part element="sch0:GetEnrollmentDocumentListResponse" name="GetEnrollmentDocumentListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetEnrollmentsRequest">
    <wsdl:part element="sch0:AdminGetEnrollmentsRequest" name="AdminGetEnrollmentsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePaymentResponse">
    <wsdl:part element="sch0:UpdatePaymentResponse" name="UpdatePaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ListEnrollmentFeeResponse">
    <wsdl:part element="sch0:ListEnrollmentFeeResponse" name="ListEnrollmentFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAllOverriddenSubscriberFeeRequest">
    <wsdl:part element="sch0:GetAllOverriddenSubscriberFeeRequest" name="GetAllOverriddenSubscriberFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberFeesRequest">
    <wsdl:part element="sch0:AdminCreateSubscriberFeesRequest" name="AdminCreateSubscriberFeesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberDocumentResponse">
    <wsdl:part element="sch0:AdminCreateSubscriberDocumentResponse" name="AdminCreateSubscriberDocumentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateClientResponse">
    <wsdl:part element="sch0:UpdateClientResponse" name="UpdateClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAffiliateUserResponse">
    <wsdl:part element="sch0:CreateAffiliateUserResponse" name="CreateAffiliateUserResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentErrorListRequest">
    <wsdl:part element="sch0:GetEnrollmentErrorListRequest" name="GetEnrollmentErrorListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentListOnPositivePayRequest">
    <wsdl:part element="sch0:GetPaymentListOnPositivePayRequest" name="GetPaymentListOnPositivePayRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCaptureDraftRequest">
    <wsdl:part element="sch0:GetCaptureDraftRequest" name="GetCaptureDraftRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateFeeScheduleRequest">
    <wsdl:part element="sch0:UpdateFeeScheduleRequest" name="UpdateFeeScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberProcessorSetupRequest">
    <wsdl:part element="sch0:AdminGetSubscriberProcessorSetupRequest" name="AdminGetSubscriberProcessorSetupRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SendReactivationCodeRequest">
    <wsdl:part element="sch0:SendReactivationCodeRequest" name="SendReactivationCodeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateHierarchyAffiliateCommissionDistRequest">
    <wsdl:part element="sch0:CreateHierarchyAffiliateCommissionDistRequest" name="CreateHierarchyAffiliateCommissionDistRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateRTPSettlementScheduleRequest">
    <wsdl:part element="sch0:CreateRTPSettlementScheduleRequest" name="CreateRTPSettlementScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePositivePayListRequest">
    <wsdl:part element="sch0:CreatePositivePayListRequest" name="CreatePositivePayListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetExternalPayeeListByNameRequest">
    <wsdl:part element="sch0:GetExternalPayeeListByNameRequest" name="GetExternalPayeeListByNameRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentListResponse">
    <wsdl:part element="sch0:GetPaymentListResponse" name="GetPaymentListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberAffiliateConfigsResponse">
    <wsdl:part element="sch0:GetSubscriberAffiliateConfigsResponse" name="GetSubscriberAffiliateConfigsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateRequest">
    <wsdl:part element="sch0:GetAffiliateRequest" name="GetAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAutoEnrollmentResponse">
    <wsdl:part element="sch0:CreateAutoEnrollmentResponse" name="CreateAutoEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ActivateSettlementResponse">
    <wsdl:part element="sch0:ActivateSettlementResponse" name="ActivateSettlementResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentTicketListResponse">
    <wsdl:part element="sch0:GetEnrollmentTicketListResponse" name="GetEnrollmentTicketListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateFeeBasisRequest">
    <wsdl:part element="sch0:CreateFeeBasisRequest" name="CreateFeeBasisRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateDraftScheduleRequest">
    <wsdl:part element="sch0:CreateDraftScheduleRequest" name="CreateDraftScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientRTPSettlementRequest">
    <wsdl:part element="sch0:GetClientRTPSettlementRequest" name="GetClientRTPSettlementRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberPartnerRequest">
    <wsdl:part element="sch0:CreateSubscriberPartnerRequest" name="CreateSubscriberPartnerRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetReturnListResponse">
    <wsdl:part element="sch0:GetReturnListResponse" name="GetReturnListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateRuleSetResponse">
    <wsdl:part element="sch0:CreateRuleSetResponse" name="CreateRuleSetResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAffiliateUserRequest">
    <wsdl:part element="sch0:CreateAffiliateUserRequest" name="CreateAffiliateUserRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleListRequest">
    <wsdl:part element="sch0:GetFeeScheduleListRequest" name="GetFeeScheduleListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionListByIdsResponse">
    <wsdl:part element="sch0:GetTransactionListByIdsResponse" name="GetTransactionListByIdsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetTransactionListResponse">
    <wsdl:part element="sch0:AdminGetTransactionListResponse" name="AdminGetTransactionListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateInternalUserRequest">
    <wsdl:part element="sch0:AdminCreateInternalUserRequest" name="AdminCreateInternalUserRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetChildAffiliateListRequest">
    <wsdl:part element="sch0:GetChildAffiliateListRequest" name="GetChildAffiliateListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSettlementScheduleResponse">
    <wsdl:part element="sch0:UpdateSettlementScheduleResponse" name="UpdateSettlementScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateAffiliateRequest">
    <wsdl:part element="sch0:AdminUpdateAffiliateRequest" name="AdminUpdateAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientSettlementListResponse">
    <wsdl:part element="sch0:GetClientSettlementListResponse" name="GetClientSettlementListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetCFTBankAccountListResponse">
    <wsdl:part element="sch0:AdminGetCFTBankAccountListResponse" name="AdminGetCFTBankAccountListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetClientsResponse">
    <wsdl:part element="sch0:AdminGetClientsResponse" name="AdminGetClientsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AddReferralAffiliateRequest">
    <wsdl:part element="sch0:AddReferralAffiliateRequest" name="AddReferralAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentCommentListRequest">
    <wsdl:part element="sch0:GetEnrollmentCommentListRequest" name="GetEnrollmentCommentListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ReactivateDraftScheduleResponse">
    <wsdl:part element="sch0:ReactivateDraftScheduleResponse" name="ReactivateDraftScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentTicketRequest">
    <wsdl:part element="sch0:CreateEnrollmentTicketRequest" name="CreateEnrollmentTicketRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetStatusEnumListRequest">
    <wsdl:part element="sch0:GetStatusEnumListRequest" name="GetStatusEnumListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateCoClientRequest">
    <wsdl:part element="sch0:UpdateCoClientRequest" name="UpdateCoClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberUserListRequest">
    <wsdl:part element="sch0:GetSubscriberUserListRequest" name="GetSubscriberUserListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MoveAffiliateHierarchyRequest">
    <wsdl:part element="sch0:MoveAffiliateHierarchyRequest" name="MoveAffiliateHierarchyRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberDocumentListRequest">
    <wsdl:part element="sch0:AdminGetSubscriberDocumentListRequest" name="AdminGetSubscriberDocumentListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MakePhonePaymentResponse">
    <wsdl:part element="sch0:MakePhonePaymentResponse" name="MakePhonePaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePaymentStatusRequest">
    <wsdl:part element="sch0:UpdatePaymentStatusRequest" name="UpdatePaymentStatusRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberBankAccountRequest">
    <wsdl:part element="sch0:AdminGetSubscriberBankAccountRequest" name="AdminGetSubscriberBankAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndLoadPaymentResponse">
    <wsdl:part element="sch0:AuthorizeAndLoadPaymentResponse" name="AuthorizeAndLoadPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientStatusResponse">
    <wsdl:part element="sch0:GetClientStatusResponse" name="GetClientStatusResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SkipDraftResponse">
    <wsdl:part element="sch0:SkipDraftResponse" name="SkipDraftResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateChannelAttributeValueRequest">
    <wsdl:part element="sch0:UpdateChannelAttributeValueRequest" name="UpdateChannelAttributeValueRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetReferralAffiliateListRequest">
    <wsdl:part element="sch0:GetReferralAffiliateListRequest" name="GetReferralAffiliateListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetRuleSetListResponse">
    <wsdl:part element="sch0:GetRuleSetListResponse" name="GetRuleSetListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberPayeeRequest">
    <wsdl:part element="sch0:GetSubscriberPayeeRequest" name="GetSubscriberPayeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateHierarchyEnrollmentAffiliateRequest">
    <wsdl:part element="sch0:CreateHierarchyEnrollmentAffiliateRequest" name="CreateHierarchyEnrollmentAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentChannelAttributeValuesListResponse">
    <wsdl:part element="sch0:GetEnrollmentChannelAttributeValuesListResponse" name="GetEnrollmentChannelAttributeValuesListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateScheduleListRequest">
    <wsdl:part element="sch0:GetAffiliateScheduleListRequest" name="GetAffiliateScheduleListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientBalancesResponse">
    <wsdl:part element="sch0:GetClientBalancesResponse" name="GetClientBalancesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SaveAutoEnrollmentAffiliatesRequest">
    <wsdl:part element="sch0:SaveAutoEnrollmentAffiliatesRequest" name="SaveAutoEnrollmentAffiliatesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateInternalUserRequest">
    <wsdl:part element="sch0:AdminUpdateInternalUserRequest" name="AdminUpdateInternalUserRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateSubscriberDocumentRequest">
    <wsdl:part element="sch0:AdminCreateSubscriberDocumentRequest" name="AdminCreateSubscriberDocumentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleListResponse">
    <wsdl:part element="sch0:GetFeeScheduleListResponse" name="GetFeeScheduleListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentCountRequest">
    <wsdl:part element="sch0:GetEnrollmentCountRequest" name="GetEnrollmentCountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionMethodsRequest">
    <wsdl:part element="sch0:GetTransactionMethodsRequest" name="GetTransactionMethodsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberPayeeListByNameResponse">
    <wsdl:part element="sch0:GetSubscriberPayeeListByNameResponse" name="GetSubscriberPayeeListByNameResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateResponse">
    <wsdl:part element="sch0:GetAffiliateResponse" name="GetAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSettlementCountResponse">
    <wsdl:part element="sch0:GetSettlementCountResponse" name="GetSettlementCountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSubscriberPartnerRequest">
    <wsdl:part element="sch0:UpdateSubscriberPartnerRequest" name="UpdateSubscriberPartnerRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberPartnerResponse">
    <wsdl:part element="sch0:CreateSubscriberPartnerResponse" name="CreateSubscriberPartnerResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSuscriberTemplateAssetResponse">
    <wsdl:part element="sch0:CreateSuscriberTemplateAssetResponse" name="CreateSuscriberTemplateAssetResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberDocumentListResponse">
    <wsdl:part element="sch0:AdminGetSubscriberDocumentListResponse" name="AdminGetSubscriberDocumentListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateAffiliateResponse">
    <wsdl:part element="sch0:AdminUpdateAffiliateResponse" name="AdminUpdateAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientSettlementListRequest">
    <wsdl:part element="sch0:GetClientSettlementListRequest" name="GetClientSettlementListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentDetailsRequest">
    <wsdl:part element="sch0:GetPaymentDetailsRequest" name="GetPaymentDetailsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateDepositItemsResponse">
    <wsdl:part element="sch0:CreateDepositItemsResponse" name="CreateDepositItemsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateDraftItemsResponse">
    <wsdl:part element="sch0:UpdateDraftItemsResponse" name="UpdateDraftItemsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionListResponse">
    <wsdl:part element="sch0:GetTransactionListResponse" name="GetTransactionListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentAffiliateListResponse">
    <wsdl:part element="sch0:GetEnrollmentAffiliateListResponse" name="GetEnrollmentAffiliateListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAutoEnrollmentAffiliatesResponse">
    <wsdl:part element="sch0:UpdateAutoEnrollmentAffiliatesResponse" name="UpdateAutoEnrollmentAffiliatesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateUserListResponse">
    <wsdl:part element="sch0:GetAffiliateUserListResponse" name="GetAffiliateUserListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCheckNumberRequest">
    <wsdl:part element="sch0:GetCheckNumberRequest" name="GetCheckNumberRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateInterClientTransferResponse">
    <wsdl:part element="sch0:CreateInterClientTransferResponse" name="CreateInterClientTransferResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SuspendDraftScheduleRequest">
    <wsdl:part element="sch0:SuspendDraftScheduleRequest" name="SuspendDraftScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminRejectPostedTransactionResponse">
    <wsdl:part element="sch0:AdminRejectPostedTransactionResponse" name="AdminRejectPostedTransactionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePerformanceSettlementBasisResponse">
    <wsdl:part element="sch0:CreatePerformanceSettlementBasisResponse" name="CreatePerformanceSettlementBasisResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="VerifyIpRequest">
    <wsdl:part element="sch0:VerifyIpRequest" name="VerifyIpRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateTransactionListRequest">
    <wsdl:part element="sch0:GetAffiliateTransactionListRequest" name="GetAffiliateTransactionListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="InstantRemittanceResponse">
    <wsdl:part element="sch0:InstantRemittanceResponse" name="InstantRemittanceResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CancelEnrollmentRequest">
    <wsdl:part element="sch0:CancelEnrollmentRequest" name="CancelEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateRTPSettlementScheduleResponse">
    <wsdl:part element="sch0:CreateRTPSettlementScheduleResponse" name="CreateRTPSettlementScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetPostedTransactionListRequest">
    <wsdl:part element="sch0:AdminGetPostedTransactionListRequest" name="AdminGetPostedTransactionListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateFeeBasisResponse">
    <wsdl:part element="sch0:CreateFeeBasisResponse" name="CreateFeeBasisResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberPayeeRequest">
    <wsdl:part element="sch0:CreateSubscriberPayeeRequest" name="CreateSubscriberPayeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleResponse">
    <wsdl:part element="sch0:GetFeeScheduleResponse" name="GetFeeScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetScheduleListResponse">
    <wsdl:part element="sch0:GetScheduleListResponse" name="GetScheduleListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePartialEnrollmentStatusRequest">
    <wsdl:part element="sch0:UpdatePartialEnrollmentStatusRequest" name="UpdatePartialEnrollmentStatusRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleResponse">
    <wsdl:part element="sch0:GetDraftScheduleResponse" name="GetDraftScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAffiliateRequest">
    <wsdl:part element="sch0:CreateAffiliateRequest" name="CreateAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionDetailsResponse">
    <wsdl:part element="sch0:GetTransactionDetailsResponse" name="GetTransactionDetailsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ListSubscriberFeeResponse">
    <wsdl:part element="sch0:ListSubscriberFeeResponse" name="ListSubscriberFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetNonConformingDraftsResponse">
    <wsdl:part element="sch0:AdminGetNonConformingDraftsResponse" name="AdminGetNonConformingDraftsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSettlementListRequest">
    <wsdl:part element="sch0:AdminGetSettlementListRequest" name="AdminGetSettlementListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ListEnrollmentFeeRequest">
    <wsdl:part element="sch0:ListEnrollmentFeeRequest" name="ListEnrollmentFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateSubscriberBankAccountResponse">
    <wsdl:part element="sch0:AdminUpdateSubscriberBankAccountResponse" name="AdminUpdateSubscriberBankAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthRequest">
    <wsdl:part element="sch0:AuthRequest" name="AuthRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPostedTransactionResponse">
    <wsdl:part element="sch0:GetPostedTransactionResponse" name="GetPostedTransactionResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentCommentRequest">
    <wsdl:part element="sch0:CreateEnrollmentCommentRequest" name="CreateEnrollmentCommentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndAcceptPaymentRequest">
    <wsdl:part element="sch0:AuthorizeAndAcceptPaymentRequest" name="AuthorizeAndAcceptPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetUserByIdRequest">
    <wsdl:part element="sch0:GetUserByIdRequest" name="GetUserByIdRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberDetailResponse">
    <wsdl:part element="sch0:AdminGetSubscriberDetailResponse" name="AdminGetSubscriberDetailResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentTicketListRequest">
    <wsdl:part element="sch0:GetEnrollmentTicketListRequest" name="GetEnrollmentTicketListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetAffiliateRequest">
    <wsdl:part element="sch0:AdminGetAffiliateRequest" name="AdminGetAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionDetailsRequest">
    <wsdl:part element="sch0:GetTransactionDetailsRequest" name="GetTransactionDetailsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateCoClientRequest">
    <wsdl:part element="sch0:CreateCoClientRequest" name="CreateCoClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAdhocTransferRequest">
    <wsdl:part element="sch0:CreateAdhocTransferRequest" name="CreateAdhocTransferRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSettlementFeesRequest">
    <wsdl:part element="sch0:AdminGetSettlementFeesRequest" name="AdminGetSettlementFeesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetTransferBankAccountListRequest">
    <wsdl:part element="sch0:AdminGetTransferBankAccountListRequest" name="AdminGetTransferBankAccountListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleRequest">
    <wsdl:part element="sch0:GetDraftScheduleRequest" name="GetDraftScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CheckSdnMatchResponse">
    <wsdl:part element="sch0:CheckSdnMatchResponse" name="CheckSdnMatchResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CancelEnrollmentResponse">
    <wsdl:part element="sch0:CancelEnrollmentResponse" name="CancelEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateApprovalAttemptRequest">
    <wsdl:part element="sch0:CreateApprovalAttemptRequest" name="CreateApprovalAttemptRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndAdjustPaymentRequest">
    <wsdl:part element="sch0:AuthorizeAndAdjustPaymentRequest" name="AuthorizeAndAdjustPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAutoEnrollmentRequest">
    <wsdl:part element="sch0:CreateAutoEnrollmentRequest" name="CreateAutoEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberAccountsResponse">
    <wsdl:part element="sch0:AdminGetSubscriberAccountsResponse" name="AdminGetSubscriberAccountsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberListRequest">
    <wsdl:part element="sch0:AdminGetSubscriberListRequest" name="AdminGetSubscriberListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateFeeBasisRequest">
    <wsdl:part element="sch0:UpdateFeeBasisRequest" name="UpdateFeeBasisRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyDraftScheduleResponse">
    <wsdl:part element="sch0:ModifyDraftScheduleResponse" name="ModifyDraftScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAutoEnrollmentDetailFromStoneEagleRequest">
    <wsdl:part element="sch0:GetAutoEnrollmentDetailFromStoneEagleRequest" name="GetAutoEnrollmentDetailFromStoneEagleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetUnprocessedPostedTransactionListRequest">
    <wsdl:part element="sch0:GetUnprocessedPostedTransactionListRequest" name="GetUnprocessedPostedTransactionListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberStatewiseFeeCapListResponse">
    <wsdl:part element="sch0:GetSubscriberStatewiseFeeCapListResponse" name="GetSubscriberStatewiseFeeCapListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientSettlementRequest">
    <wsdl:part element="sch0:GetClientSettlementRequest" name="GetClientSettlementRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetReferralAffiliateListResponse">
    <wsdl:part element="sch0:GetReferralAffiliateListResponse" name="GetReferralAffiliateListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateChannelAttributeResponse">
    <wsdl:part element="sch0:CreateChannelAttributeResponse" name="CreateChannelAttributeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePartialEnrollmentResponse">
    <wsdl:part element="sch0:UpdatePartialEnrollmentResponse" name="UpdatePartialEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSettlementCountRequest">
    <wsdl:part element="sch0:GetSettlementCountRequest" name="GetSettlementCountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDocumentByIdRequest">
    <wsdl:part element="sch0:GetDocumentByIdRequest" name="GetDocumentByIdRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SuspendFeeScheduleRequest">
    <wsdl:part element="sch0:SuspendFeeScheduleRequest" name="SuspendFeeScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientResponse">
    <wsdl:part element="sch0:GetClientResponse" name="GetClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientsResponse">
    <wsdl:part element="sch0:GetClientsResponse" name="GetClientsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateEnrollmentTicketRequest">
    <wsdl:part element="sch0:UpdateEnrollmentTicketRequest" name="UpdateEnrollmentTicketRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateClientResponse">
    <wsdl:part element="sch0:CreateClientResponse" name="CreateClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="MoveAffiliateHierarchyResponse">
    <wsdl:part element="sch0:MoveAffiliateHierarchyResponse" name="MoveAffiliateHierarchyResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="VerifyIpResponse">
    <wsdl:part element="sch0:VerifyIpResponse" name="VerifyIpResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberUserListResponse">
    <wsdl:part element="sch0:GetSubscriberUserListResponse" name="GetSubscriberUserListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateSubscriberFeeResponse">
    <wsdl:part element="sch0:AdminUpdateSubscriberFeeResponse" name="AdminUpdateSubscriberFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentCommentListResponse">
    <wsdl:part element="sch0:GetEnrollmentCommentListResponse" name="GetEnrollmentCommentListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSettlementScheduleResponse">
    <wsdl:part element="sch0:CreateSettlementScheduleResponse" name="CreateSettlementScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnlockAccountRequest">
    <wsdl:part element="sch0:UnlockAccountRequest" name="UnlockAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleListBasisRequest">
    <wsdl:part element="sch0:GetFeeScheduleListBasisRequest" name="GetFeeScheduleListBasisRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberTemplateAssetByIdRequest">
    <wsdl:part element="sch0:GetSubscriberTemplateAssetByIdRequest" name="GetSubscriberTemplateAssetByIdRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetNonConformingDraftsRequest">
    <wsdl:part element="sch0:AdminGetNonConformingDraftsRequest" name="AdminGetNonConformingDraftsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ListTopLevelFeeRequest">
    <wsdl:part element="sch0:ListTopLevelFeeRequest" name="ListTopLevelFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyDraftScheduleRequest">
    <wsdl:part element="sch0:ModifyDraftScheduleRequest" name="ModifyDraftScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentPayeeRequest">
    <wsdl:part element="sch0:GetEnrollmentPayeeRequest" name="GetEnrollmentPayeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAffiliateDocumentResponse">
    <wsdl:part element="sch0:UpdateAffiliateDocumentResponse" name="UpdateAffiliateDocumentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPositivePayListResponse">
    <wsdl:part element="sch0:GetPositivePayListResponse" name="GetPositivePayListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ListSubscriberFeeRequest">
    <wsdl:part element="sch0:ListSubscriberFeeRequest" name="ListSubscriberFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePrenoteScheduleResponse">
    <wsdl:part element="sch0:CreatePrenoteScheduleResponse" name="CreatePrenoteScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAdhocTransferResponse">
    <wsdl:part element="sch0:UpdateAdhocTransferResponse" name="UpdateAdhocTransferResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientBalancesRequest">
    <wsdl:part element="sch0:GetClientBalancesRequest" name="GetClientBalancesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePartialEnrollmentRequest">
    <wsdl:part element="sch0:UpdatePartialEnrollmentRequest" name="UpdatePartialEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientSettlementResponse">
    <wsdl:part element="sch0:GetClientSettlementResponse" name="GetClientSettlementResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SaveChannelAttributeValueRequest">
    <wsdl:part element="sch0:SaveChannelAttributeValueRequest" name="SaveChannelAttributeValueRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ReactivateFeeScheduleRequest">
    <wsdl:part element="sch0:ReactivateFeeScheduleRequest" name="ReactivateFeeScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSPAForecastListResponse">
    <wsdl:part element="sch0:GetSPAForecastListResponse" name="GetSPAForecastListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateEnrollmentTicketResponse">
    <wsdl:part element="sch0:UpdateEnrollmentTicketResponse" name="UpdateEnrollmentTicketResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyLoanAmountRequest">
    <wsdl:part element="sch0:ModifyLoanAmountRequest" name="ModifyLoanAmountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSettlementApprovalListRequest">
    <wsdl:part element="sch0:GetSettlementApprovalListRequest" name="GetSettlementApprovalListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetExternalPayeeListByNameResponse">
    <wsdl:part element="sch0:GetExternalPayeeListByNameResponse" name="GetExternalPayeeListByNameResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SkipPaymentRequest">
    <wsdl:part element="sch0:SkipPaymentRequest" name="SkipPaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetRuleSetListRequest">
    <wsdl:part element="sch0:GetRuleSetListRequest" name="GetRuleSetListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetInternalUserListResponse">
    <wsdl:part element="sch0:AdminGetInternalUserListResponse" name="AdminGetInternalUserListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SaveChannelAttributeValueResponse">
    <wsdl:part element="sch0:SaveChannelAttributeValueResponse" name="SaveChannelAttributeValueResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientIdsRequest">
    <wsdl:part element="sch0:GetClientIdsRequest" name="GetClientIdsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateChannelAttributeRequest">
    <wsdl:part element="sch0:CreateChannelAttributeRequest" name="CreateChannelAttributeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleListWithNextDateResponse">
    <wsdl:part element="sch0:GetDraftScheduleListWithNextDateResponse" name="GetDraftScheduleListWithNextDateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetNextScheduleRequest">
    <wsdl:part element="sch0:GetNextScheduleRequest" name="GetNextScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAffiliateDocumentRequest">
    <wsdl:part element="sch0:UpdateAffiliateDocumentRequest" name="UpdateAffiliateDocumentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateDocumentListResponse">
    <wsdl:part element="sch0:GetAffiliateDocumentListResponse" name="GetAffiliateDocumentListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="InstantRemittanceRequest">
    <wsdl:part element="sch0:InstantRemittanceRequest" name="InstantRemittanceRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetAffiliateListResponse">
    <wsdl:part element="sch0:AdminGetAffiliateListResponse" name="AdminGetAffiliateListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminListTopLevelFeeRequest">
    <wsdl:part element="sch0:AdminListTopLevelFeeRequest" name="AdminListTopLevelFeeRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetUnprocessedPostedTransactionListResponse">
    <wsdl:part element="sch0:GetUnprocessedPostedTransactionListResponse" name="GetUnprocessedPostedTransactionListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndAdvancePaymentResponse">
    <wsdl:part element="sch0:AuthorizeAndAdvancePaymentResponse" name="AuthorizeAndAdvancePaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateListResponse">
    <wsdl:part element="sch0:GetAffiliateListResponse" name="GetAffiliateListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UploadDocumentRequest">
    <wsdl:part element="sch0:UploadDocumentRequest" name="UploadDocumentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPositivePayDetailsRequest">
    <wsdl:part element="sch0:GetPositivePayDetailsRequest" name="GetPositivePayDetailsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDocumentByIdResponse">
    <wsdl:part element="sch0:GetDocumentByIdResponse" name="GetDocumentByIdResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateInternalUserResponse">
    <wsdl:part element="sch0:AdminCreateInternalUserResponse" name="AdminCreateInternalUserResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndAdjustPaymentResponse">
    <wsdl:part element="sch0:AuthorizeAndAdjustPaymentResponse" name="AuthorizeAndAdjustPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ChangePasswordForTokenResponse">
    <wsdl:part element="sch0:ChangePasswordForTokenResponse" name="ChangePasswordForTokenResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCheckNumberResponse">
    <wsdl:part element="sch0:GetCheckNumberResponse" name="GetCheckNumberResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetInternalUserListRequest">
    <wsdl:part element="sch0:AdminGetInternalUserListRequest" name="AdminGetInternalUserListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateCaptureDraftRequest">
    <wsdl:part element="sch0:UpdateCaptureDraftRequest" name="UpdateCaptureDraftRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthResponse">
    <wsdl:part element="sch0:AuthResponse" name="AuthResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SearchCFTPayeesResponse">
    <wsdl:part element="sch0:SearchCFTPayeesResponse" name="SearchCFTPayeesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateClientBankAccountResponse">
    <wsdl:part element="sch0:CreateClientBankAccountResponse" name="CreateClientBankAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="DelayDraftResponse">
    <wsdl:part element="sch0:DelayDraftResponse" name="DelayDraftResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPartnerListRequest">
    <wsdl:part element="sch0:GetPartnerListRequest" name="GetPartnerListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentCommentResponse">
    <wsdl:part element="sch0:CreateEnrollmentCommentResponse" name="CreateEnrollmentCommentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePositivePayListResponse">
    <wsdl:part element="sch0:CreatePositivePayListResponse" name="CreatePositivePayListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentErrorListResponse">
    <wsdl:part element="sch0:GetEnrollmentErrorListResponse" name="GetEnrollmentErrorListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetScheduleResponse">
    <wsdl:part element="sch0:GetScheduleResponse" name="GetScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentDocumentResponse">
    <wsdl:part element="sch0:CreateEnrollmentDocumentResponse" name="CreateEnrollmentDocumentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminListTopLevelFeeResponse">
    <wsdl:part element="sch0:AdminListTopLevelFeeResponse" name="AdminListTopLevelFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CaptureDraftRequest">
    <wsdl:part element="sch0:CaptureDraftRequest" name="CaptureDraftRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentTicketRequest">
    <wsdl:part element="sch0:GetEnrollmentTicketRequest" name="GetEnrollmentTicketRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberTemplateAssetByIdResponse">
    <wsdl:part element="sch0:GetSubscriberTemplateAssetByIdResponse" name="GetSubscriberTemplateAssetByIdResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateClientBankAccountRequest">
    <wsdl:part element="sch0:CreateClientBankAccountRequest" name="CreateClientBankAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleListResponse">
    <wsdl:part element="sch0:GetDraftScheduleListResponse" name="GetDraftScheduleListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberUserRequest">
    <wsdl:part element="sch0:CreateSubscriberUserRequest" name="CreateSubscriberUserRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAutoPayeeInfoRequest">
    <wsdl:part element="sch0:UpdateAutoPayeeInfoRequest" name="UpdateAutoPayeeInfoRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="SendReactivationCodeResponse">
    <wsdl:part element="sch0:SendReactivationCodeResponse" name="SendReactivationCodeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentErrorResponse">
    <wsdl:part element="sch0:CreateEnrollmentErrorResponse" name="CreateEnrollmentErrorResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateClientsRequest">
    <wsdl:part element="sch0:GetAffiliateClientsRequest" name="GetAffiliateClientsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAffiliateRequest">
    <wsdl:part element="sch0:UpdateAffiliateRequest" name="UpdateAffiliateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateCoClientResponse">
    <wsdl:part element="sch0:UpdateCoClientResponse" name="UpdateCoClientResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberPayeeListByNameRequest">
    <wsdl:part element="sch0:GetSubscriberPayeeListByNameRequest" name="GetSubscriberPayeeListByNameRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateSubscriberUserResponse">
    <wsdl:part element="sch0:UpdateSubscriberUserResponse" name="UpdateSubscriberUserResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeScheduleListBasisResponse">
    <wsdl:part element="sch0:GetFeeScheduleListBasisResponse" name="GetFeeScheduleListBasisResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminViewEnrollmentResponse">
    <wsdl:part element="sch0:AdminViewEnrollmentResponse" name="AdminViewEnrollmentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCplusClientsResponse">
    <wsdl:part element="sch0:GetCplusClientsResponse" name="GetCplusClientsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePerformanceSettlementRequest">
    <wsdl:part element="sch0:CreatePerformanceSettlementRequest" name="CreatePerformanceSettlementRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePartialEnrollmentRequest">
    <wsdl:part element="sch0:CreatePartialEnrollmentRequest" name="CreatePartialEnrollmentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetFeeBasisRequest">
    <wsdl:part element="sch0:GetFeeBasisRequest" name="GetFeeBasisRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateClientRequest">
    <wsdl:part element="sch0:CreateClientRequest" name="CreateClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleModifiableDatesRequest">
    <wsdl:part element="sch0:GetDraftScheduleModifiableDatesRequest" name="GetDraftScheduleModifiableDatesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateAutoNPNFeeResponse">
    <wsdl:part element="sch0:CreateAutoNPNFeeResponse" name="CreateAutoNPNFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberBankAccountListResponse">
    <wsdl:part element="sch0:AdminGetSubscriberBankAccountListResponse" name="AdminGetSubscriberBankAccountListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentTicketResponse">
    <wsdl:part element="sch0:CreateEnrollmentTicketResponse" name="CreateEnrollmentTicketResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientBankAccountResponse">
    <wsdl:part element="sch0:GetClientBankAccountResponse" name="GetClientBankAccountResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateAutoEnrollmentAffiliatesRequest">
    <wsdl:part element="sch0:UpdateAutoEnrollmentAffiliatesRequest" name="UpdateAutoEnrollmentAffiliatesRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ListTopLevelFeeResponse">
    <wsdl:part element="sch0:ListTopLevelFeeResponse" name="ListTopLevelFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetScheduleRequest">
    <wsdl:part element="sch0:GetScheduleRequest" name="GetScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizeAndAcceptPaymentResponse">
    <wsdl:part element="sch0:AuthorizeAndAcceptPaymentResponse" name="AuthorizeAndAcceptPaymentResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSubscriberUserResponse">
    <wsdl:part element="sch0:CreateSubscriberUserResponse" name="CreateSubscriberUserResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateSubscriberResponse">
    <wsdl:part element="sch0:AdminUpdateSubscriberResponse" name="AdminUpdateSubscriberResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateSettlementScheduleRequest">
    <wsdl:part element="sch0:CreateSettlementScheduleRequest" name="CreateSettlementScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateFeeScheduleResponse">
    <wsdl:part element="sch0:CreateFeeScheduleResponse" name="CreateFeeScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCancelReasonCodesResponse">
    <wsdl:part element="sch0:GetCancelReasonCodesResponse" name="GetCancelReasonCodesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientBankAccountListRequest">
    <wsdl:part element="sch0:GetClientBankAccountListRequest" name="GetClientBankAccountListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateEnrollmentDocumentRequest">
    <wsdl:part element="sch0:CreateEnrollmentDocumentRequest" name="CreateEnrollmentDocumentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberPayeeListRequest">
    <wsdl:part element="sch0:GetSubscriberPayeeListRequest" name="GetSubscriberPayeeListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateHierarchyRequest">
    <wsdl:part element="sch0:GetAffiliateHierarchyRequest" name="GetAffiliateHierarchyRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSPAForecastListRequest">
    <wsdl:part element="sch0:GetSPAForecastListRequest" name="GetSPAForecastListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAllOverriddenSubscriberFeeResponse">
    <wsdl:part element="sch0:GetAllOverriddenSubscriberFeeResponse" name="GetAllOverriddenSubscriberFeeResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetReturnListRequest">
    <wsdl:part element="sch0:GetReturnListRequest" name="GetReturnListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetPaymentMonitorListRequest">
    <wsdl:part element="sch0:GetPaymentMonitorListRequest" name="GetPaymentMonitorListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdatePaymentStatusResponse">
    <wsdl:part element="sch0:UpdatePaymentStatusResponse" name="UpdatePaymentStatusResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AuthorizePaymentRequest">
    <wsdl:part element="sch0:AuthorizePaymentRequest" name="AuthorizePaymentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateHierarchyAffiliateCommissionDistResponse">
    <wsdl:part element="sch0:CreateHierarchyAffiliateCommissionDistResponse" name="CreateHierarchyAffiliateCommissionDistResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetSubscriberStatewiseFeeCapListRequest">
    <wsdl:part element="sch0:GetSubscriberStatewiseFeeCapListRequest" name="GetSubscriberStatewiseFeeCapListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleModifiableDatesResponse">
    <wsdl:part element="sch0:GetDraftScheduleModifiableDatesResponse" name="GetDraftScheduleModifiableDatesResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftErrorListResponse">
    <wsdl:part element="sch0:GetDraftErrorListResponse" name="GetDraftErrorListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionListRequest">
    <wsdl:part element="sch0:GetTransactionListRequest" name="GetTransactionListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateRuleSetDefinitionRequest">
    <wsdl:part element="sch0:UpdateRuleSetDefinitionRequest" name="UpdateRuleSetDefinitionRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentExceptionsListResponse">
    <wsdl:part element="sch0:GetEnrollmentExceptionsListResponse" name="GetEnrollmentExceptionsListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetAffiliateScheduleListResponse">
    <wsdl:part element="sch0:GetAffiliateScheduleListResponse" name="GetAffiliateScheduleListResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetRuleSetRequest">
    <wsdl:part element="sch0:GetRuleSetRequest" name="GetRuleSetRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminUpdateSubscriberBankAccountRequest">
    <wsdl:part element="sch0:AdminUpdateSubscriberBankAccountRequest" name="AdminUpdateSubscriberBankAccountRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateDepositItemsRequest">
    <wsdl:part element="sch0:CreateDepositItemsRequest" name="CreateDepositItemsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CaptureDraftResponse">
    <wsdl:part element="sch0:CaptureDraftResponse" name="CaptureDraftResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateReturnScheduleResponse">
    <wsdl:part element="sch0:CreateReturnScheduleResponse" name="CreateReturnScheduleResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetClientIdsResponse">
    <wsdl:part element="sch0:GetClientIdsResponse" name="GetClientIdsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetBankListRequest">
    <wsdl:part element="sch0:GetBankListRequest" name="GetBankListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateDraftItemsRequest">
    <wsdl:part element="sch0:UpdateDraftItemsRequest" name="UpdateDraftItemsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateDraftItemsResponse">
    <wsdl:part element="sch0:CreateDraftItemsResponse" name="CreateDraftItemsResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateRuleSetRequest">
    <wsdl:part element="sch0:UpdateRuleSetRequest" name="UpdateRuleSetRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreateRuleSetRequest">
    <wsdl:part element="sch0:CreateRuleSetRequest" name="CreateRuleSetRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminCreateAffiliateResponse">
    <wsdl:part element="sch0:AdminCreateAffiliateResponse" name="AdminCreateAffiliateResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleListRequest">
    <wsdl:part element="sch0:GetDraftScheduleListRequest" name="GetDraftScheduleListRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetDraftScheduleListWithNextDateRequest">
    <wsdl:part element="sch0:GetDraftScheduleListWithNextDateRequest" name="GetDraftScheduleListWithNextDateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetReturnScheduleRequest">
    <wsdl:part element="sch0:GetReturnScheduleRequest" name="GetReturnScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetTransactionListByIdsRequest">
    <wsdl:part element="sch0:GetTransactionListByIdsRequest" name="GetTransactionListByIdsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetCplusClientsRequest">
    <wsdl:part element="sch0:GetCplusClientsRequest" name="GetCplusClientsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="GetEnrollmentDocumentRequest">
    <wsdl:part element="sch0:GetEnrollmentDocumentRequest" name="GetEnrollmentDocumentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="ModifyLoanDueDateRequest">
    <wsdl:part element="sch0:ModifyLoanDueDateRequest" name="ModifyLoanDueDateRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="CreatePrenoteScheduleRequest">
    <wsdl:part element="sch0:CreatePrenoteScheduleRequest" name="CreatePrenoteScheduleRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="UpdateClientRequest">
    <wsdl:part element="sch0:UpdateClientRequest" name="UpdateClientRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="AdminGetSubscriberAccountsRequest">
    <wsdl:part element="sch0:AdminGetSubscriberAccountsRequest" name="AdminGetSubscriberAccountsRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="RemoveAffiliateDocumentRequest">
    <wsdl:part element="sch0:RemoveAffiliateDocumentRequest" name="RemoveAffiliateDocumentRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="npn">
    <wsdl:operation name="CreateSubscriberUser">
      <wsdl:input message="tns:CreateSubscriberUserRequest" name="CreateSubscriberUserRequest"></wsdl:input>
      <wsdl:output message="tns:CreateSubscriberUserResponse" name="CreateSubscriberUserResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberPartner">
      <wsdl:input message="tns:CreateSubscriberPartnerRequest" name="CreateSubscriberPartnerRequest"></wsdl:input>
      <wsdl:output message="tns:CreateSubscriberPartnerResponse" name="CreateSubscriberPartnerResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPositivePayList">
      <wsdl:input message="tns:GetPositivePayListRequest" name="GetPositivePayListRequest"></wsdl:input>
      <wsdl:output message="tns:GetPositivePayListResponse" name="GetPositivePayListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriber">
      <wsdl:input message="tns:AdminCreateSubscriberRequest" name="AdminCreateSubscriberRequest"></wsdl:input>
      <wsdl:output message="tns:AdminCreateSubscriberResponse" name="AdminCreateSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePaymentStatus">
      <wsdl:input message="tns:UpdatePaymentStatusRequest" name="UpdatePaymentStatusRequest"></wsdl:input>
      <wsdl:output message="tns:UpdatePaymentStatusResponse" name="UpdatePaymentStatusResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SendReactivationCode">
      <wsdl:input message="tns:SendReactivationCodeRequest" name="SendReactivationCodeRequest"></wsdl:input>
      <wsdl:output message="tns:SendReactivationCodeResponse" name="SendReactivationCodeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberProcessorSetup">
      <wsdl:input message="tns:AdminGetSubscriberProcessorSetupRequest" name="AdminGetSubscriberProcessorSetupRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSubscriberProcessorSetupResponse" name="AdminGetSubscriberProcessorSetupResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePartialEnrollment">
      <wsdl:input message="tns:UpdatePartialEnrollmentRequest" name="UpdatePartialEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:UpdatePartialEnrollmentResponse" name="UpdatePartialEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberAccounts">
      <wsdl:input message="tns:AdminGetSubscriberAccountsRequest" name="AdminGetSubscriberAccountsRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSubscriberAccountsResponse" name="AdminGetSubscriberAccountsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentCount">
      <wsdl:input message="tns:GetEnrollmentCountRequest" name="GetEnrollmentCountRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentCountResponse" name="GetEnrollmentCountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndAdjustPayment">
      <wsdl:input message="tns:AuthorizeAndAdjustPaymentRequest" name="AuthorizeAndAdjustPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:AuthorizeAndAdjustPaymentResponse" name="AuthorizeAndAdjustPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionList">
      <wsdl:input message="tns:GetTransactionListRequest" name="GetTransactionListRequest"></wsdl:input>
      <wsdl:output message="tns:GetTransactionListResponse" name="GetTransactionListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateFeeSchedule">
      <wsdl:input message="tns:CreateFeeScheduleRequest" name="CreateFeeScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:CreateFeeScheduleResponse" name="CreateFeeScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSettlementSchedule">
      <wsdl:input message="tns:UpdateSettlementScheduleRequest" name="UpdateSettlementScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateSettlementScheduleResponse" name="UpdateSettlementScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateEnrollmentTicket">
      <wsdl:input message="tns:UpdateEnrollmentTicketRequest" name="UpdateEnrollmentTicketRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateEnrollmentTicketResponse" name="UpdateEnrollmentTicketResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ActivateSettlement">
      <wsdl:input message="tns:ActivateSettlementRequest" name="ActivateSettlementRequest"></wsdl:input>
      <wsdl:output message="tns:ActivateSettlementResponse" name="ActivateSettlementResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateDraftSchedule">
      <wsdl:input message="tns:UpdateDraftScheduleRequest" name="UpdateDraftScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateDraftScheduleResponse" name="UpdateDraftScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberDetail">
      <wsdl:input message="tns:AdminGetSubscriberDetailRequest" name="AdminGetSubscriberDetailRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSubscriberDetailResponse" name="AdminGetSubscriberDetailResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClients">
      <wsdl:input message="tns:GetClientsRequest" name="GetClientsRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientsResponse" name="GetClientsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateFeeBasis">
      <wsdl:input message="tns:CreateFeeBasisRequest" name="CreateFeeBasisRequest"></wsdl:input>
      <wsdl:output message="tns:CreateFeeBasisResponse" name="CreateFeeBasisResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateDocumentList">
      <wsdl:input message="tns:GetAffiliateDocumentListRequest" name="GetAffiliateDocumentListRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateDocumentListResponse" name="GetAffiliateDocumentListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ListTopLevelFee">
      <wsdl:input message="tns:ListTopLevelFeeRequest" name="ListTopLevelFeeRequest"></wsdl:input>
      <wsdl:output message="tns:ListTopLevelFeeResponse" name="ListTopLevelFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberAffiliateConfigs">
      <wsdl:input message="tns:GetSubscriberAffiliateConfigsRequest" name="GetSubscriberAffiliateConfigsRequest"></wsdl:input>
      <wsdl:output message="tns:GetSubscriberAffiliateConfigsResponse" name="GetSubscriberAffiliateConfigsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetReferralAffiliateList">
      <wsdl:input message="tns:GetReferralAffiliateListRequest" name="GetReferralAffiliateListRequest"></wsdl:input>
      <wsdl:output message="tns:GetReferralAffiliateListResponse" name="GetReferralAffiliateListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateApprovalAttempt">
      <wsdl:input message="tns:CreateApprovalAttemptRequest" name="CreateApprovalAttemptRequest"></wsdl:input>
      <wsdl:output message="tns:CreateApprovalAttemptResponse" name="CreateApprovalAttemptResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberAffiliateConfigs">
      <wsdl:input message="tns:CreateSubscriberAffiliateConfigsRequest" name="CreateSubscriberAffiliateConfigsRequest"></wsdl:input>
      <wsdl:output message="tns:CreateSubscriberAffiliateConfigsResponse" name="CreateSubscriberAffiliateConfigsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSummaryScheduleList">
      <wsdl:input message="tns:GetSummaryScheduleListRequest" name="GetSummaryScheduleListRequest"></wsdl:input>
      <wsdl:output message="tns:GetSummaryScheduleListResponse" name="GetSummaryScheduleListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateReturnSchedule">
      <wsdl:input message="tns:UpdateReturnScheduleRequest" name="UpdateReturnScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateReturnScheduleResponse" name="UpdateReturnScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSchedule">
      <wsdl:input message="tns:GetScheduleRequest" name="GetScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:GetScheduleResponse" name="GetScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="RemoveAffiliateDocument">
      <wsdl:input message="tns:RemoveAffiliateDocumentRequest" name="RemoveAffiliateDocumentRequest"></wsdl:input>
      <wsdl:output message="tns:RemoveAffiliateDocumentResponse" name="RemoveAffiliateDocumentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePerformanceSettlement">
      <wsdl:input message="tns:CreatePerformanceSettlementRequest" name="CreatePerformanceSettlementRequest"></wsdl:input>
      <wsdl:output message="tns:CreatePerformanceSettlementResponse" name="CreatePerformanceSettlementResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetReturnSchedule">
      <wsdl:input message="tns:GetReturnScheduleRequest" name="GetReturnScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:GetReturnScheduleResponse" name="GetReturnScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSettlementFees">
      <wsdl:input message="tns:AdminGetSettlementFeesRequest" name="AdminGetSettlementFeesRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSettlementFeesResponse" name="AdminGetSettlementFeesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentAffiliateList">
      <wsdl:input message="tns:GetEnrollmentAffiliateListRequest" name="GetEnrollmentAffiliateListRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentAffiliateListResponse" name="GetEnrollmentAffiliateListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePayment">
      <wsdl:input message="tns:UpdatePaymentRequest" name="UpdatePaymentRequest"></wsdl:input>
      <wsdl:output message="tns:UpdatePaymentResponse" name="UpdatePaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberPayeeListByName">
      <wsdl:input message="tns:GetSubscriberPayeeListByNameRequest" name="GetSubscriberPayeeListByNameRequest"></wsdl:input>
      <wsdl:output message="tns:GetSubscriberPayeeListByNameResponse" name="GetSubscriberPayeeListByNameResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyLoanDueDate">
      <wsdl:input message="tns:ModifyLoanDueDateRequest" name="ModifyLoanDueDateRequest"></wsdl:input>
      <wsdl:output message="tns:ModifyLoanDueDateResponse" name="ModifyLoanDueDateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UploadDocument">
      <wsdl:input message="tns:UploadDocumentRequest" name="UploadDocumentRequest"></wsdl:input>
      <wsdl:output message="tns:UploadDocumentResponse" name="UploadDocumentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateFeeSchedule">
      <wsdl:input message="tns:UpdateFeeScheduleRequest" name="UpdateFeeScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateFeeScheduleResponse" name="UpdateFeeScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateChannelAttributeValue">
      <wsdl:input message="tns:UpdateChannelAttributeValueRequest" name="UpdateChannelAttributeValueRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateChannelAttributeValueResponse" name="UpdateChannelAttributeValueResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCancelReasonCodes">
      <wsdl:input message="tns:GetCancelReasonCodesRequest" name="GetCancelReasonCodesRequest"></wsdl:input>
      <wsdl:output message="tns:GetCancelReasonCodesResponse" name="GetCancelReasonCodesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentDocument">
      <wsdl:input message="tns:CreateEnrollmentDocumentRequest" name="CreateEnrollmentDocumentRequest"></wsdl:input>
      <wsdl:output message="tns:CreateEnrollmentDocumentResponse" name="CreateEnrollmentDocumentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetAffiliate">
      <wsdl:input message="tns:AdminGetAffiliateRequest" name="AdminGetAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetAffiliateResponse" name="AdminGetAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePartialEnrollmentStatus">
      <wsdl:input message="tns:UpdatePartialEnrollmentStatusRequest" name="UpdatePartialEnrollmentStatusRequest"></wsdl:input>
      <wsdl:output message="tns:UpdatePartialEnrollmentStatusResponse" name="UpdatePartialEnrollmentStatusResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetAffiliateList">
      <wsdl:input message="tns:AdminGetAffiliateListRequest" name="AdminGetAffiliateListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetAffiliateListResponse" name="AdminGetAffiliateListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetScheduleList">
      <wsdl:input message="tns:AdminGetScheduleListRequest" name="AdminGetScheduleListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetScheduleListResponse" name="AdminGetScheduleListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateEnrollmentError">
      <wsdl:input message="tns:UpdateEnrollmentErrorRequest" name="UpdateEnrollmentErrorRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateEnrollmentErrorResponse" name="UpdateEnrollmentErrorResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetBankList">
      <wsdl:input message="tns:GetBankListRequest" name="GetBankListRequest"></wsdl:input>
      <wsdl:output message="tns:GetBankListResponse" name="GetBankListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAutoEnrollmentAffiliates">
      <wsdl:input message="tns:UpdateAutoEnrollmentAffiliatesRequest" name="UpdateAutoEnrollmentAffiliatesRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateAutoEnrollmentAffiliatesResponse" name="UpdateAutoEnrollmentAffiliatesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyHierarchyAffiliateCommissionDist">
      <wsdl:input message="tns:ModifyHierarchyAffiliateCommissionDistRequest" name="ModifyHierarchyAffiliateCommissionDistRequest"></wsdl:input>
      <wsdl:output message="tns:ModifyHierarchyAffiliateCommissionDistResponse" name="ModifyHierarchyAffiliateCommissionDistResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAdhocTransfer">
      <wsdl:input message="tns:CreateAdhocTransferRequest" name="CreateAdhocTransferRequest"></wsdl:input>
      <wsdl:output message="tns:CreateAdhocTransferResponse" name="CreateAdhocTransferResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAutoNPNFee">
      <wsdl:input message="tns:CreateAutoNPNFeeRequest" name="CreateAutoNPNFeeRequest"></wsdl:input>
      <wsdl:output message="tns:CreateAutoNPNFeeResponse" name="CreateAutoNPNFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetChildAffiliateList">
      <wsdl:input message="tns:GetChildAffiliateListRequest" name="GetChildAffiliateListRequest"></wsdl:input>
      <wsdl:output message="tns:GetChildAffiliateListResponse" name="GetChildAffiliateListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyDraftSchedule">
      <wsdl:input message="tns:ModifyDraftScheduleRequest" name="ModifyDraftScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:ModifyDraftScheduleResponse" name="ModifyDraftScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPositivePayDetails">
      <wsdl:input message="tns:GetPositivePayDetailsRequest" name="GetPositivePayDetailsRequest"></wsdl:input>
      <wsdl:output message="tns:GetPositivePayDetailsResponse" name="GetPositivePayDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberPayee">
      <wsdl:input message="tns:GetSubscriberPayeeRequest" name="GetSubscriberPayeeRequest"></wsdl:input>
      <wsdl:output message="tns:GetSubscriberPayeeResponse" name="GetSubscriberPayeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientIds">
      <wsdl:input message="tns:GetClientIdsRequest" name="GetClientIdsRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientIdsResponse" name="GetClientIdsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetNonConformingDrafts">
      <wsdl:input message="tns:AdminGetNonConformingDraftsRequest" name="AdminGetNonConformingDraftsRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetNonConformingDraftsResponse" name="AdminGetNonConformingDraftsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAllOverriddenSubscriberFee">
      <wsdl:input message="tns:GetAllOverriddenSubscriberFeeRequest" name="GetAllOverriddenSubscriberFeeRequest"></wsdl:input>
      <wsdl:output message="tns:GetAllOverriddenSubscriberFeeResponse" name="GetAllOverriddenSubscriberFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateHierarchyAffiliateCommissionDist">
      <wsdl:input message="tns:CreateHierarchyAffiliateCommissionDistRequest" name="CreateHierarchyAffiliateCommissionDistRequest"></wsdl:input>
      <wsdl:output message="tns:CreateHierarchyAffiliateCommissionDistResponse" name="CreateHierarchyAffiliateCommissionDistResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentDetails">
      <wsdl:input message="tns:GetPaymentDetailsRequest" name="GetPaymentDetailsRequest"></wsdl:input>
      <wsdl:output message="tns:GetPaymentDetailsResponse" name="GetPaymentDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSubscriberPayee">
      <wsdl:input message="tns:UpdateSubscriberPayeeRequest" name="UpdateSubscriberPayeeRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateSubscriberPayeeResponse" name="UpdateSubscriberPayeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SearchCFTPayees">
      <wsdl:input message="tns:SearchCFTPayeesRequest" name="SearchCFTPayeesRequest"></wsdl:input>
      <wsdl:output message="tns:SearchCFTPayeesResponse" name="SearchCFTPayeesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionDetails">
      <wsdl:input message="tns:GetTransactionDetailsRequest" name="GetTransactionDetailsRequest"></wsdl:input>
      <wsdl:output message="tns:GetTransactionDetailsResponse" name="GetTransactionDetailsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateClientBankAccount">
      <wsdl:input message="tns:CreateClientBankAccountRequest" name="CreateClientBankAccountRequest"></wsdl:input>
      <wsdl:output message="tns:CreateClientBankAccountResponse" name="CreateClientBankAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberPayeeList">
      <wsdl:input message="tns:GetSubscriberPayeeListRequest" name="GetSubscriberPayeeListRequest"></wsdl:input>
      <wsdl:output message="tns:GetSubscriberPayeeListResponse" name="GetSubscriberPayeeListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetApprovalsById">
      <wsdl:input message="tns:GetApprovalsByIdRequest" name="GetApprovalsByIdRequest"></wsdl:input>
      <wsdl:output message="tns:GetApprovalsByIdResponse" name="GetApprovalsByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SaveChannelAttributeValue">
      <wsdl:input message="tns:SaveChannelAttributeValueRequest" name="SaveChannelAttributeValueRequest"></wsdl:input>
      <wsdl:output message="tns:SaveChannelAttributeValueResponse" name="SaveChannelAttributeValueResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeScheduleList">
      <wsdl:input message="tns:GetFeeScheduleListRequest" name="GetFeeScheduleListRequest"></wsdl:input>
      <wsdl:output message="tns:GetFeeScheduleListResponse" name="GetFeeScheduleListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateInternalUser">
      <wsdl:input message="tns:AdminCreateInternalUserRequest" name="AdminCreateInternalUserRequest"></wsdl:input>
      <wsdl:output message="tns:AdminCreateInternalUserResponse" name="AdminCreateInternalUserResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="MoveAffiliateHierarchy">
      <wsdl:input message="tns:MoveAffiliateHierarchyRequest" name="MoveAffiliateHierarchyRequest"></wsdl:input>
      <wsdl:output message="tns:MoveAffiliateHierarchyResponse" name="MoveAffiliateHierarchyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberBankAccountList">
      <wsdl:input message="tns:AdminGetSubscriberBankAccountListRequest" name="AdminGetSubscriberBankAccountListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSubscriberBankAccountListResponse" name="AdminGetSubscriberBankAccountListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateFeeBasis">
      <wsdl:input message="tns:UpdateFeeBasisRequest" name="UpdateFeeBasisRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateFeeBasisResponse" name="UpdateFeeBasisResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetRuleSet">
      <wsdl:input message="tns:GetRuleSetRequest" name="GetRuleSetRequest"></wsdl:input>
      <wsdl:output message="tns:GetRuleSetResponse" name="GetRuleSetResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePrenoteSchedule">
      <wsdl:input message="tns:CreatePrenoteScheduleRequest" name="CreatePrenoteScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:CreatePrenoteScheduleResponse" name="CreatePrenoteScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetNextSchedule">
      <wsdl:input message="tns:GetNextScheduleRequest" name="GetNextScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:GetNextScheduleResponse" name="GetNextScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetCFTBankAccountList">
      <wsdl:input message="tns:AdminGetCFTBankAccountListRequest" name="AdminGetCFTBankAccountListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetCFTBankAccountListResponse" name="AdminGetCFTBankAccountListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateApproval">
      <wsdl:input message="tns:UpdateApprovalRequest" name="UpdateApprovalRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateApprovalResponse" name="UpdateApprovalResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientSettlement">
      <wsdl:input message="tns:GetClientSettlementRequest" name="GetClientSettlementRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientSettlementResponse" name="GetClientSettlementResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberProcessorSetup">
      <wsdl:input message="tns:AdminCreateSubscriberProcessorSetupRequest" name="AdminCreateSubscriberProcessorSetupRequest"></wsdl:input>
      <wsdl:output message="tns:AdminCreateSubscriberProcessorSetupResponse" name="AdminCreateSubscriberProcessorSetupResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberTemplateAssetById">
      <wsdl:input message="tns:GetSubscriberTemplateAssetByIdRequest" name="GetSubscriberTemplateAssetByIdRequest"></wsdl:input>
      <wsdl:output message="tns:GetSubscriberTemplateAssetByIdResponse" name="GetSubscriberTemplateAssetByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClient">
      <wsdl:input message="tns:GetClientRequest" name="GetClientRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientResponse" name="GetClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetUnprocessedPostedTransactionList">
      <wsdl:input message="tns:GetUnprocessedPostedTransactionListRequest" name="GetUnprocessedPostedTransactionListRequest"></wsdl:input>
      <wsdl:output message="tns:GetUnprocessedPostedTransactionListResponse" name="GetUnprocessedPostedTransactionListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateEnrollment">
      <wsdl:input message="tns:AdminUpdateEnrollmentRequest" name="AdminUpdateEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:AdminUpdateEnrollmentResponse" name="AdminUpdateEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientRTPSettlement">
      <wsdl:input message="tns:GetClientRTPSettlementRequest" name="GetClientRTPSettlementRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientRTPSettlementResponse" name="GetClientRTPSettlementResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetUserRolesList">
      <wsdl:input message="tns:GetUserRolesListRequest" name="GetUserRolesListRequest"></wsdl:input>
      <wsdl:output message="tns:GetUserRolesListResponse" name="GetUserRolesListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentMonitorList">
      <wsdl:input message="tns:GetPaymentMonitorListRequest" name="GetPaymentMonitorListRequest"></wsdl:input>
      <wsdl:output message="tns:GetPaymentMonitorListResponse" name="GetPaymentMonitorListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftSchedule">
      <wsdl:input message="tns:GetDraftScheduleRequest" name="GetDraftScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:GetDraftScheduleResponse" name="GetDraftScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionMethods">
      <wsdl:input message="tns:GetTransactionMethodsRequest" name="GetTransactionMethodsRequest"></wsdl:input>
      <wsdl:output message="tns:GetTransactionMethodsResponse" name="GetTransactionMethodsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndLoadPayment">
      <wsdl:input message="tns:AuthorizeAndLoadPaymentRequest" name="AuthorizeAndLoadPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:AuthorizeAndLoadPaymentResponse" name="AuthorizeAndLoadPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberStatewiseFeeCapList">
      <wsdl:input message="tns:GetSubscriberStatewiseFeeCapListRequest" name="GetSubscriberStatewiseFeeCapListRequest"></wsdl:input>
      <wsdl:output message="tns:GetSubscriberStatewiseFeeCapListResponse" name="GetSubscriberStatewiseFeeCapListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDocumentById">
      <wsdl:input message="tns:GetDocumentByIdRequest" name="GetDocumentByIdRequest"></wsdl:input>
      <wsdl:output message="tns:GetDocumentByIdResponse" name="GetDocumentByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientBalances">
      <wsdl:input message="tns:GetClientBalancesRequest" name="GetClientBalancesRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientBalancesResponse" name="GetClientBalancesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SuspendDraftSchedule">
      <wsdl:input message="tns:SuspendDraftScheduleRequest" name="SuspendDraftScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:SuspendDraftScheduleResponse" name="SuspendDraftScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetPostedTransactionList">
      <wsdl:input message="tns:AdminGetPostedTransactionListRequest" name="AdminGetPostedTransactionListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetPostedTransactionListResponse" name="AdminGetPostedTransactionListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateSubscriberFee">
      <wsdl:input message="tns:AdminUpdateSubscriberFeeRequest" name="AdminUpdateSubscriberFeeRequest"></wsdl:input>
      <wsdl:output message="tns:AdminUpdateSubscriberFeeResponse" name="AdminUpdateSubscriberFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPartnerList">
      <wsdl:input message="tns:GetPartnerListRequest" name="GetPartnerListRequest"></wsdl:input>
      <wsdl:output message="tns:GetPartnerListResponse" name="GetPartnerListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetRuleSetList">
      <wsdl:input message="tns:GetRuleSetListRequest" name="GetRuleSetListRequest"></wsdl:input>
      <wsdl:output message="tns:GetRuleSetListResponse" name="GetRuleSetListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetStatusEnumList">
      <wsdl:input message="tns:GetStatusEnumListRequest" name="GetStatusEnumListRequest"></wsdl:input>
      <wsdl:output message="tns:GetStatusEnumListResponse" name="GetStatusEnumListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminRejectPostedTransaction">
      <wsdl:input message="tns:AdminRejectPostedTransactionRequest" name="AdminRejectPostedTransactionRequest"></wsdl:input>
      <wsdl:output message="tns:AdminRejectPostedTransactionResponse" name="AdminRejectPostedTransactionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentList">
      <wsdl:input message="tns:GetPaymentListRequest" name="GetPaymentListRequest"></wsdl:input>
      <wsdl:output message="tns:GetPaymentListResponse" name="GetPaymentListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberFee">
      <wsdl:input message="tns:CreateSubscriberFeeRequest" name="CreateSubscriberFeeRequest"></wsdl:input>
      <wsdl:output message="tns:CreateSubscriberFeeResponse" name="CreateSubscriberFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberBankAccount">
      <wsdl:input message="tns:AdminCreateSubscriberBankAccountRequest" name="AdminCreateSubscriberBankAccountRequest"></wsdl:input>
      <wsdl:output message="tns:AdminCreateSubscriberBankAccountResponse" name="AdminCreateSubscriberBankAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetClients">
      <wsdl:input message="tns:AdminGetClientsRequest" name="AdminGetClientsRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetClientsResponse" name="AdminGetClientsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentTicket">
      <wsdl:input message="tns:CreateEnrollmentTicketRequest" name="CreateEnrollmentTicketRequest"></wsdl:input>
      <wsdl:output message="tns:CreateEnrollmentTicketResponse" name="CreateEnrollmentTicketResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateHierarchyEnrollmentAffiliate">
      <wsdl:input message="tns:CreateHierarchyEnrollmentAffiliateRequest" name="CreateHierarchyEnrollmentAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:CreateHierarchyEnrollmentAffiliateResponse" name="CreateHierarchyEnrollmentAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentTicket">
      <wsdl:input message="tns:GetEnrollmentTicketRequest" name="GetEnrollmentTicketRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentTicketResponse" name="GetEnrollmentTicketResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentListOnPositivePay">
      <wsdl:input message="tns:GetPaymentListOnPositivePayRequest" name="GetPaymentListOnPositivePayRequest"></wsdl:input>
      <wsdl:output message="tns:GetPaymentListOnPositivePayResponse" name="GetPaymentListOnPositivePayResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateUserList">
      <wsdl:input message="tns:GetAffiliateUserListRequest" name="GetAffiliateUserListRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateUserListResponse" name="GetAffiliateUserListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateReturnSchedule">
      <wsdl:input message="tns:CreateReturnScheduleRequest" name="CreateReturnScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:CreateReturnScheduleResponse" name="CreateReturnScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateCoClient">
      <wsdl:input message="tns:CreateCoClientRequest" name="CreateCoClientRequest"></wsdl:input>
      <wsdl:output message="tns:CreateCoClientResponse" name="CreateCoClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ResetPassword">
      <wsdl:input message="tns:ResetPasswordRequest" name="ResetPasswordRequest"></wsdl:input>
      <wsdl:output message="tns:ResetPasswordResponse" name="ResetPasswordResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateSubscriberBankAccount">
      <wsdl:input message="tns:AdminUpdateSubscriberBankAccountRequest" name="AdminUpdateSubscriberBankAccountRequest"></wsdl:input>
      <wsdl:output message="tns:AdminUpdateSubscriberBankAccountResponse" name="AdminUpdateSubscriberBankAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSettlementList">
      <wsdl:input message="tns:AdminGetSettlementListRequest" name="AdminGetSettlementListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSettlementListResponse" name="AdminGetSettlementListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberUserList">
      <wsdl:input message="tns:GetSubscriberUserListRequest" name="GetSubscriberUserListRequest"></wsdl:input>
      <wsdl:output message="tns:GetSubscriberUserListResponse" name="GetSubscriberUserListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDelayDraftChangedDates">
      <wsdl:input message="tns:GetDelayDraftChangedDatesRequest" name="GetDelayDraftChangedDatesRequest"></wsdl:input>
      <wsdl:output message="tns:GetDelayDraftChangedDatesResponse" name="GetDelayDraftChangedDatesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCheckImage">
      <wsdl:input message="tns:GetCheckImageRequest" name="GetCheckImageRequest"></wsdl:input>
      <wsdl:output message="tns:GetCheckImageResponse" name="GetCheckImageResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetTransferBankAccountList">
      <wsdl:input message="tns:AdminGetTransferBankAccountListRequest" name="AdminGetTransferBankAccountListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetTransferBankAccountListResponse" name="AdminGetTransferBankAccountListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminListTopLevelFee">
      <wsdl:input message="tns:AdminListTopLevelFeeRequest" name="AdminListTopLevelFeeRequest"></wsdl:input>
      <wsdl:output message="tns:AdminListTopLevelFeeResponse" name="AdminListTopLevelFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizePayment">
      <wsdl:input message="tns:AuthorizePaymentRequest" name="AuthorizePaymentRequest"></wsdl:input>
      <wsdl:output message="tns:AuthorizePaymentResponse" name="AuthorizePaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateCaptureDraft">
      <wsdl:input message="tns:UpdateCaptureDraftRequest" name="UpdateCaptureDraftRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateCaptureDraftResponse" name="UpdateCaptureDraftResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentCommentList">
      <wsdl:input message="tns:GetEnrollmentCommentListRequest" name="GetEnrollmentCommentListRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentCommentListResponse" name="GetEnrollmentCommentListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftScheduleModifiableDates">
      <wsdl:input message="tns:GetDraftScheduleModifiableDatesRequest" name="GetDraftScheduleModifiableDatesRequest"></wsdl:input>
      <wsdl:output message="tns:GetDraftScheduleModifiableDatesResponse" name="GetDraftScheduleModifiableDatesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateRuleSetDefinition">
      <wsdl:input message="tns:UpdateRuleSetDefinitionRequest" name="UpdateRuleSetDefinitionRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateRuleSetDefinitionResponse" name="UpdateRuleSetDefinitionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeBasis">
      <wsdl:input message="tns:GetFeeBasisRequest" name="GetFeeBasisRequest"></wsdl:input>
      <wsdl:output message="tns:GetFeeBasisResponse" name="GetFeeBasisResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberPayee">
      <wsdl:input message="tns:CreateSubscriberPayeeRequest" name="CreateSubscriberPayeeRequest"></wsdl:input>
      <wsdl:output message="tns:CreateSubscriberPayeeResponse" name="CreateSubscriberPayeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="MakePhonePayment">
      <wsdl:input message="tns:MakePhonePaymentRequest" name="MakePhonePaymentRequest"></wsdl:input>
      <wsdl:output message="tns:MakePhonePaymentResponse" name="MakePhonePaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAdhocTransfer">
      <wsdl:input message="tns:UpdateAdhocTransferRequest" name="UpdateAdhocTransferRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateAdhocTransferResponse" name="UpdateAdhocTransferResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetExternalPayeeListByName">
      <wsdl:input message="tns:GetExternalPayeeListByNameRequest" name="GetExternalPayeeListByNameRequest"></wsdl:input>
      <wsdl:output message="tns:GetExternalPayeeListByNameResponse" name="GetExternalPayeeListByNameResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CancelEnrollment">
      <wsdl:input message="tns:CancelEnrollmentRequest" name="CancelEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:CancelEnrollmentResponse" name="CancelEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateHierarchy">
      <wsdl:input message="tns:GetAffiliateHierarchyRequest" name="GetAffiliateHierarchyRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateHierarchyResponse" name="GetAffiliateHierarchyResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ReactivateDraftSchedule">
      <wsdl:input message="tns:ReactivateDraftScheduleRequest" name="ReactivateDraftScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:ReactivateDraftScheduleResponse" name="ReactivateDraftScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSPAForecastList">
      <wsdl:input message="tns:GetSPAForecastListRequest" name="GetSPAForecastListRequest"></wsdl:input>
      <wsdl:output message="tns:GetSPAForecastListResponse" name="GetSPAForecastListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SuspendSettlement">
      <wsdl:input message="tns:SuspendSettlementRequest" name="SuspendSettlementRequest"></wsdl:input>
      <wsdl:output message="tns:SuspendSettlementResponse" name="SuspendSettlementResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeScheduleBasis">
      <wsdl:input message="tns:GetFeeScheduleBasisRequest" name="GetFeeScheduleBasisRequest"></wsdl:input>
      <wsdl:output message="tns:GetFeeScheduleBasisResponse" name="GetFeeScheduleBasisResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ChangePasswordForToken">
      <wsdl:input message="tns:ChangePasswordForTokenRequest" name="ChangePasswordForTokenRequest"></wsdl:input>
      <wsdl:output message="tns:ChangePasswordForTokenResponse" name="ChangePasswordForTokenResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePerformanceSettlementBasis">
      <wsdl:input message="tns:CreatePerformanceSettlementBasisRequest" name="CreatePerformanceSettlementBasisRequest"></wsdl:input>
      <wsdl:output message="tns:CreatePerformanceSettlementBasisResponse" name="CreatePerformanceSettlementBasisResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminActivateEnrollment">
      <wsdl:input message="tns:AdminActivateEnrollmentRequest" name="AdminActivateEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:AdminActivateEnrollmentResponse" name="AdminActivateEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPositivePayInquiries">
      <wsdl:input message="tns:GetPositivePayInquiriesRequest" name="GetPositivePayInquiriesRequest"></wsdl:input>
      <wsdl:output message="tns:GetPositivePayInquiriesResponse" name="GetPositivePayInquiriesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetUserById">
      <wsdl:input message="tns:GetUserByIdRequest" name="GetUserByIdRequest"></wsdl:input>
      <wsdl:output message="tns:GetUserByIdResponse" name="GetUserByIdResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetInternalUserList">
      <wsdl:input message="tns:AdminGetInternalUserListRequest" name="AdminGetInternalUserListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetInternalUserListResponse" name="AdminGetInternalUserListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetReturnList">
      <wsdl:input message="tns:GetReturnListRequest" name="GetReturnListRequest"></wsdl:input>
      <wsdl:output message="tns:GetReturnListResponse" name="GetReturnListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAffiliate">
      <wsdl:input message="tns:CreateAffiliateRequest" name="CreateAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:CreateAffiliateResponse" name="CreateAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCplusClients">
      <wsdl:input message="tns:GetCplusClientsRequest" name="GetCplusClientsRequest"></wsdl:input>
      <wsdl:output message="tns:GetCplusClientsResponse" name="GetCplusClientsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateCoClient">
      <wsdl:input message="tns:UpdateCoClientRequest" name="UpdateCoClientRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateCoClientResponse" name="UpdateCoClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentError">
      <wsdl:input message="tns:CreateEnrollmentErrorRequest" name="CreateEnrollmentErrorRequest"></wsdl:input>
      <wsdl:output message="tns:CreateEnrollmentErrorResponse" name="CreateEnrollmentErrorResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetHierarchyAffiliateCommissionDist">
      <wsdl:input message="tns:GetHierarchyAffiliateCommissionDistRequest" name="GetHierarchyAffiliateCommissionDistRequest"></wsdl:input>
      <wsdl:output message="tns:GetHierarchyAffiliateCommissionDistResponse" name="GetHierarchyAffiliateCommissionDistResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateFeeItems">
      <wsdl:input message="tns:CreateFeeItemsRequest" name="CreateFeeItemsRequest"></wsdl:input>
      <wsdl:output message="tns:CreateFeeItemsResponse" name="CreateFeeItemsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="RejectPayment">
      <wsdl:input message="tns:RejectPaymentRequest" name="RejectPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:RejectPaymentResponse" name="RejectPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliate">
      <wsdl:input message="tns:GetAffiliateRequest" name="GetAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateResponse" name="GetAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftErrorList">
      <wsdl:input message="tns:GetDraftErrorListRequest" name="GetDraftErrorListRequest"></wsdl:input>
      <wsdl:output message="tns:GetDraftErrorListResponse" name="GetDraftErrorListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCaptureDraft">
      <wsdl:input message="tns:GetCaptureDraftRequest" name="GetCaptureDraftRequest"></wsdl:input>
      <wsdl:output message="tns:GetCaptureDraftResponse" name="GetCaptureDraftResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateInterClientTransfer">
      <wsdl:input message="tns:CreateInterClientTransferRequest" name="CreateInterClientTransferRequest"></wsdl:input>
      <wsdl:output message="tns:CreateInterClientTransferResponse" name="CreateInterClientTransferResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="DelayDraft">
      <wsdl:input message="tns:DelayDraftRequest" name="DelayDraftRequest"></wsdl:input>
      <wsdl:output message="tns:DelayDraftResponse" name="DelayDraftResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyLoanAmount">
      <wsdl:input message="tns:ModifyLoanAmountRequest" name="ModifyLoanAmountRequest"></wsdl:input>
      <wsdl:output message="tns:ModifyLoanAmountResponse" name="ModifyLoanAmountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SaveStatewiseFeeCap">
      <wsdl:input message="tns:SaveStatewiseFeeCapRequest" name="SaveStatewiseFeeCapRequest"></wsdl:input>
      <wsdl:output message="tns:SaveStatewiseFeeCapResponse" name="SaveStatewiseFeeCapResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetEnrollments">
      <wsdl:input message="tns:AdminGetEnrollmentsRequest" name="AdminGetEnrollmentsRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetEnrollmentsResponse" name="AdminGetEnrollmentsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientBankAccountList">
      <wsdl:input message="tns:GetClientBankAccountListRequest" name="GetClientBankAccountListRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientBankAccountListResponse" name="GetClientBankAccountListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateDraftSchedule">
      <wsdl:input message="tns:CreateDraftScheduleRequest" name="CreateDraftScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:CreateDraftScheduleResponse" name="CreateDraftScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePartialEnrollment">
      <wsdl:input message="tns:CreatePartialEnrollmentRequest" name="CreatePartialEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:CreatePartialEnrollmentResponse" name="CreatePartialEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSettlementCount">
      <wsdl:input message="tns:GetSettlementCountRequest" name="GetSettlementCountRequest"></wsdl:input>
      <wsdl:output message="tns:GetSettlementCountResponse" name="GetSettlementCountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSettlementApprovalList">
      <wsdl:input message="tns:GetSettlementApprovalListRequest" name="GetSettlementApprovalListRequest"></wsdl:input>
      <wsdl:output message="tns:GetSettlementApprovalListResponse" name="GetSettlementApprovalListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetTransactionList">
      <wsdl:input message="tns:AdminGetTransactionListRequest" name="AdminGetTransactionListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetTransactionListResponse" name="AdminGetTransactionListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="RevalidateAutoEnrollment">
      <wsdl:input message="tns:RevalidateAutoEnrollmentRequest" name="RevalidateAutoEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:RevalidateAutoEnrollmentResponse" name="RevalidateAutoEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CheckSdnMatch">
      <wsdl:input message="tns:CheckSdnMatchRequest" name="CheckSdnMatchRequest"></wsdl:input>
      <wsdl:output message="tns:CheckSdnMatchResponse" name="CheckSdnMatchResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAutoPayeeInfo">
      <wsdl:input message="tns:UpdateAutoPayeeInfoRequest" name="UpdateAutoPayeeInfoRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateAutoPayeeInfoResponse" name="UpdateAutoPayeeInfoResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetScheduleList">
      <wsdl:input message="tns:GetScheduleListRequest" name="GetScheduleListRequest"></wsdl:input>
      <wsdl:output message="tns:GetScheduleListResponse" name="GetScheduleListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateClients">
      <wsdl:input message="tns:GetAffiliateClientsRequest" name="GetAffiliateClientsRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateClientsResponse" name="GetAffiliateClientsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateInternalUser">
      <wsdl:input message="tns:AdminUpdateInternalUserRequest" name="AdminUpdateInternalUserRequest"></wsdl:input>
      <wsdl:output message="tns:AdminUpdateInternalUserResponse" name="AdminUpdateInternalUserResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentErrorList">
      <wsdl:input message="tns:GetEnrollmentErrorListRequest" name="GetEnrollmentErrorListRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentErrorListResponse" name="GetEnrollmentErrorListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPostedTransaction">
      <wsdl:input message="tns:GetPostedTransactionRequest" name="GetPostedTransactionRequest"></wsdl:input>
      <wsdl:output message="tns:GetPostedTransactionResponse" name="GetPostedTransactionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateSubscriber">
      <wsdl:input message="tns:AdminUpdateSubscriberRequest" name="AdminUpdateSubscriberRequest"></wsdl:input>
      <wsdl:output message="tns:AdminUpdateSubscriberResponse" name="AdminUpdateSubscriberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateDraftItems">
      <wsdl:input message="tns:UpdateDraftItemsRequest" name="UpdateDraftItemsRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateDraftItemsResponse" name="UpdateDraftItemsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSubscriberUser">
      <wsdl:input message="tns:UpdateSubscriberUserRequest" name="UpdateSubscriberUserRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateSubscriberUserResponse" name="UpdateSubscriberUserResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPartialEnrollment">
      <wsdl:input message="tns:GetPartialEnrollmentRequest" name="GetPartialEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:GetPartialEnrollmentResponse" name="GetPartialEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SaveAutoEnrollmentAffiliates">
      <wsdl:input message="tns:SaveAutoEnrollmentAffiliatesRequest" name="SaveAutoEnrollmentAffiliatesRequest"></wsdl:input>
      <wsdl:output message="tns:SaveAutoEnrollmentAffiliatesResponse" name="SaveAutoEnrollmentAffiliatesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSignatureDate">
      <wsdl:input message="tns:UpdateSignatureDateRequest" name="UpdateSignatureDateRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateSignatureDateResponse" name="UpdateSignatureDateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePositivePayList">
      <wsdl:input message="tns:CreatePositivePayListRequest" name="CreatePositivePayListRequest"></wsdl:input>
      <wsdl:output message="tns:CreatePositivePayListResponse" name="CreatePositivePayListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateList">
      <wsdl:input message="tns:GetAffiliateListRequest" name="GetAffiliateListRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateListResponse" name="GetAffiliateListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftScheduleListWithNextDate">
      <wsdl:input message="tns:GetDraftScheduleListWithNextDateRequest" name="GetDraftScheduleListWithNextDateRequest"></wsdl:input>
      <wsdl:output message="tns:GetDraftScheduleListWithNextDateResponse" name="GetDraftScheduleListWithNextDateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSettlementSchedule">
      <wsdl:input message="tns:CreateSettlementScheduleRequest" name="CreateSettlementScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:CreateSettlementScheduleResponse" name="CreateSettlementScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SkipPayment">
      <wsdl:input message="tns:SkipPaymentRequest" name="SkipPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:SkipPaymentResponse" name="SkipPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftScheduleList">
      <wsdl:input message="tns:GetDraftScheduleListRequest" name="GetDraftScheduleListRequest"></wsdl:input>
      <wsdl:output message="tns:GetDraftScheduleListResponse" name="GetDraftScheduleListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentDocument">
      <wsdl:input message="tns:GetEnrollmentDocumentRequest" name="GetEnrollmentDocumentRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentDocumentResponse" name="GetEnrollmentDocumentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateClientBankAccount">
      <wsdl:input message="tns:UpdateClientBankAccountRequest" name="UpdateClientBankAccountRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateClientBankAccountResponse" name="UpdateClientBankAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SendEmail">
      <wsdl:input message="tns:SendEmailRequest" name="SendEmailRequest"></wsdl:input>
      <wsdl:output message="tns:SendEmailResponse" name="SendEmailResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddReferralAffiliate">
      <wsdl:input message="tns:AddReferralAffiliateRequest" name="AddReferralAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:AddReferralAffiliateResponse" name="AddReferralAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetRuleSetDefinition">
      <wsdl:input message="tns:GetRuleSetDefinitionRequest" name="GetRuleSetDefinitionRequest"></wsdl:input>
      <wsdl:output message="tns:GetRuleSetDefinitionResponse" name="GetRuleSetDefinitionResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAutoEnrollment">
      <wsdl:input message="tns:CreateAutoEnrollmentRequest" name="CreateAutoEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:CreateAutoEnrollmentResponse" name="CreateAutoEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentComment">
      <wsdl:input message="tns:CreateEnrollmentCommentRequest" name="CreateEnrollmentCommentRequest"></wsdl:input>
      <wsdl:output message="tns:CreateEnrollmentCommentResponse" name="CreateEnrollmentCommentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeScheduleListBasis">
      <wsdl:input message="tns:GetFeeScheduleListBasisRequest" name="GetFeeScheduleListBasisRequest"></wsdl:input>
      <wsdl:output message="tns:GetFeeScheduleListBasisResponse" name="GetFeeScheduleListBasisResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberBankAccount">
      <wsdl:input message="tns:AdminGetSubscriberBankAccountRequest" name="AdminGetSubscriberBankAccountRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSubscriberBankAccountResponse" name="AdminGetSubscriberBankAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCheckNumber">
      <wsdl:input message="tns:GetCheckNumberRequest" name="GetCheckNumberRequest"></wsdl:input>
      <wsdl:output message="tns:GetCheckNumberResponse" name="GetCheckNumberResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ListSubscriberFee">
      <wsdl:input message="tns:ListSubscriberFeeRequest" name="ListSubscriberFeeRequest"></wsdl:input>
      <wsdl:output message="tns:ListSubscriberFeeResponse" name="ListSubscriberFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateChannelAttribute">
      <wsdl:input message="tns:CreateChannelAttributeRequest" name="CreateChannelAttributeRequest"></wsdl:input>
      <wsdl:output message="tns:CreateChannelAttributeResponse" name="CreateChannelAttributeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberDocument">
      <wsdl:input message="tns:AdminCreateSubscriberDocumentRequest" name="AdminCreateSubscriberDocumentRequest"></wsdl:input>
      <wsdl:output message="tns:AdminCreateSubscriberDocumentResponse" name="AdminCreateSubscriberDocumentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetOverriddenSubscriberFee">
      <wsdl:input message="tns:GetOverriddenSubscriberFeeRequest" name="GetOverriddenSubscriberFeeRequest"></wsdl:input>
      <wsdl:output message="tns:GetOverriddenSubscriberFeeResponse" name="GetOverriddenSubscriberFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientSettlementList">
      <wsdl:input message="tns:GetClientSettlementListRequest" name="GetClientSettlementListRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientSettlementListResponse" name="GetClientSettlementListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionProcessors">
      <wsdl:input message="tns:GetTransactionProcessorsRequest" name="GetTransactionProcessorsRequest"></wsdl:input>
      <wsdl:output message="tns:GetTransactionProcessorsResponse" name="GetTransactionProcessorsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientStatus">
      <wsdl:input message="tns:GetClientStatusRequest" name="GetClientStatusRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientStatusResponse" name="GetClientStatusResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateGroupEnrollmentAffiliate">
      <wsdl:input message="tns:CreateGroupEnrollmentAffiliateRequest" name="CreateGroupEnrollmentAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:CreateGroupEnrollmentAffiliateResponse" name="CreateGroupEnrollmentAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentDocumentList">
      <wsdl:input message="tns:GetEnrollmentDocumentListRequest" name="GetEnrollmentDocumentListRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentDocumentListResponse" name="GetEnrollmentDocumentListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ClientVerification">
      <wsdl:input message="tns:ClientVerificationRequest" name="ClientVerificationRequest"></wsdl:input>
      <wsdl:output message="tns:ClientVerificationResponse" name="ClientVerificationResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminViewEnrollment">
      <wsdl:input message="tns:AdminViewEnrollmentRequest" name="AdminViewEnrollmentRequest"></wsdl:input>
      <wsdl:output message="tns:AdminViewEnrollmentResponse" name="AdminViewEnrollmentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAffiliateUser">
      <wsdl:input message="tns:CreateAffiliateUserRequest" name="CreateAffiliateUserRequest"></wsdl:input>
      <wsdl:output message="tns:CreateAffiliateUserResponse" name="CreateAffiliateUserResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAffiliateDocument">
      <wsdl:input message="tns:UpdateAffiliateDocumentRequest" name="UpdateAffiliateDocumentRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateAffiliateDocumentResponse" name="UpdateAffiliateDocumentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateClient">
      <wsdl:input message="tns:CreateClientRequest" name="CreateClientRequest"></wsdl:input>
      <wsdl:output message="tns:CreateClientResponse" name="CreateClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateScheduleList">
      <wsdl:input message="tns:GetAffiliateScheduleListRequest" name="GetAffiliateScheduleListRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateScheduleListResponse" name="GetAffiliateScheduleListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAutoEnrollmentDetailFromStoneEagle">
      <wsdl:input message="tns:GetAutoEnrollmentDetailFromStoneEagleRequest" name="GetAutoEnrollmentDetailFromStoneEagleRequest"></wsdl:input>
      <wsdl:output message="tns:GetAutoEnrollmentDetailFromStoneEagleResponse" name="GetAutoEnrollmentDetailFromStoneEagleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Auth">
      <wsdl:input message="tns:AuthRequest" name="AuthRequest"></wsdl:input>
      <wsdl:output message="tns:AuthResponse" name="AuthResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CaptureDraft">
      <wsdl:input message="tns:CaptureDraftRequest" name="CaptureDraftRequest"></wsdl:input>
      <wsdl:output message="tns:CaptureDraftResponse" name="CaptureDraftResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateAffiliate">
      <wsdl:input message="tns:AdminCreateAffiliateRequest" name="AdminCreateAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:AdminCreateAffiliateResponse" name="AdminCreateAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndAcceptPayment">
      <wsdl:input message="tns:AuthorizeAndAcceptPaymentRequest" name="AuthorizeAndAcceptPaymentRequest"></wsdl:input>
      <wsdl:output message="tns:AuthorizeAndAcceptPaymentResponse" name="AuthorizeAndAcceptPaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAffiliate">
      <wsdl:input message="tns:UpdateAffiliateRequest" name="UpdateAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateAffiliateResponse" name="UpdateAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetNewPositivePayList">
      <wsdl:input message="tns:GetNewPositivePayListRequest" name="GetNewPositivePayListRequest"></wsdl:input>
      <wsdl:output message="tns:GetNewPositivePayListResponse" name="GetNewPositivePayListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateClient">
      <wsdl:input message="tns:UpdateClientRequest" name="UpdateClientRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateClientResponse" name="UpdateClientResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentChannelAttributeValuesList">
      <wsdl:input message="tns:GetEnrollmentChannelAttributeValuesListRequest" name="GetEnrollmentChannelAttributeValuesListRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentChannelAttributeValuesListResponse" name="GetEnrollmentChannelAttributeValuesListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberList">
      <wsdl:input message="tns:AdminGetSubscriberListRequest" name="AdminGetSubscriberListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSubscriberListResponse" name="AdminGetSubscriberListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UnlockAccount">
      <wsdl:input message="tns:UnlockAccountRequest" name="UnlockAccountRequest"></wsdl:input>
      <wsdl:output message="tns:UnlockAccountResponse" name="UnlockAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateAffiliate">
      <wsdl:input message="tns:AdminUpdateAffiliateRequest" name="AdminUpdateAffiliateRequest"></wsdl:input>
      <wsdl:output message="tns:AdminUpdateAffiliateResponse" name="AdminUpdateAffiliateResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSuscriberTemplateAsset">
      <wsdl:input message="tns:CreateSuscriberTemplateAssetRequest" name="CreateSuscriberTemplateAssetRequest"></wsdl:input>
      <wsdl:output message="tns:CreateSuscriberTemplateAssetResponse" name="CreateSuscriberTemplateAssetResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientBankAccount">
      <wsdl:input message="tns:GetClientBankAccountRequest" name="GetClientBankAccountRequest"></wsdl:input>
      <wsdl:output message="tns:GetClientBankAccountResponse" name="GetClientBankAccountResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminListSubscriberFee">
      <wsdl:input message="tns:AdminListSubscriberFeeRequest" name="AdminListSubscriberFeeRequest"></wsdl:input>
      <wsdl:output message="tns:AdminListSubscriberFeeResponse" name="AdminListSubscriberFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndAdvancePayment">
      <wsdl:input message="tns:AuthorizeAndAdvancePaymentRequest" name="AuthorizeAndAdvancePaymentRequest"></wsdl:input>
      <wsdl:output message="tns:AuthorizeAndAdvancePaymentResponse" name="AuthorizeAndAdvancePaymentResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateRuleSet">
      <wsdl:input message="tns:CreateRuleSetRequest" name="CreateRuleSetRequest"></wsdl:input>
      <wsdl:output message="tns:CreateRuleSetResponse" name="CreateRuleSetResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateRTPSettlementSchedule">
      <wsdl:input message="tns:CreateRTPSettlementScheduleRequest" name="CreateRTPSettlementScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:CreateRTPSettlementScheduleResponse" name="CreateRTPSettlementScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateRuleSet">
      <wsdl:input message="tns:UpdateRuleSetRequest" name="UpdateRuleSetRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateRuleSetResponse" name="UpdateRuleSetResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSPAMonthlyBalanceList">
      <wsdl:input message="tns:GetSPAMonthlyBalanceListRequest" name="GetSPAMonthlyBalanceListRequest"></wsdl:input>
      <wsdl:output message="tns:GetSPAMonthlyBalanceListResponse" name="GetSPAMonthlyBalanceListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPartialEnrollmentList">
      <wsdl:input message="tns:GetPartialEnrollmentListRequest" name="GetPartialEnrollmentListRequest"></wsdl:input>
      <wsdl:output message="tns:GetPartialEnrollmentListResponse" name="GetPartialEnrollmentListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="OverrideSubscriberFee">
      <wsdl:input message="tns:OverrideSubscriberFeeRequest" name="OverrideSubscriberFeeRequest"></wsdl:input>
      <wsdl:output message="tns:OverrideSubscriberFeeResponse" name="OverrideSubscriberFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SuspendFeeSchedule">
      <wsdl:input message="tns:SuspendFeeScheduleRequest" name="SuspendFeeScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:SuspendFeeScheduleResponse" name="SuspendFeeScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ListEnrollmentFee">
      <wsdl:input message="tns:ListEnrollmentFeeRequest" name="ListEnrollmentFeeRequest"></wsdl:input>
      <wsdl:output message="tns:ListEnrollmentFeeResponse" name="ListEnrollmentFeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberFees">
      <wsdl:input message="tns:AdminCreateSubscriberFeesRequest" name="AdminCreateSubscriberFeesRequest"></wsdl:input>
      <wsdl:output message="tns:AdminCreateSubscriberFeesResponse" name="AdminCreateSubscriberFeesResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentExceptionsList">
      <wsdl:input message="tns:GetEnrollmentExceptionsListRequest" name="GetEnrollmentExceptionsListRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentExceptionsListResponse" name="GetEnrollmentExceptionsListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="PopulateBiweeklyEnrollmentSchedule">
      <wsdl:input message="tns:PopulateBiweeklyEnrollmentScheduleRequest" name="PopulateBiweeklyEnrollmentScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:PopulateBiweeklyEnrollmentScheduleResponse" name="PopulateBiweeklyEnrollmentScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentPayee">
      <wsdl:input message="tns:GetEnrollmentPayeeRequest" name="GetEnrollmentPayeeRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentPayeeResponse" name="GetEnrollmentPayeeResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="InstantRemittance">
      <wsdl:input message="tns:InstantRemittanceRequest" name="InstantRemittanceRequest"></wsdl:input>
      <wsdl:output message="tns:InstantRemittanceResponse" name="InstantRemittanceResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionListByIds">
      <wsdl:input message="tns:GetTransactionListByIdsRequest" name="GetTransactionListByIdsRequest"></wsdl:input>
      <wsdl:output message="tns:GetTransactionListByIdsResponse" name="GetTransactionListByIdsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentTicketList">
      <wsdl:input message="tns:GetEnrollmentTicketListRequest" name="GetEnrollmentTicketListRequest"></wsdl:input>
      <wsdl:output message="tns:GetEnrollmentTicketListResponse" name="GetEnrollmentTicketListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateTransactionList">
      <wsdl:input message="tns:GetAffiliateTransactionListRequest" name="GetAffiliateTransactionListRequest"></wsdl:input>
      <wsdl:output message="tns:GetAffiliateTransactionListResponse" name="GetAffiliateTransactionListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeSchedule">
      <wsdl:input message="tns:GetFeeScheduleRequest" name="GetFeeScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:GetFeeScheduleResponse" name="GetFeeScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="VerifyIp">
      <wsdl:input message="tns:VerifyIpRequest" name="VerifyIpRequest"></wsdl:input>
      <wsdl:output message="tns:VerifyIpResponse" name="VerifyIpResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SkipDraft">
      <wsdl:input message="tns:SkipDraftRequest" name="SkipDraftRequest"></wsdl:input>
      <wsdl:output message="tns:SkipDraftResponse" name="SkipDraftResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSubscriberPartner">
      <wsdl:input message="tns:UpdateSubscriberPartnerRequest" name="UpdateSubscriberPartnerRequest"></wsdl:input>
      <wsdl:output message="tns:UpdateSubscriberPartnerResponse" name="UpdateSubscriberPartnerResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ReactivateFeeSchedule">
      <wsdl:input message="tns:ReactivateFeeScheduleRequest" name="ReactivateFeeScheduleRequest"></wsdl:input>
      <wsdl:output message="tns:ReactivateFeeScheduleResponse" name="ReactivateFeeScheduleResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateDraftItems">
      <wsdl:input message="tns:CreateDraftItemsRequest" name="CreateDraftItemsRequest"></wsdl:input>
      <wsdl:output message="tns:CreateDraftItemsResponse" name="CreateDraftItemsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateDepositItems">
      <wsdl:input message="tns:CreateDepositItemsRequest" name="CreateDepositItemsRequest"></wsdl:input>
      <wsdl:output message="tns:CreateDepositItemsResponse" name="CreateDepositItemsResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberDocumentList">
      <wsdl:input message="tns:AdminGetSubscriberDocumentListRequest" name="AdminGetSubscriberDocumentListRequest"></wsdl:input>
      <wsdl:output message="tns:AdminGetSubscriberDocumentListResponse" name="AdminGetSubscriberDocumentListResponse"></wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetResetPasswordToken">
      <wsdl:input message="tns:GetResetPasswordTokenRequest" name="GetResetPasswordTokenRequest"></wsdl:input>
      <wsdl:output message="tns:GetResetPasswordTokenResponse" name="GetResetPasswordTokenResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="npnSoap11" type="tns:npn">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="CreateSubscriberUser">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateSubscriberUserRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateSubscriberUserResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberPartner">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateSubscriberPartnerRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateSubscriberPartnerResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPositivePayList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPositivePayListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPositivePayListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriber">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminCreateSubscriberRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminCreateSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePaymentStatus">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdatePaymentStatusRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdatePaymentStatusResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SendReactivationCode">
      <soap:operation soapAction=""/>
      <wsdl:input name="SendReactivationCodeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SendReactivationCodeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberProcessorSetup">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSubscriberProcessorSetupRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSubscriberProcessorSetupResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePartialEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdatePartialEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdatePartialEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberAccounts">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSubscriberAccountsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSubscriberAccountsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentCount">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentCountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentCountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndAdjustPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AuthorizeAndAdjustPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AuthorizeAndAdjustPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTransactionListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTransactionListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateFeeSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateFeeScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateFeeScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSettlementSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateSettlementScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateSettlementScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateEnrollmentTicket">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateEnrollmentTicketRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateEnrollmentTicketResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ActivateSettlement">
      <soap:operation soapAction=""/>
      <wsdl:input name="ActivateSettlementRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ActivateSettlementResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateDraftSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateDraftScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateDraftScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberDetail">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSubscriberDetailRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSubscriberDetailResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClients">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateFeeBasis">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateFeeBasisRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateFeeBasisResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateDocumentList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateDocumentListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateDocumentListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ListTopLevelFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="ListTopLevelFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ListTopLevelFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberAffiliateConfigs">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSubscriberAffiliateConfigsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSubscriberAffiliateConfigsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetReferralAffiliateList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetReferralAffiliateListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetReferralAffiliateListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateApprovalAttempt">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateApprovalAttemptRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateApprovalAttemptResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberAffiliateConfigs">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateSubscriberAffiliateConfigsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateSubscriberAffiliateConfigsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSummaryScheduleList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSummaryScheduleListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSummaryScheduleListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateReturnSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateReturnScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateReturnScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="RemoveAffiliateDocument">
      <soap:operation soapAction=""/>
      <wsdl:input name="RemoveAffiliateDocumentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="RemoveAffiliateDocumentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePerformanceSettlement">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreatePerformanceSettlementRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreatePerformanceSettlementResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetReturnSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetReturnScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetReturnScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSettlementFees">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSettlementFeesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSettlementFeesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentAffiliateList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentAffiliateListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentAffiliateListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdatePaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdatePaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberPayeeListByName">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSubscriberPayeeListByNameRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSubscriberPayeeListByNameResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyLoanDueDate">
      <soap:operation soapAction=""/>
      <wsdl:input name="ModifyLoanDueDateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ModifyLoanDueDateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UploadDocument">
      <soap:operation soapAction=""/>
      <wsdl:input name="UploadDocumentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UploadDocumentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateFeeSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateFeeScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateFeeScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateChannelAttributeValue">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateChannelAttributeValueRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateChannelAttributeValueResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCancelReasonCodes">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetCancelReasonCodesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetCancelReasonCodesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentDocument">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateEnrollmentDocumentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateEnrollmentDocumentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdatePartialEnrollmentStatus">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdatePartialEnrollmentStatusRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdatePartialEnrollmentStatusResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetAffiliateList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetAffiliateListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetAffiliateListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetScheduleList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetScheduleListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetScheduleListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateEnrollmentError">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateEnrollmentErrorRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateEnrollmentErrorResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetBankList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetBankListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetBankListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAutoEnrollmentAffiliates">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateAutoEnrollmentAffiliatesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateAutoEnrollmentAffiliatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyHierarchyAffiliateCommissionDist">
      <soap:operation soapAction=""/>
      <wsdl:input name="ModifyHierarchyAffiliateCommissionDistRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ModifyHierarchyAffiliateCommissionDistResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAdhocTransfer">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateAdhocTransferRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateAdhocTransferResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAutoNPNFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateAutoNPNFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateAutoNPNFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetChildAffiliateList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetChildAffiliateListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetChildAffiliateListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyDraftSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="ModifyDraftScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ModifyDraftScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPositivePayDetails">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPositivePayDetailsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPositivePayDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberPayee">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSubscriberPayeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSubscriberPayeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientIds">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientIdsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetNonConformingDrafts">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetNonConformingDraftsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetNonConformingDraftsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAllOverriddenSubscriberFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAllOverriddenSubscriberFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAllOverriddenSubscriberFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateHierarchyAffiliateCommissionDist">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateHierarchyAffiliateCommissionDistRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateHierarchyAffiliateCommissionDistResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentDetails">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPaymentDetailsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPaymentDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSubscriberPayee">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateSubscriberPayeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateSubscriberPayeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SearchCFTPayees">
      <soap:operation soapAction=""/>
      <wsdl:input name="SearchCFTPayeesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SearchCFTPayeesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionDetails">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTransactionDetailsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTransactionDetailsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateClientBankAccount">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateClientBankAccountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateClientBankAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberPayeeList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSubscriberPayeeListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSubscriberPayeeListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetApprovalsById">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetApprovalsByIdRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetApprovalsByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SaveChannelAttributeValue">
      <soap:operation soapAction=""/>
      <wsdl:input name="SaveChannelAttributeValueRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SaveChannelAttributeValueResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeScheduleList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetFeeScheduleListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetFeeScheduleListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateInternalUser">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminCreateInternalUserRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminCreateInternalUserResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="MoveAffiliateHierarchy">
      <soap:operation soapAction=""/>
      <wsdl:input name="MoveAffiliateHierarchyRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="MoveAffiliateHierarchyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberBankAccountList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSubscriberBankAccountListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSubscriberBankAccountListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateFeeBasis">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateFeeBasisRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateFeeBasisResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetRuleSet">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetRuleSetRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetRuleSetResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePrenoteSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreatePrenoteScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreatePrenoteScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetNextSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetNextScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetNextScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetCFTBankAccountList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetCFTBankAccountListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetCFTBankAccountListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateApproval">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateApprovalRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateApprovalResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientSettlement">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientSettlementRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientSettlementResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberProcessorSetup">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminCreateSubscriberProcessorSetupRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminCreateSubscriberProcessorSetupResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberTemplateAssetById">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSubscriberTemplateAssetByIdRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSubscriberTemplateAssetByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClient">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetUnprocessedPostedTransactionList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetUnprocessedPostedTransactionListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetUnprocessedPostedTransactionListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminUpdateEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminUpdateEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientRTPSettlement">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientRTPSettlementRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientRTPSettlementResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetUserRolesList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetUserRolesListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetUserRolesListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentMonitorList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPaymentMonitorListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPaymentMonitorListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetDraftScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetDraftScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionMethods">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTransactionMethodsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTransactionMethodsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndLoadPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AuthorizeAndLoadPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AuthorizeAndLoadPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberStatewiseFeeCapList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSubscriberStatewiseFeeCapListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSubscriberStatewiseFeeCapListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDocumentById">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetDocumentByIdRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetDocumentByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientBalances">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientBalancesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientBalancesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SuspendDraftSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="SuspendDraftScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SuspendDraftScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetPostedTransactionList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetPostedTransactionListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetPostedTransactionListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateSubscriberFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminUpdateSubscriberFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminUpdateSubscriberFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPartnerList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPartnerListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPartnerListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetRuleSetList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetRuleSetListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetRuleSetListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetStatusEnumList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetStatusEnumListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetStatusEnumListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminRejectPostedTransaction">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminRejectPostedTransactionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminRejectPostedTransactionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPaymentListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPaymentListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateSubscriberFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateSubscriberFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberBankAccount">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminCreateSubscriberBankAccountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminCreateSubscriberBankAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetClients">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetClientsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetClientsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentTicket">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateEnrollmentTicketRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateEnrollmentTicketResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateHierarchyEnrollmentAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateHierarchyEnrollmentAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateHierarchyEnrollmentAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentTicket">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentTicketRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentTicketResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPaymentListOnPositivePay">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPaymentListOnPositivePayRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPaymentListOnPositivePayResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateUserList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateUserListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateUserListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateReturnSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateReturnScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateReturnScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateCoClient">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateCoClientRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateCoClientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ResetPassword">
      <soap:operation soapAction=""/>
      <wsdl:input name="ResetPasswordRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ResetPasswordResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateSubscriberBankAccount">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminUpdateSubscriberBankAccountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminUpdateSubscriberBankAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSettlementList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSettlementListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSettlementListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSubscriberUserList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSubscriberUserListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSubscriberUserListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDelayDraftChangedDates">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetDelayDraftChangedDatesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetDelayDraftChangedDatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCheckImage">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetCheckImageRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetCheckImageResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetTransferBankAccountList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetTransferBankAccountListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetTransferBankAccountListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminListTopLevelFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminListTopLevelFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminListTopLevelFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizePayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AuthorizePaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AuthorizePaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateCaptureDraft">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateCaptureDraftRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateCaptureDraftResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentCommentList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentCommentListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentCommentListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftScheduleModifiableDates">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetDraftScheduleModifiableDatesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetDraftScheduleModifiableDatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateRuleSetDefinition">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateRuleSetDefinitionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateRuleSetDefinitionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeBasis">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetFeeBasisRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetFeeBasisResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSubscriberPayee">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateSubscriberPayeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateSubscriberPayeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="MakePhonePayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="MakePhonePaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="MakePhonePaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAdhocTransfer">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateAdhocTransferRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateAdhocTransferResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetExternalPayeeListByName">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetExternalPayeeListByNameRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetExternalPayeeListByNameResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CancelEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="CancelEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CancelEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateHierarchy">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateHierarchyRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateHierarchyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ReactivateDraftSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="ReactivateDraftScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ReactivateDraftScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSPAForecastList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSPAForecastListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSPAForecastListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SuspendSettlement">
      <soap:operation soapAction=""/>
      <wsdl:input name="SuspendSettlementRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SuspendSettlementResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeScheduleBasis">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetFeeScheduleBasisRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetFeeScheduleBasisResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ChangePasswordForToken">
      <soap:operation soapAction=""/>
      <wsdl:input name="ChangePasswordForTokenRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ChangePasswordForTokenResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePerformanceSettlementBasis">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreatePerformanceSettlementBasisRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreatePerformanceSettlementBasisResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminActivateEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminActivateEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminActivateEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPositivePayInquiries">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPositivePayInquiriesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPositivePayInquiriesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetUserById">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetUserByIdRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetUserByIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetInternalUserList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetInternalUserListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetInternalUserListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetReturnList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetReturnListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetReturnListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCplusClients">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetCplusClientsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetCplusClientsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateCoClient">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateCoClientRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateCoClientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentError">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateEnrollmentErrorRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateEnrollmentErrorResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetHierarchyAffiliateCommissionDist">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetHierarchyAffiliateCommissionDistRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetHierarchyAffiliateCommissionDistResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateFeeItems">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateFeeItemsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateFeeItemsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="RejectPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="RejectPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="RejectPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftErrorList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetDraftErrorListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetDraftErrorListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCaptureDraft">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetCaptureDraftRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetCaptureDraftResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateInterClientTransfer">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateInterClientTransferRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateInterClientTransferResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="DelayDraft">
      <soap:operation soapAction=""/>
      <wsdl:input name="DelayDraftRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="DelayDraftResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ModifyLoanAmount">
      <soap:operation soapAction=""/>
      <wsdl:input name="ModifyLoanAmountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ModifyLoanAmountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SaveStatewiseFeeCap">
      <soap:operation soapAction=""/>
      <wsdl:input name="SaveStatewiseFeeCapRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SaveStatewiseFeeCapResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetEnrollments">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetEnrollmentsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetEnrollmentsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientBankAccountList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientBankAccountListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientBankAccountListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateDraftSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateDraftScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateDraftScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePartialEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreatePartialEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreatePartialEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSettlementCount">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSettlementCountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSettlementCountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSettlementApprovalList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSettlementApprovalListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSettlementApprovalListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetTransactionList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetTransactionListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetTransactionListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="RevalidateAutoEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="RevalidateAutoEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="RevalidateAutoEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CheckSdnMatch">
      <soap:operation soapAction=""/>
      <wsdl:input name="CheckSdnMatchRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CheckSdnMatchResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAutoPayeeInfo">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateAutoPayeeInfoRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateAutoPayeeInfoResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetScheduleList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetScheduleListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetScheduleListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateClients">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateClientsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateClientsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateInternalUser">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminUpdateInternalUserRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminUpdateInternalUserResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentErrorList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentErrorListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentErrorListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPostedTransaction">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPostedTransactionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPostedTransactionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateSubscriber">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminUpdateSubscriberRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminUpdateSubscriberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateDraftItems">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateDraftItemsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateDraftItemsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSubscriberUser">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateSubscriberUserRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateSubscriberUserResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPartialEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPartialEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPartialEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SaveAutoEnrollmentAffiliates">
      <soap:operation soapAction=""/>
      <wsdl:input name="SaveAutoEnrollmentAffiliatesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SaveAutoEnrollmentAffiliatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSignatureDate">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateSignatureDateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateSignatureDateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreatePositivePayList">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreatePositivePayListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreatePositivePayListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftScheduleListWithNextDate">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetDraftScheduleListWithNextDateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetDraftScheduleListWithNextDateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSettlementSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateSettlementScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateSettlementScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SkipPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="SkipPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SkipPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetDraftScheduleList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetDraftScheduleListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetDraftScheduleListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentDocument">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentDocumentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentDocumentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateClientBankAccount">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateClientBankAccountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateClientBankAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SendEmail">
      <soap:operation soapAction=""/>
      <wsdl:input name="SendEmailRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SendEmailResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AddReferralAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="AddReferralAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AddReferralAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetRuleSetDefinition">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetRuleSetDefinitionRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetRuleSetDefinitionResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAutoEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateAutoEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateAutoEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateEnrollmentComment">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateEnrollmentCommentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateEnrollmentCommentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeScheduleListBasis">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetFeeScheduleListBasisRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetFeeScheduleListBasisResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberBankAccount">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSubscriberBankAccountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSubscriberBankAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetCheckNumber">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetCheckNumberRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetCheckNumberResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ListSubscriberFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="ListSubscriberFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ListSubscriberFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateChannelAttribute">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateChannelAttributeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateChannelAttributeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberDocument">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminCreateSubscriberDocumentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminCreateSubscriberDocumentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetOverriddenSubscriberFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetOverriddenSubscriberFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetOverriddenSubscriberFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientSettlementList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientSettlementListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientSettlementListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionProcessors">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTransactionProcessorsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTransactionProcessorsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientStatus">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientStatusRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientStatusResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateGroupEnrollmentAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateGroupEnrollmentAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateGroupEnrollmentAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentDocumentList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentDocumentListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentDocumentListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ClientVerification">
      <soap:operation soapAction=""/>
      <wsdl:input name="ClientVerificationRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ClientVerificationResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminViewEnrollment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminViewEnrollmentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminViewEnrollmentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateAffiliateUser">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateAffiliateUserRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateAffiliateUserResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAffiliateDocument">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateAffiliateDocumentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateAffiliateDocumentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateClient">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateClientRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateClientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateScheduleList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateScheduleListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateScheduleListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAutoEnrollmentDetailFromStoneEagle">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAutoEnrollmentDetailFromStoneEagleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAutoEnrollmentDetailFromStoneEagleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="Auth">
      <soap:operation soapAction=""/>
      <wsdl:input name="AuthRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AuthResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CaptureDraft">
      <soap:operation soapAction=""/>
      <wsdl:input name="CaptureDraftRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CaptureDraftResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminCreateAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminCreateAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndAcceptPayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AuthorizeAndAcceptPaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AuthorizeAndAcceptPaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetNewPositivePayList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetNewPositivePayListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetNewPositivePayListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateClient">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateClientRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateClientResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentChannelAttributeValuesList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentChannelAttributeValuesListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentChannelAttributeValuesListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSubscriberListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSubscriberListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UnlockAccount">
      <soap:operation soapAction=""/>
      <wsdl:input name="UnlockAccountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UnlockAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminUpdateAffiliate">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminUpdateAffiliateRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminUpdateAffiliateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateSuscriberTemplateAsset">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateSuscriberTemplateAssetRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateSuscriberTemplateAssetResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetClientBankAccount">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetClientBankAccountRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetClientBankAccountResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminListSubscriberFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminListSubscriberFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminListSubscriberFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AuthorizeAndAdvancePayment">
      <soap:operation soapAction=""/>
      <wsdl:input name="AuthorizeAndAdvancePaymentRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AuthorizeAndAdvancePaymentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateRuleSet">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateRuleSetRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateRuleSetResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateRTPSettlementSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateRTPSettlementScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateRTPSettlementScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateRuleSet">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateRuleSetRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateRuleSetResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetSPAMonthlyBalanceList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetSPAMonthlyBalanceListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetSPAMonthlyBalanceListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetPartialEnrollmentList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetPartialEnrollmentListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetPartialEnrollmentListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="OverrideSubscriberFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="OverrideSubscriberFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="OverrideSubscriberFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SuspendFeeSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="SuspendFeeScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SuspendFeeScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ListEnrollmentFee">
      <soap:operation soapAction=""/>
      <wsdl:input name="ListEnrollmentFeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ListEnrollmentFeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminCreateSubscriberFees">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminCreateSubscriberFeesRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminCreateSubscriberFeesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentExceptionsList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentExceptionsListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentExceptionsListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="PopulateBiweeklyEnrollmentSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="PopulateBiweeklyEnrollmentScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="PopulateBiweeklyEnrollmentScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentPayee">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentPayeeRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentPayeeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="InstantRemittance">
      <soap:operation soapAction=""/>
      <wsdl:input name="InstantRemittanceRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="InstantRemittanceResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetTransactionListByIds">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetTransactionListByIdsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetTransactionListByIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetEnrollmentTicketList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetEnrollmentTicketListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetEnrollmentTicketListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetAffiliateTransactionList">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetAffiliateTransactionListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetAffiliateTransactionListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetFeeSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetFeeScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetFeeScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="VerifyIp">
      <soap:operation soapAction=""/>
      <wsdl:input name="VerifyIpRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="VerifyIpResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="SkipDraft">
      <soap:operation soapAction=""/>
      <wsdl:input name="SkipDraftRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="SkipDraftResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="UpdateSubscriberPartner">
      <soap:operation soapAction=""/>
      <wsdl:input name="UpdateSubscriberPartnerRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="UpdateSubscriberPartnerResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="ReactivateFeeSchedule">
      <soap:operation soapAction=""/>
      <wsdl:input name="ReactivateFeeScheduleRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="ReactivateFeeScheduleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateDraftItems">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateDraftItemsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateDraftItemsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="CreateDepositItems">
      <soap:operation soapAction=""/>
      <wsdl:input name="CreateDepositItemsRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="CreateDepositItemsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="AdminGetSubscriberDocumentList">
      <soap:operation soapAction=""/>
      <wsdl:input name="AdminGetSubscriberDocumentListRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="AdminGetSubscriberDocumentListResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="GetResetPasswordToken">
      <soap:operation soapAction=""/>
      <wsdl:input name="GetResetPasswordTokenRequest">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="GetResetPasswordTokenResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="npnService">
    <wsdl:port binding="tns:npnSoap11" name="npnSoap11">
      <soap:address location="http://qaws-1615244660.us-east-1.elb.amazonaws.com:8080/wsrv/services"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://qaws-1615244660.us-east-1.elb.amazonaws.com:8080/wsrv/services</con:endpoint><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="ActivateSettlement" bindingOperationName="ActivateSettlement" type="Request-Response" outputName="ActivateSettlementResponse" inputName="ActivateSettlementRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ActivateSettlementRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:settlementId>?</mes:settlementId>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
      </mes:ActivateSettlementRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ActivateSettlementRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AddReferralAffiliate" bindingOperationName="AddReferralAffiliate" type="Request-Response" outputName="AddReferralAffiliateResponse" inputName="AddReferralAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AddReferralAffiliateRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliateType>?</mes:affiliateType>
         <mes:referralAffiliateId>?</mes:referralAffiliateId>
         <mes:referralAffiliateType>?</mes:referralAffiliateType>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <mes:cycle1Amount>?</mes:cycle1Amount>
         <mes:cycle2Amount>?</mes:cycle2Amount>
      </mes:AddReferralAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AddReferralAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminActivateEnrollment" bindingOperationName="AdminActivateEnrollment" type="Request-Response" outputName="AdminActivateEnrollmentResponse" inputName="AdminActivateEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminActivateEnrollmentRequest>
         <mes:enrollmentId>?</mes:enrollmentId>
      </mes:AdminActivateEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminActivateEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminCreateAffiliate" bindingOperationName="AdminCreateAffiliate" type="Request-Response" outputName="AdminCreateAffiliateResponse" inputName="AdminCreateAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminCreateAffiliateRequest>
         <mes:affiliate>
            <!--You may enter the following 54 items in any order-->
            <typ:subscriberId>?</typ:subscriberId>
            <!--Optional:-->
            <typ:externalAffiliateId>?</typ:externalAffiliateId>
            <!--Optional:-->
            <typ:parentAffiliateId>?</typ:parentAffiliateId>
            <!--Optional:-->
            <typ:parentExternalAffiliateId>?</typ:parentExternalAffiliateId>
            <typ:affiliateType>?</typ:affiliateType>
            <typ:name>?</typ:name>
            <typ:address1>?</typ:address1>
            <!--Optional:-->
            <typ:address2>?</typ:address2>
            <typ:city>?</typ:city>
            <typ:state>?</typ:state>
            <typ:zipcode>?</typ:zipcode>
            <typ:email>?</typ:email>
            <typ:phone>?</typ:phone>
            <!--Optional:-->
            <typ:fax>?</typ:fax>
            <typ:businessType>?</typ:businessType>
            <!--Optional:-->
            <typ:taxId>?</typ:taxId>
            <!--Optional:-->
            <typ:bankName>?</typ:bankName>
            <!--Optional:-->
            <typ:routingNunber>?</typ:routingNunber>
            <!--Optional:-->
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountNumber>?</typ:accountNumber>
            <!--Optional:-->
            <typ:holdersName>?</typ:holdersName>
            <!--Optional:-->
            <typ:bankAddress1>?</typ:bankAddress1>
            <!--Optional:-->
            <typ:bankAddress2>?</typ:bankAddress2>
            <!--Optional:-->
            <typ:bankCity>?</typ:bankCity>
            <!--Optional:-->
            <typ:bankState>?</typ:bankState>
            <!--Optional:-->
            <typ:bankZipcode>?</typ:bankZipcode>
            <typ:payoutMethod>ACH</typ:payoutMethod>
            <typ:payoutFrequency>MONTHLY</typ:payoutFrequency>
            <typ:payoutFrequencyValue>15</typ:payoutFrequencyValue>
            <typ:payoutThreshold>100</typ:payoutThreshold>
            <!--Optional:-->
            <typ:level>?</typ:level>
            <!--Optional:-->
            <typ:classification>?</typ:classification>
            <typ:isReferral>?</typ:isReferral>
            <!--Optional:-->
            <typ:referralStartDate>
               <typ:date format="?" value="?"/>
            </typ:referralStartDate>
            <!--Optional:-->
            <typ:referralEndDate>
               <typ:date format="?" value="?"/>
            </typ:referralEndDate>
            <typ:commStartDate>
               <typ:date format="?" value="?"/>
            </typ:commStartDate>
            <typ:commEndDate>
               <typ:date format="?" value="?"/>
            </typ:commEndDate>
            <typ:isAdvanceComm>?</typ:isAdvanceComm>
            <!--Optional:-->
            <typ:advanceCommPercentage>?</typ:advanceCommPercentage>
            <!--Optional:-->
            <typ:advanceCommStartDate>
               <typ:date format="?" value="?"/>
            </typ:advanceCommStartDate>
            <typ:enableRedirect>?</typ:enableRedirect>
            <!--Optional:-->
            <typ:redirectToType>?</typ:redirectToType>
            <!--Optional:-->
            <typ:redirectStartDate>
               <typ:date format="?" value="?"/>
            </typ:redirectStartDate>
            <!--Optional:-->
            <typ:redirectEndDate>
               <typ:date format="?" value="?"/>
            </typ:redirectEndDate>
            <!--Optional:-->
            <typ:redirectTo>?</typ:redirectTo>
            <typ:comments>?</typ:comments>
            <typ:signatureDate>
               <typ:date format="?" value="?"/>
            </typ:signatureDate>
            <typ:status>?</typ:status>
            <!--Optional:-->
            <typ:checkAddress>
               <!--You may enter the following 5 items in any order-->
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </typ:checkAddress>
            <!--Optional:-->
            <typ:fixed>
               <!--Zero or more repetitions:-->
               <typ:cycle>
                  <!--You may enter the following 3 items in any order-->
                  <typ:distType>?</typ:distType>
                  <typ:cycleId>?</typ:cycleId>
                  <typ:value>?</typ:value>
               </typ:cycle>
            </typ:fixed>
            <!--Optional:-->
            <typ:payoutRule>?</typ:payoutRule>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
            <!--Optional:-->
            <typ:isGuaranteed>?</typ:isGuaranteed>
            <!--Optional:-->
            <typ:isFlexyDrafts>?</typ:isFlexyDrafts>
         </mes:affiliate>
      </mes:AdminCreateAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminCreateAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminCreateInternalUser" bindingOperationName="AdminCreateInternalUser" type="Request-Response" outputName="AdminCreateInternalUserResponse" inputName="AdminCreateInternalUserRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminCreateInternalUserRequest>
         <!--You may enter the following 12 items in any order-->
         <!--Optional:-->
         <mes:subscriberIdList>
            <!--Zero or more repetitions:-->
            <mes:subscriberId>?</mes:subscriberId>
         </mes:subscriberIdList>
         <mes:firstName>?</mes:firstName>
         <mes:userName>?</mes:userName>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <mes:lastName>?</mes:lastName>
         <mes:email>?</mes:email>
         <mes:phone>?</mes:phone>
         <mes:password>?</mes:password>
         <mes:isActive>true</mes:isActive>
         <mes:rolePermissions>
            <!--1 or more repetitions:-->
            <typ:rolePermission>?</typ:rolePermission>
         </mes:rolePermissions>
         <mes:isIpValidationRequired>true</mes:isIpValidationRequired>
         <!--Optional:-->
         <mes:ipAddresses>
            <!--1 or more repetitions:-->
            <typ:IpAddress>?</typ:IpAddress>
         </mes:ipAddresses>
      </mes:AdminCreateInternalUserRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminCreateInternalUserRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminCreateSubscriber" bindingOperationName="AdminCreateSubscriber" type="Request-Response" outputName="AdminCreateSubscriberResponse" inputName="AdminCreateSubscriberRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminCreateSubscriberRequest>
         <!--You may enter the following 17 items in any order-->
         <mes:subscriberName>?</mes:subscriberName>
         <mes:address1>?</mes:address1>
         <!--Optional:-->
         <mes:address2>?</mes:address2>
         <mes:city>?</mes:city>
         <mes:state>?</mes:state>
         <mes:zip>?</mes:zip>
         <mes:addressType>?</mes:addressType>
         <mes:commissionStructureName>?</mes:commissionStructureName>
         <mes:contactName>?</mes:contactName>
         <!--Optional:-->
         <mes:website>?</mes:website>
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:mobilePhone>?</mes:mobilePhone>
         <!--Optional:-->
         <mes:subscriberAbbreviation>?</mes:subscriberAbbreviation>
         <!--Optional:-->
         <mes:checkNumberStart>1000</mes:checkNumberStart>
         <mes:email>?</mes:email>
         <mes:vertical>?</mes:vertical>
         <!--Optional:-->
         <mes:internalUserList>
            <!--1 or more repetitions:-->
            <typ:internalUserId>?</typ:internalUserId>
         </mes:internalUserList>
      </mes:AdminCreateSubscriberRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminCreateSubscriberRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminCreateSubscriberBankAccount" bindingOperationName="AdminCreateSubscriberBankAccount" type="Request-Response" outputName="AdminCreateSubscriberBankAccountResponse" inputName="AdminCreateSubscriberBankAccountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminCreateSubscriberBankAccountRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:routingNumber>?</mes:routingNumber>
         <mes:accountType>?</mes:accountType>
         <mes:thresholdAmount>?</mes:thresholdAmount>
         <mes:accountNumber>?</mes:accountNumber>
         <mes:holdersName>?</mes:holdersName>
         <mes:subscriberAccountType>?</mes:subscriberAccountType>
      </mes:AdminCreateSubscriberBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminCreateSubscriberBankAccountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminCreateSubscriberDocument" bindingOperationName="AdminCreateSubscriberDocument" type="Request-Response" outputName="AdminCreateSubscriberDocumentResponse" inputName="AdminCreateSubscriberDocumentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminCreateSubscriberDocumentRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:base64EncodedContent>?</mes:base64EncodedContent>
         <mes:note>?</mes:note>
         <mes:name>?</mes:name>
         <mes:contentType>?</mes:contentType>
      </mes:AdminCreateSubscriberDocumentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminCreateSubscriberDocumentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminCreateSubscriberFees" bindingOperationName="AdminCreateSubscriberFees" type="Request-Response" outputName="AdminCreateSubscriberFeesResponse" inputName="AdminCreateSubscriberFeesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminCreateSubscriberFeesRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:fees>
            <!--1 or more repetitions:-->
            <typ:fee>
               <!--You may enter the following 8 items in any order-->
               <typ:feeId>?</typ:feeId>
               <!--Optional:-->
               <typ:externalFeeId>?</typ:externalFeeId>
               <typ:type>?</typ:type>
               <typ:name>?</typ:name>
               <typ:description>?</typ:description>
               <typ:required>?</typ:required>
               <typ:priority>?</typ:priority>
               <typ:amount>?</typ:amount>
            </typ:fee>
         </mes:fees>
      </mes:AdminCreateSubscriberFeesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminCreateSubscriberFeesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminCreateSubscriberProcessorSetup" bindingOperationName="AdminCreateSubscriberProcessorSetup" type="Request-Response" outputName="AdminCreateSubscriberProcessorSetupResponse" inputName="AdminCreateSubscriberProcessorSetupRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminCreateSubscriberProcessorSetupRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:transactionProcessors>
            <!--1 or more repetitions:-->
            <typ:transactionProcessor>
               <!--You may enter the following 2 items in any order-->
               <typ:transactionProcessorId>?</typ:transactionProcessorId>
               <typ:transactionProcessorType>?</typ:transactionProcessorType>
            </typ:transactionProcessor>
         </mes:transactionProcessors>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:AdminCreateSubscriberProcessorSetupRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminCreateSubscriberProcessorSetupRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetAffiliate" bindingOperationName="AdminGetAffiliate" type="Request-Response" outputName="AdminGetAffiliateResponse" inputName="AdminGetAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetAffiliateRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
      </mes:AdminGetAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetAffiliateList" bindingOperationName="AdminGetAffiliateList" type="Request-Response" outputName="AdminGetAffiliateListResponse" inputName="AdminGetAffiliateListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetAffiliateListRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:name>?</mes:name>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
         <!--Optional:-->
         <mes:affiliateType>?</mes:affiliateType>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:AdminGetAffiliateListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetAffiliateListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetCFTBankAccountList" bindingOperationName="AdminGetCFTBankAccountList" type="Request-Response" outputName="AdminGetCFTBankAccountListResponse" inputName="AdminGetCFTBankAccountListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetCFTBankAccountListRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:AdminGetCFTBankAccountListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetCFTBankAccountListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetClients" bindingOperationName="AdminGetClients" type="Request-Response" outputName="AdminGetClientsResponse" inputName="AdminGetClientsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetClientsRequest>
         <!--You may enter the following 27 items in any order-->
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:keyWord>?</mes:keyWord>
         <!--Optional:-->
         <mes:statuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:statuses>
         <!--Optional:-->
         <mes:spaStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:spaStatuses>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:phoneNumber>?</mes:phoneNumber>
         <!--Optional:-->
         <mes:addressLine1>?</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>?</mes:addressLine2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:loanNumber>?</mes:loanNumber>
         <!--Optional:-->
         <mes:lenderName>?</mes:lenderName>
         <!--Optional:-->
         <mes:VIN>?</mes:VIN>
         <!--Optional:-->
         <mes:routingNumber>?</mes:routingNumber>
         <!--Optional:-->
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:AdminGetClientsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetClientsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetEnrollments" bindingOperationName="AdminGetEnrollments" type="Request-Response" outputName="AdminGetEnrollmentsResponse" inputName="AdminGetEnrollmentsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetEnrollmentsRequest>
         <!--You may enter the following 16 items in any order-->
         <!--Optional:-->
         <mes:enrollmentIds>
            <!--Zero or more repetitions:-->
            <mes:enrollmentId>?</mes:enrollmentId>
         </mes:enrollmentIds>
         <!--Optional:-->
         <mes:subscriberIds>
            <!--Zero or more repetitions:-->
            <mes:subscriberId>?</mes:subscriberId>
         </mes:subscriberIds>
         <!--Optional:-->
         <mes:subscriberName>?</mes:subscriberName>
         <!--Optional:-->
         <mes:clientIds>
            <!--Zero or more repetitions:-->
            <typ:clientId>?</typ:clientId>
         </mes:clientIds>
         <!--Optional:-->
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:externalClientIds>
            <!--Zero or more repetitions:-->
            <mes:externalClientId>?</mes:externalClientId>
         </mes:externalClientIds>
         <!--Optional:-->
         <mes:enrollmentStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:enrollmentStatuses>
         <!--Optional:-->
         <mes:cipStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:cipStatuses>
         <!--Optional:-->
         <mes:ofacStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:ofacStatuses>
         <!--Optional:-->
         <mes:spaStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:spaStatuses>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:AdminGetEnrollmentsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetEnrollmentsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetInternalUserList" bindingOperationName="AdminGetInternalUserList" type="Request-Response" outputName="AdminGetInternalUserListResponse" inputName="AdminGetInternalUserListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetInternalUserListRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>?</typ:orderBy>
         </mes:orderBy>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:isActive>true</mes:isActive>
      </mes:AdminGetInternalUserListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetInternalUserListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetNonConformingDrafts" bindingOperationName="AdminGetNonConformingDrafts" type="Request-Response" outputName="AdminGetNonConformingDraftsResponse" inputName="AdminGetNonConformingDraftsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetNonConformingDraftsRequest>
         <!--You may enter the following 3 items in any order-->
         <!--Optional:-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:AdminGetNonConformingDraftsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetNonConformingDraftsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetPostedTransactionList" bindingOperationName="AdminGetPostedTransactionList" type="Request-Response" outputName="AdminGetPostedTransactionListResponse" inputName="AdminGetPostedTransactionListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetPostedTransactionListRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:postedTransactionStatus>?</mes:postedTransactionStatus>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
      </mes:AdminGetPostedTransactionListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetPostedTransactionListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetScheduleList" bindingOperationName="AdminGetScheduleList" type="Request-Response" outputName="AdminGetScheduleListResponse" inputName="AdminGetScheduleListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetScheduleListRequest>
         <!--You may enter the following 13 items in any order-->
         <!--Optional:-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <mes:transactionClasses>
            <!--1 or more repetitions:-->
            <typ:transactionClass>?</typ:transactionClass>
         </mes:transactionClasses>
         <!--Optional:-->
         <mes:transactionMethods>
            <!--Zero or more repetitions:-->
            <typ:transactionMethod>?</typ:transactionMethod>
         </mes:transactionMethods>
         <!--Optional:-->
         <mes:showRfee>false</mes:showRfee>
      </mes:AdminGetScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetScheduleListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSettlementFees" bindingOperationName="AdminGetSettlementFees" type="Request-Response" outputName="AdminGetSettlementFeesResponse" inputName="AdminGetSettlementFeesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSettlementFeesRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:settlementId>?</mes:settlementId>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:AdminGetSettlementFeesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSettlementFeesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSettlementList" bindingOperationName="AdminGetSettlementList" type="Request-Response" outputName="AdminGetSettlementListResponse" inputName="AdminGetSettlementListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSettlementListRequest>
         <!--You may enter the following 7 items in any order-->
         <!--Optional:-->
         <mes:subscriberName>?</mes:subscriberName>
         <!--Optional:-->
         <mes:clientName>?</mes:clientName>
         <!--Optional:-->
         <mes:settlementStatus>?</mes:settlementStatus>
         <!--Optional:-->
         <mes:approvalStatus>?</mes:approvalStatus>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:AdminGetSettlementListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSettlementListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSubscriberAccounts" bindingOperationName="AdminGetSubscriberAccounts" type="Request-Response" outputName="AdminGetSubscriberAccountsResponse" inputName="AdminGetSubscriberAccountsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSubscriberAccountsRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberAccountId>?</mes:subscriberAccountId>
      </mes:AdminGetSubscriberAccountsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSubscriberAccountsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSubscriberBankAccount" bindingOperationName="AdminGetSubscriberBankAccount" type="Request-Response" outputName="AdminGetSubscriberBankAccountResponse" inputName="AdminGetSubscriberBankAccountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSubscriberBankAccountRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberBankAccountId>?</mes:subscriberBankAccountId>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:AdminGetSubscriberBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSubscriberBankAccountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSubscriberBankAccountList" bindingOperationName="AdminGetSubscriberBankAccountList" type="Request-Response" outputName="AdminGetSubscriberBankAccountListResponse" inputName="AdminGetSubscriberBankAccountListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSubscriberBankAccountListRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
      </mes:AdminGetSubscriberBankAccountListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSubscriberBankAccountListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSubscriberDetail" bindingOperationName="AdminGetSubscriberDetail" type="Request-Response" outputName="AdminGetSubscriberDetailResponse" inputName="AdminGetSubscriberDetailRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSubscriberDetailRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:AdminGetSubscriberDetailRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSubscriberDetailRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSubscriberDocumentList" bindingOperationName="AdminGetSubscriberDocumentList" type="Request-Response" outputName="AdminGetSubscriberDocumentListResponse" inputName="AdminGetSubscriberDocumentListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSubscriberDocumentListRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:AdminGetSubscriberDocumentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSubscriberDocumentListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSubscriberList" bindingOperationName="AdminGetSubscriberList" type="Request-Response" outputName="AdminGetSubscriberListResponse" inputName="AdminGetSubscriberListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSubscriberListRequest>
         <!--You may enter the following 8 items in any order-->
         <!--Optional:-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:userId>?</mes:userId>
         <!--Optional:-->
         <mes:name>?</mes:name>
         <!--Optional:-->
         <mes:contactName>?</mes:contactName>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:orderBy>
            <!--Optional:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:AdminGetSubscriberListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSubscriberListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetSubscriberProcessorSetup" bindingOperationName="AdminGetSubscriberProcessorSetup" type="Request-Response" outputName="AdminGetSubscriberProcessorSetupResponse" inputName="AdminGetSubscriberProcessorSetupRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetSubscriberProcessorSetupRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:AdminGetSubscriberProcessorSetupRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetSubscriberProcessorSetupRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetTransactionList" bindingOperationName="AdminGetTransactionList" type="Request-Response" outputName="AdminGetTransactionListResponse" inputName="AdminGetTransactionListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetTransactionListRequest>
         <!--You may enter the following 10 items in any order-->
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:AdminGetTransactionListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetTransactionListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminGetTransferBankAccountList" bindingOperationName="AdminGetTransferBankAccountList" type="Request-Response" outputName="AdminGetTransferBankAccountListResponse" inputName="AdminGetTransferBankAccountListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminGetTransferBankAccountListRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:AdminGetTransferBankAccountListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminGetTransferBankAccountListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminListSubscriberFee" bindingOperationName="AdminListSubscriberFee" type="Request-Response" outputName="AdminListSubscriberFeeResponse" inputName="AdminListSubscriberFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminListSubscriberFeeRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:owner>?</mes:owner>
         <!--Optional:-->
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:order>
            <!--Optional:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <!--Optional:-->
         <mes:pageNo>1</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>10</mes:resultsPerPage>
         <!--Optional:-->
         <mes:includeDeleted>false</mes:includeDeleted>
      </mes:AdminListSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminListSubscriberFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminListTopLevelFee" bindingOperationName="AdminListTopLevelFee" type="Request-Response" outputName="AdminListTopLevelFeeResponse" inputName="AdminListTopLevelFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminListTopLevelFeeRequest>
         <!--Optional:-->
         <mes:type>?</mes:type>
      </mes:AdminListTopLevelFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminListTopLevelFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminRejectPostedTransaction" bindingOperationName="AdminRejectPostedTransaction" type="Request-Response" outputName="AdminRejectPostedTransactionResponse" inputName="AdminRejectPostedTransactionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminRejectPostedTransactionRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:postedTransactionId>?</mes:postedTransactionId>
         <mes:confirmationCode>?</mes:confirmationCode>
      </mes:AdminRejectPostedTransactionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminRejectPostedTransactionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminUpdateAffiliate" bindingOperationName="AdminUpdateAffiliate" type="Request-Response" outputName="AdminUpdateAffiliateResponse" inputName="AdminUpdateAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminUpdateAffiliateRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliate>
            <!--You may enter the following 44 items in any order-->
            <!--Optional:-->
            <typ:externalAffiliateId>?</typ:externalAffiliateId>
            <!--Optional:-->
            <typ:parentAffiliateId>?</typ:parentAffiliateId>
            <!--Optional:-->
            <typ:affiliateType>?</typ:affiliateType>
            <!--Optional:-->
            <typ:name>?</typ:name>
            <!--Optional:-->
            <typ:address1>?</typ:address1>
            <!--Optional:-->
            <typ:address2>?</typ:address2>
            <!--Optional:-->
            <typ:city>?</typ:city>
            <!--Optional:-->
            <typ:state>?</typ:state>
            <!--Optional:-->
            <typ:zipcode>?</typ:zipcode>
            <!--Optional:-->
            <typ:email>?</typ:email>
            <!--Optional:-->
            <typ:phone>?</typ:phone>
            <!--Optional:-->
            <typ:fax>?</typ:fax>
            <!--Optional:-->
            <typ:businessType>?</typ:businessType>
            <!--Optional:-->
            <typ:taxId>?</typ:taxId>
            <!--Optional:-->
            <typ:routingNunber>?</typ:routingNunber>
            <!--Optional:-->
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountNumber>?</typ:accountNumber>
            <!--Optional:-->
            <typ:holdersName>?</typ:holdersName>
            <!--Optional:-->
            <typ:payoutMethod>?</typ:payoutMethod>
            <!--Optional:-->
            <typ:payoutFrequency>?</typ:payoutFrequency>
            <!--Optional:-->
            <typ:payoutFrequencyValue>?</typ:payoutFrequencyValue>
            <!--Optional:-->
            <typ:payoutThreshold>?</typ:payoutThreshold>
            <!--Optional:-->
            <typ:level>?</typ:level>
            <!--Optional:-->
            <typ:classification>?</typ:classification>
            <!--Optional:-->
            <typ:isReferral>?</typ:isReferral>
            <!--Optional:-->
            <typ:referralStartDate>
               <typ:date format="?" value="?"/>
            </typ:referralStartDate>
            <!--Optional:-->
            <typ:referralEndDate>
               <typ:date format="?" value="?"/>
            </typ:referralEndDate>
            <!--Optional:-->
            <typ:commStartDate>
               <typ:date format="?" value="?"/>
            </typ:commStartDate>
            <!--Optional:-->
            <typ:commEndDate>
               <typ:date format="?" value="?"/>
            </typ:commEndDate>
            <!--Optional:-->
            <typ:isAdvanceComm>?</typ:isAdvanceComm>
            <!--Optional:-->
            <typ:advanceCommPercentage>?</typ:advanceCommPercentage>
            <!--Optional:-->
            <typ:advanceCommStartDate>
               <typ:date format="?" value="?"/>
            </typ:advanceCommStartDate>
            <!--Optional:-->
            <typ:enableRedirect>?</typ:enableRedirect>
            <!--Optional:-->
            <typ:redirectToType>?</typ:redirectToType>
            <!--Optional:-->
            <typ:redirectStartDate>
               <typ:date format="?" value="?"/>
            </typ:redirectStartDate>
            <!--Optional:-->
            <typ:redirectEndDate>
               <typ:date format="?" value="?"/>
            </typ:redirectEndDate>
            <!--Optional:-->
            <typ:redirectTo>?</typ:redirectTo>
            <!--Optional:-->
            <typ:comments>?</typ:comments>
            <!--Optional:-->
            <typ:signatureDate>
               <typ:date format="?" value="?"/>
            </typ:signatureDate>
            <!--Optional:-->
            <typ:status>?</typ:status>
            <!--Optional:-->
            <typ:checkAddress>
               <!--You may enter the following 5 items in any order-->
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </typ:checkAddress>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
            <!--Optional:-->
            <typ:isGuaranteed>?</typ:isGuaranteed>
            <!--Optional:-->
            <typ:isFlexyDrafts>?</typ:isFlexyDrafts>
         </mes:affiliate>
      </mes:AdminUpdateAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminUpdateAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminUpdateEnrollment" bindingOperationName="AdminUpdateEnrollment" type="Request-Response" outputName="AdminUpdateEnrollmentResponse" inputName="AdminUpdateEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminUpdateEnrollmentRequest>
         <!--You may enter the following 14 items in any order-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <!--Optional:-->
         <mes:enrollDate>
            <typ:date format="?" value="?"/>
         </mes:enrollDate>
         <!--Optional:-->
         <mes:verticalId>?</mes:verticalId>
         <!--Optional:-->
         <mes:isSvaCreated>?</mes:isSvaCreated>
         <!--Optional:-->
         <mes:areAllDocumentSigned>?</mes:areAllDocumentSigned>
         <!--Optional:-->
         <mes:systemId>?</mes:systemId>
         <!--Optional:-->
         <mes:spaaApprovalRequired>?</mes:spaaApprovalRequired>
         <!--Optional:-->
         <mes:draftAmount>?</mes:draftAmount>
         <!--Optional:-->
         <mes:mostRecentAction>?</mes:mostRecentAction>
         <!--Optional:-->
         <mes:enrollmentStatus>?</mes:enrollmentStatus>
         <!--Optional:-->
         <mes:cipStatus>?</mes:cipStatus>
         <!--Optional:-->
         <mes:ofacStatus>?</mes:ofacStatus>
         <!--Optional:-->
         <mes:spaStatus>?</mes:spaStatus>
         <!--Optional:-->
         <mes:spaRejectReason>?</mes:spaRejectReason>
      </mes:AdminUpdateEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminUpdateEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminUpdateInternalUser" bindingOperationName="AdminUpdateInternalUser" type="Request-Response" outputName="AdminUpdateInternalUserResponse" inputName="AdminUpdateInternalUserRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminUpdateInternalUserRequest>
         <!--You may enter the following 15 items in any order-->
         <!--Optional:-->
         <mes:subscriberIdList>
            <!--Zero or more repetitions:-->
            <mes:subscriberId>?</mes:subscriberId>
         </mes:subscriberIdList>
         <mes:userId>?</mes:userId>
         <mes:firstName>?</mes:firstName>
         <mes:userName>?</mes:userName>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastName>?</mes:lastName>
         <mes:email>?</mes:email>
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:password>?</mes:password>
         <!--Optional:-->
         <mes:existingPassword>?</mes:existingPassword>
         <mes:isActive>true</mes:isActive>
         <mes:isLocked>false</mes:isLocked>
         <mes:rolePermissions>
            <!--1 or more repetitions:-->
            <typ:rolePermission>?</typ:rolePermission>
         </mes:rolePermissions>
         <mes:isIpValidationRequired>true</mes:isIpValidationRequired>
         <!--Optional:-->
         <mes:ipAddresses>
            <!--1 or more repetitions:-->
            <typ:IpAddress>?</typ:IpAddress>
         </mes:ipAddresses>
      </mes:AdminUpdateInternalUserRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminUpdateInternalUserRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminUpdateSubscriber" bindingOperationName="AdminUpdateSubscriber" type="Request-Response" outputName="AdminUpdateSubscriberResponse" inputName="AdminUpdateSubscriberRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminUpdateSubscriberRequest>
         <!--You may enter the following 19 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:subscriberName>?</mes:subscriberName>
         <mes:address1>?</mes:address1>
         <!--Optional:-->
         <mes:address2>?</mes:address2>
         <mes:city>?</mes:city>
         <mes:state>?</mes:state>
         <mes:zip>?</mes:zip>
         <mes:addressType>?</mes:addressType>
         <mes:commissionStructureName>?</mes:commissionStructureName>
         <mes:contactName>?</mes:contactName>
         <!--Optional:-->
         <mes:website>?</mes:website>
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:mobilePhone>?</mes:mobilePhone>
         <!--Optional:-->
         <mes:subscriberAbbreviation>?</mes:subscriberAbbreviation>
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:subscriberStatus>?</mes:subscriberStatus>
         <mes:vertical>?</mes:vertical>
         <!--Optional:-->
         <mes:internalUserList>
            <!--1 or more repetitions:-->
            <typ:internalUserId>?</typ:internalUserId>
         </mes:internalUserList>
         <!--Optional:-->
         <mes:checkNumberStart>?</mes:checkNumberStart>
      </mes:AdminUpdateSubscriberRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminUpdateSubscriberRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminUpdateSubscriberBankAccount" bindingOperationName="AdminUpdateSubscriberBankAccount" type="Request-Response" outputName="AdminUpdateSubscriberBankAccountResponse" inputName="AdminUpdateSubscriberBankAccountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminUpdateSubscriberBankAccountRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:subscriberBankAccountId>?</mes:subscriberBankAccountId>
         <mes:routingNumber>?</mes:routingNumber>
         <mes:accountType>?</mes:accountType>
         <mes:thresholdAmount>?</mes:thresholdAmount>
         <mes:accountNumber>?</mes:accountNumber>
         <mes:holdersName>?</mes:holdersName>
         <mes:subscriberAccountType>?</mes:subscriberAccountType>
         <mes:subscriberAccountOverwrite>false</mes:subscriberAccountOverwrite>
      </mes:AdminUpdateSubscriberBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminUpdateSubscriberBankAccountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminUpdateSubscriberFee" bindingOperationName="AdminUpdateSubscriberFee" type="Request-Response" outputName="AdminUpdateSubscriberFeeResponse" inputName="AdminUpdateSubscriberFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminUpdateSubscriberFeeRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberFeeId>?</mes:subscriberFeeId>
         <!--Optional:-->
         <mes:externalFeeId>?</mes:externalFeeId>
         <mes:amount>?</mes:amount>
         <!--Optional:-->
         <mes:status>?</mes:status>
      </mes:AdminUpdateSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminUpdateSubscriberFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AdminViewEnrollment" bindingOperationName="AdminViewEnrollment" type="Request-Response" outputName="AdminViewEnrollmentResponse" inputName="AdminViewEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AdminViewEnrollmentRequest>
         <!--You may enter the following 3 items in any order-->
         <!--Optional:-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:AdminViewEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AdminViewEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="Auth" bindingOperationName="Auth" type="Request-Response" outputName="AuthResponse" inputName="AuthRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <mes:AuthRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:username>prasanth@bancbox.com</mes:username>
         <mes:password>abcd1234</mes:password>
         <!--Optional:-->
<!--         <mes:ipAddress>?</mes:ipAddress>-->
      </mes:AuthRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AuthorizeAndAcceptPayment" bindingOperationName="AuthorizeAndAcceptPayment" type="Request-Response" outputName="AuthorizeAndAcceptPaymentResponse" inputName="AuthorizeAndAcceptPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AuthorizeAndAcceptPaymentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:postedTransactionId>?</mes:postedTransactionId>
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
      </mes:AuthorizeAndAcceptPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthorizeAndAcceptPaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AuthorizeAndAdjustPayment" bindingOperationName="AuthorizeAndAdjustPayment" type="Request-Response" outputName="AuthorizeAndAdjustPaymentResponse" inputName="AuthorizeAndAdjustPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AuthorizeAndAdjustPaymentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:postedTransactionId>?</mes:postedTransactionId>
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
      </mes:AuthorizeAndAdjustPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthorizeAndAdjustPaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AuthorizeAndAdvancePayment" bindingOperationName="AuthorizeAndAdvancePayment" type="Request-Response" outputName="AuthorizeAndAdvancePaymentResponse" inputName="AuthorizeAndAdvancePaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AuthorizeAndAdvancePaymentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:postedTransactionId>?</mes:postedTransactionId>
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
      </mes:AuthorizeAndAdvancePaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthorizeAndAdvancePaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AuthorizeAndLoadPayment" bindingOperationName="AuthorizeAndLoadPayment" type="Request-Response" outputName="AuthorizeAndLoadPaymentResponse" inputName="AuthorizeAndLoadPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AuthorizeAndLoadPaymentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:postedTransactionId>?</mes:postedTransactionId>
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
      </mes:AuthorizeAndLoadPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthorizeAndLoadPaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="AuthorizePayment" bindingOperationName="AuthorizePayment" type="Request-Response" outputName="AuthorizePaymentResponse" inputName="AuthorizePaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:AuthorizePaymentRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:postedTransactionId>?</mes:postedTransactionId>
         <mes:scheduleId>?</mes:scheduleId>
         <mes:load>false</mes:load>
         <mes:adjust>false</mes:adjust>
         <mes:advance>false</mes:advance>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
      </mes:AuthorizePaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthorizePaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CancelEnrollment" bindingOperationName="CancelEnrollment" type="Request-Response" outputName="CancelEnrollmentResponse" inputName="CancelEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CancelEnrollmentRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:cancelReasonCode>?</mes:cancelReasonCode>
         <mes:cancelFeeAmt>?</mes:cancelFeeAmt>
         <!--Optional:-->
         <mes:comments>?</mes:comments>
         <mes:printCancelLetter>?</mes:printCancelLetter>
         <mes:waiveCancelFee>?</mes:waiveCancelFee>
         <mes:waivePendingFee>?</mes:waivePendingFee>
         <mes:cancelledBy>USER</mes:cancelledBy>
      </mes:CancelEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CancelEnrollmentRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CaptureDraft" bindingOperationName="CaptureDraft" type="Request-Response" outputName="CaptureDraftResponse" inputName="CaptureDraftRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CaptureDraftRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:recurringType>?</mes:recurringType>
         <!--Optional:-->
         <mes:recurringStartDate>
            <typ:date format="?" value="?"/>
         </mes:recurringStartDate>
         <!--Optional:-->
         <mes:recurringAmount1>?</mes:recurringAmount1>
         <!--Optional:-->
         <mes:recurringDay1>?</mes:recurringDay1>
         <!--Optional:-->
         <mes:recurringAmount2>?</mes:recurringAmount2>
         <!--Optional:-->
         <mes:recurringDay2>?</mes:recurringDay2>
         <!--Optional:-->
         <mes:lumpSumDate>
            <typ:date format="?" value="?"/>
         </mes:lumpSumDate>
         <!--Optional:-->
         <mes:lumpSumAmount>?</mes:lumpSumAmount>
         <mes:lumpSumOnly>false</mes:lumpSumOnly>
      </mes:CaptureDraftRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CaptureDraftRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ChangePasswordForToken" bindingOperationName="ChangePasswordForToken" type="Request-Response" outputName="ChangePasswordForTokenResponse" inputName="ChangePasswordForTokenRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ChangePasswordForTokenRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:token>?</mes:token>
         <!--Optional:-->
         <mes:newPassword>?</mes:newPassword>
      </mes:ChangePasswordForTokenRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ChangePasswordForTokenRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CheckSdnMatch" bindingOperationName="CheckSdnMatch" type="Request-Response" outputName="CheckSdnMatchResponse" inputName="CheckSdnMatchRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CheckSdnMatchRequest>
         <mes:individual>
            <!--Optional:-->
            <typ:firstName>?</typ:firstName>
            <!--Optional:-->
            <typ:lastName>?</typ:lastName>
         </mes:individual>
      </mes:CheckSdnMatchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CheckSdnMatchRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ClientVerification" bindingOperationName="ClientVerification" type="Request-Response" outputName="ClientVerificationResponse" inputName="ClientVerificationRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ClientVerificationRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:ClientVerificationRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ClientVerificationRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateAdhocTransfer" bindingOperationName="CreateAdhocTransfer" type="Request-Response" outputName="CreateAdhocTransferResponse" inputName="CreateAdhocTransferRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateAdhocTransferRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:scheduleDate>
            <typ:date format="?" value="?"/>
         </mes:scheduleDate>
         <mes:amount>?</mes:amount>
         <mes:fromAccount>
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountId>?</typ:accountId>
         </mes:fromAccount>
         <mes:toAccount>
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountId>?</typ:accountId>
         </mes:toAccount>
         <mes:comment>?</mes:comment>
      </mes:CreateAdhocTransferRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateAdhocTransferRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateAffiliate" bindingOperationName="CreateAffiliate" type="Request-Response" outputName="CreateAffiliateResponse" inputName="CreateAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateAffiliateRequest>
         <mes:affiliate>
            <!--You may enter the following 43 items in any order-->
            <typ:subscriberId>?</typ:subscriberId>
            <!--Optional:-->
            <typ:affiliateId>?</typ:affiliateId>
            <!--Optional:-->
            <typ:externalAffiliateId>?</typ:externalAffiliateId>
            <!--Optional:-->
            <typ:parentAffiliateId>?</typ:parentAffiliateId>
            <!--Optional:-->
            <typ:parentExternalAffiliateId>?</typ:parentExternalAffiliateId>
            <!--Optional:-->
            <typ:externalId>?</typ:externalId>
            <typ:affiliateType>?</typ:affiliateType>
            <typ:name>?</typ:name>
            <typ:address1>?</typ:address1>
            <!--Optional:-->
            <typ:address2>?</typ:address2>
            <typ:city>?</typ:city>
            <typ:state>?</typ:state>
            <typ:zipcode>?</typ:zipcode>
            <typ:email>?</typ:email>
            <typ:phone>?</typ:phone>
            <!--Optional:-->
            <typ:fax>?</typ:fax>
            <typ:businessType>?</typ:businessType>
            <!--Optional:-->
            <typ:taxId>?</typ:taxId>
            <!--Optional:-->
            <typ:payoutMethod>ACH</typ:payoutMethod>
            <!--Optional:-->
            <typ:payoutFrequency>MONTHLY</typ:payoutFrequency>
            <!--Optional:-->
            <typ:payoutFrequencyValue>15</typ:payoutFrequencyValue>
            <!--Optional:-->
            <typ:bankName>?</typ:bankName>
            <!--Optional:-->
            <typ:routingNunber>?</typ:routingNunber>
            <!--Optional:-->
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountNumber>?</typ:accountNumber>
            <!--Optional:-->
            <typ:holdersName>?</typ:holdersName>
            <!--Optional:-->
            <typ:bankAddress1>?</typ:bankAddress1>
            <!--Optional:-->
            <typ:bankAddress2>?</typ:bankAddress2>
            <!--Optional:-->
            <typ:bankCity>?</typ:bankCity>
            <!--Optional:-->
            <typ:bankState>?</typ:bankState>
            <!--Optional:-->
            <typ:bankZipcode>?</typ:bankZipcode>
            <!--Optional:-->
            <typ:signatureDate>
               <typ:date format="?" value="?"/>
            </typ:signatureDate>
            <!--Optional:-->
            <typ:status>?</typ:status>
            <!--Optional:-->
            <typ:collectedBalance>?</typ:collectedBalance>
            <!--Optional:-->
            <typ:pendingBalance>?</typ:pendingBalance>
            <!--Optional:-->
            <typ:isPaidAsAdvance>?</typ:isPaidAsAdvance>
            <!--Optional:-->
            <typ:checkAddress>
               <!--You may enter the following 5 items in any order-->
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </typ:checkAddress>
            <!--Optional:-->
            <typ:isReferral>?</typ:isReferral>
            <!--Optional:-->
            <typ:referralStartDate>
               <typ:date format="?" value="?"/>
            </typ:referralStartDate>
            <!--Optional:-->
            <typ:referralEndDate>
               <typ:date format="?" value="?"/>
            </typ:referralEndDate>
            <!--Optional:-->
            <typ:fixed>
               <!--Zero or more repetitions:-->
               <typ:cycle>
                  <!--You may enter the following 3 items in any order-->
                  <typ:distType>?</typ:distType>
                  <typ:cycleId>?</typ:cycleId>
                  <typ:value>?</typ:value>
               </typ:cycle>
            </typ:fixed>
            <!--Optional:-->
            <typ:payoutRule>?</typ:payoutRule>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
         </mes:affiliate>
      </mes:CreateAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateAffiliateUser" bindingOperationName="CreateAffiliateUser" type="Request-Response" outputName="CreateAffiliateUserResponse" inputName="CreateAffiliateUserRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateAffiliateUserRequest>
         <!--You may enter the following 21 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affilaiteId>?</mes:affilaiteId>
         <mes:firstName>?</mes:firstName>
         <mes:userName>?</mes:userName>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <mes:lastName>?</mes:lastName>
         <mes:email>?</mes:email>
         <mes:phone>?</mes:phone>
         <mes:password>?</mes:password>
         <!--Optional:-->
         <mes:addressLine1>?</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>?</mes:addressLine2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <mes:isActive>true</mes:isActive>
         <mes:rolePermissions>
            <!--1 or more repetitions:-->
            <typ:rolePermission>?</typ:rolePermission>
         </mes:rolePermissions>
         <mes:isIpValidationRequired>true</mes:isIpValidationRequired>
         <!--Optional:-->
         <mes:ipAddresses>
            <!--1 or more repetitions:-->
            <typ:IpAddress>?</typ:IpAddress>
         </mes:ipAddresses>
         <mes:userType>?</mes:userType>
         <mes:isWelcomeMailRequired>true</mes:isWelcomeMailRequired>
      </mes:CreateAffiliateUserRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateAffiliateUserRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateApprovalAttempt" bindingOperationName="CreateApprovalAttempt" type="Request-Response" outputName="CreateApprovalAttemptResponse" inputName="CreateApprovalAttemptRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateApprovalAttemptRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:approvalId>?</mes:approvalId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:approvalAttemptNote>?</mes:approvalAttemptNote>
         <mes:approvalAttemptMode>?</mes:approvalAttemptMode>
         <!--Optional:-->
         <mes:approvalAttemptDisposition>?</mes:approvalAttemptDisposition>
      </mes:CreateApprovalAttemptRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateApprovalAttemptRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateAutoEnrollment" bindingOperationName="CreateAutoEnrollment" type="Request-Response" outputName="CreateAutoEnrollmentResponse" inputName="CreateAutoEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateAutoEnrollmentRequest>
         <!--You may enter the following 16 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:agencyId>?</mes:agencyId>
         <!--Optional:-->
         <mes:agencyExternalId>?</mes:agencyExternalId>
         <!--Optional:-->
         <mes:dealerId>?</mes:dealerId>
         <!--Optional:-->
         <mes:dealerExternalId>?</mes:dealerExternalId>
         <!--Optional:-->
         <mes:fiMgrId>?</mes:fiMgrId>
         <!--Optional:-->
         <mes:fiMgrExternalId>?</mes:fiMgrExternalId>
         <!--Optional:-->
         <mes:externalId>?</mes:externalId>
         <mes:clientContactInfo>
            <!--You may enter the following 7 items in any order-->
            <typ:firstName>?</typ:firstName>
            <typ:lastName>?</typ:lastName>
            <typ:address>
               <!--You may enter the following 5 items in any order-->
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </typ:address>
            <!--Optional:-->
            <typ:ssn>?</typ:ssn>
            <!--Optional:-->
            <typ:birthDate>
               <typ:date format="?" value="?"/>
            </typ:birthDate>
            <!--Optional:-->
            <typ:phone>?</typ:phone>
            <!--Optional:-->
            <typ:email>?</typ:email>
         </mes:clientContactInfo>
         <mes:clientPaymentInfo>
            <!--You may enter the following 8 items in any order-->
            <!--Optional:-->
            <typ:loanNumber>?</typ:loanNumber>
            <typ:draftAmount>?</typ:draftAmount>
            <!--Optional:-->
            <typ:term>?</typ:term>
            <!--Optional:-->
            <typ:vin>?</typ:vin>
            <!--Optional:-->
            <typ:year>?</typ:year>
            <!--Optional:-->
            <typ:make>?</typ:make>
            <!--Optional:-->
            <typ:model>?</typ:model>
            <!--Optional:-->
            <typ:brand>?</typ:brand>
         </mes:clientPaymentInfo>
         <mes:lenderInfo>
            <!--You may enter the following 6 items in any order-->
            <!--Optional:-->
            <typ:payeeId>?</typ:payeeId>
            <!--Optional:-->
            <typ:addressId>?</typ:addressId>
            <!--Optional:-->
            <typ:name>?</typ:name>
            <!--Optional:-->
            <typ:phone>?</typ:phone>
            <!--Optional:-->
            <typ:address>
               <!--You may enter the following 5 items in any order-->
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </typ:address>
            <!--Optional:-->
            <typ:routingNumber>?</typ:routingNumber>
         </mes:lenderInfo>
         <mes:debitAuthorization>
            <!--You may enter the following 10 items in any order-->
            <!--Optional:-->
            <typ:phone>?</typ:phone>
            <!--Optional:-->
            <typ:accountName>?</typ:accountName>
            <!--Optional:-->
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountNumber>?</typ:accountNumber>
            <!--Optional:-->
            <typ:routingNumber>?</typ:routingNumber>
            <!--Optional:-->
            <typ:firstDebitDate>
               <typ:date format="?" value="?"/>
            </typ:firstDebitDate>
            <!--Optional:-->
            <typ:firstDebitAmount>?</typ:firstDebitAmount>
            <!--Optional:-->
            <typ:firstBiweeklyDebitDate>
               <typ:date format="?" value="?"/>
            </typ:firstBiweeklyDebitDate>
            <!--Optional:-->
            <typ:firstBiweeklyDebitAmount>?</typ:firstBiweeklyDebitAmount>
            <!--Optional:-->
            <typ:firstLoanDueDate>
               <typ:date format="?" value="?"/>
            </typ:firstLoanDueDate>
         </mes:debitAuthorization>
         <mes:acknowledgment>
            <!--You may enter the following 2 items in any order-->
            <!--Optional:-->
            <typ:signaturePresent>?</typ:signaturePresent>
            <!--Optional:-->
            <typ:signatureDate>
               <typ:date format="?" value="?"/>
            </typ:signatureDate>
         </mes:acknowledgment>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:loanType>?</mes:loanType>
         <!--Optional:-->
         <mes:isHalfDraft>false</mes:isHalfDraft>
      </mes:CreateAutoEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateAutoEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateAutoNPNFee" bindingOperationName="CreateAutoNPNFee" type="Request-Response" outputName="CreateAutoNPNFeeResponse" inputName="CreateAutoNPNFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateAutoNPNFeeRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:agencyId>?</mes:agencyId>
         <mes:cycle1Fee>?</mes:cycle1Fee>
         <mes:cycle2Fee>?</mes:cycle2Fee>
         <mes:cycle3Fee>?</mes:cycle3Fee>
         <mes:cycle4Fee>?</mes:cycle4Fee>
      </mes:CreateAutoNPNFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateAutoNPNFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateChannelAttribute" bindingOperationName="CreateChannelAttribute" type="Request-Response" outputName="CreateChannelAttributeResponse" inputName="CreateChannelAttributeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateChannelAttributeRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:channel>?</mes:channel>
         <mes:code>?</mes:code>
         <mes:name>?</mes:name>
         <mes:isRequired>?</mes:isRequired>
      </mes:CreateChannelAttributeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateChannelAttributeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateClient" bindingOperationName="CreateClient" type="Request-Response" outputName="CreateClientResponse" inputName="CreateClientRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:referralId type="RULESET" internal="YES">
            <typ:id>?</typ:id>
         </mes:referralId>
         <!--Optional:-->
         <mes:channelId>?</mes:channelId>
         <!--Optional:-->
         <mes:productId>?</mes:productId>
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="?" value="?"/>
         </mes:dob>
         <!--Optional:-->
         <mes:address1>?</mes:address1>
         <!--Optional:-->
         <mes:address2>?</mes:address2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:WorkNumber>?</mes:WorkNumber>
         <!--Optional:-->
         <mes:mobile>?</mes:mobile>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:userName>?</mes:userName>
         <mes:draftAmount>?</mes:draftAmount>
         <!--Optional:-->
         <mes:coClients>
            <!--Zero or more repetitions:-->
            <typ:coClient>
               <!--You may enter the following 9 items in any order-->
               <typ:firstname>?</typ:firstname>
               <!--Optional:-->
               <typ:middleInitial>?</typ:middleInitial>
               <typ:lastname>?</typ:lastname>
               <!--Optional:-->
               <typ:ssn>?</typ:ssn>
               <typ:dob>
                  <typ:date format="?" value="?"/>
               </typ:dob>
               <!--Optional:-->
               <typ:phone>?</typ:phone>
               <!--Optional:-->
               <typ:WorkNumber>?</typ:WorkNumber>
               <!--Optional:-->
               <typ:mobile>?</typ:mobile>
               <!--Optional:-->
               <typ:email>?</typ:email>
            </typ:coClient>
         </mes:coClients>
         <!--Optional:-->
         <mes:svaDocument>
            <!--You may enter the following 5 items in any order-->
            <typ:note>?</typ:note>
            <!--Optional:-->
            <typ:documentType>?</typ:documentType>
            <typ:base64EncodedContent>?</typ:base64EncodedContent>
            <typ:contentType>?</typ:contentType>
            <typ:documentName>?</typ:documentName>
         </mes:svaDocument>
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateClientBankAccount" bindingOperationName="CreateClientBankAccount" type="Request-Response" outputName="CreateClientBankAccountResponse" inputName="CreateClientBankAccountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateClientBankAccountRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:routingNumber>?</mes:routingNumber>
         <mes:accountType>?</mes:accountType>
         <mes:accountNumber>?</mes:accountNumber>
         <mes:holdersName>?</mes:holdersName>
         <!--Optional:-->
         <mes:externalBankId>?</mes:externalBankId>
      </mes:CreateClientBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientBankAccountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateCoClient" bindingOperationName="CreateCoClient" type="Request-Response" outputName="CreateCoClientResponse" inputName="CreateCoClientRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateCoClientRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:coClientFirstname>?</mes:coClientFirstname>
         <mes:coClientLastname>?</mes:coClientLastname>
         <!--Optional:-->
         <mes:coClientMiddleInitial>?</mes:coClientMiddleInitial>
         <!--Optional:-->
         <mes:coClientSsn>?</mes:coClientSsn>
         <mes:coClientDob>
            <typ:date format="?" value="?"/>
         </mes:coClientDob>
         <!--Optional:-->
         <mes:coClientPhone>?</mes:coClientPhone>
         <!--Optional:-->
         <mes:coClientWorkNumber>?</mes:coClientWorkNumber>
         <!--Optional:-->
         <mes:coClientMobile>?</mes:coClientMobile>
         <!--Optional:-->
         <mes:coClientEmail>?</mes:coClientEmail>
      </mes:CreateCoClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateCoClientRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateDepositItems" bindingOperationName="CreateDepositItems" type="Request-Response" outputName="CreateDepositItemsResponse" inputName="CreateDepositItemsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateDepositItemsRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:method>?</mes:method>
         <mes:scheduleFrequencyType>?</mes:scheduleFrequencyType>
         <mes:depositList>
            <!--1 or more repetitions:-->
            <typ:deposit>
               <!--You may enter the following 6 items in any order-->
               <typ:scheduleDate>
                  <typ:date format="?" value="?"/>
               </typ:scheduleDate>
               <typ:amount>?</typ:amount>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:comment>?</typ:comment>
               <!--Optional:-->
               <typ:remark>?</typ:remark>
               <!--Optional:-->
               <typ:allowDuplicates>false</typ:allowDuplicates>
            </typ:deposit>
         </mes:depositList>
         <!--Optional:-->
         <mes:subLoanActType>?</mes:subLoanActType>
      </mes:CreateDepositItemsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDepositItemsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateDraftItems" bindingOperationName="CreateDraftItems" type="Request-Response" outputName="CreateDraftItemsResponse" inputName="CreateDraftItemsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateDraftItemsRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:scheduleFrequencyType>?</mes:scheduleFrequencyType>
         <mes:scheduleList>
            <!--1 or more repetitions:-->
            <typ:schedule>
               <!--You may enter the following 7 items in any order-->
               <typ:scheduleDate>
                  <typ:date format="?" value="?"/>
               </typ:scheduleDate>
               <typ:amount>?</typ:amount>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:clientBankAccountId>?</typ:clientBankAccountId>
               <!--Optional:-->
               <typ:comment>?</typ:comment>
               <!--Optional:-->
               <typ:remark>?</typ:remark>
               <!--Optional:-->
               <typ:allowDuplicates>false</typ:allowDuplicates>
            </typ:schedule>
         </mes:scheduleList>
      </mes:CreateDraftItemsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDraftItemsRequest"/></con:call><con:call name="Request 2"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateDraftItemsRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:scheduleFrequencyType>?</mes:scheduleFrequencyType>
         <mes:scheduleList>
            <!--1 or more repetitions:-->
            <typ:schedule>
               <!--You may enter the following 7 items in any order-->
               <typ:scheduleDate>
                  <typ:date format="?" value="?"/>
               </typ:scheduleDate>
               <typ:amount>?</typ:amount>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:clientBankAccountId>?</typ:clientBankAccountId>
               <!--Optional:-->
               <typ:comment>?</typ:comment>
               <!--Optional:-->
               <typ:remark>?</typ:remark>
               <!--Optional:-->
               <typ:allowDuplicates>false</typ:allowDuplicates>
            </typ:schedule>
         </mes:scheduleList>
      </mes:CreateDraftItemsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDraftItemsRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateDraftSchedule" bindingOperationName="CreateDraftSchedule" type="Request-Response" outputName="CreateDraftScheduleResponse" inputName="CreateDraftScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateDraftScheduleRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientBankAccountId>?</mes:clientBankAccountId>
         <mes:amount>?</mes:amount>
         <mes:occurs>?</mes:occurs>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:remark>?</mes:remark>
         <!--Optional:-->
         <mes:allowDuplicates>false</mes:allowDuplicates>
      </mes:CreateDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDraftScheduleRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateEnrollmentComment" bindingOperationName="CreateEnrollmentComment" type="Request-Response" outputName="CreateEnrollmentCommentResponse" inputName="CreateEnrollmentCommentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateEnrollmentCommentRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalNoteId>?</mes:externalNoteId>
         <mes:note>?</mes:note>
         <!--Optional:-->
         <mes:documentType>?</mes:documentType>
         <!--Optional:-->
         <mes:base64EncodedContent>?</mes:base64EncodedContent>
         <!--Optional:-->
         <mes:contentType>?</mes:contentType>
         <!--Optional:-->
         <mes:documentName>?</mes:documentName>
      </mes:CreateEnrollmentCommentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateEnrollmentCommentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateEnrollmentDocument" bindingOperationName="CreateEnrollmentDocument" type="Request-Response" outputName="CreateEnrollmentDocumentResponse" inputName="CreateEnrollmentDocumentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateEnrollmentDocumentRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:note>?</mes:note>
         <!--Optional:-->
         <mes:documentType>?</mes:documentType>
         <mes:base64EncodedContent>?</mes:base64EncodedContent>
         <mes:contentType>?</mes:contentType>
         <mes:documentName>?</mes:documentName>
      </mes:CreateEnrollmentDocumentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateEnrollmentDocumentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateEnrollmentError" bindingOperationName="CreateEnrollmentError" type="Request-Response" outputName="CreateEnrollmentErrorResponse" inputName="CreateEnrollmentErrorRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateEnrollmentErrorRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:errorCode>?</mes:errorCode>
         <mes:reason>?</mes:reason>
      </mes:CreateEnrollmentErrorRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateEnrollmentErrorRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateEnrollmentTicket" bindingOperationName="CreateEnrollmentTicket" type="Request-Response" outputName="CreateEnrollmentTicketResponse" inputName="CreateEnrollmentTicketRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateEnrollmentTicketRequest>
         <!--You may enter the following 15 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:transactionId>?</mes:transactionId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <mes:ticketType>?</mes:ticketType>
         <!--Optional:-->
         <mes:ticketStatus>?</mes:ticketStatus>
         <mes:subject>?</mes:subject>
         <!--Optional:-->
         <mes:assigneeId>?</mes:assigneeId>
         <!--Optional:-->
         <mes:reviewDate>
            <typ:date format="?" value="?"/>
         </mes:reviewDate>
         <!--Optional:-->
         <mes:assosiatedAmount>?</mes:assosiatedAmount>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:message>?</mes:message>
         <!--Optional:-->
         <mes:referenceTicket>?</mes:referenceTicket>
      </mes:CreateEnrollmentTicketRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateEnrollmentTicketRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateFeeBasis" bindingOperationName="CreateFeeBasis" type="Request-Response" outputName="CreateFeeBasisResponse" inputName="CreateFeeBasisRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateFeeBasisRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:debtFeeInformation>
            <typ:originalDebt>?</typ:originalDebt>
            <typ:dscFeeBasis>
               <!--You have a CHOICE of the next 2 items at this level-->
               <typ:Percentage>?</typ:Percentage>
               <typ:Fixed>?</typ:Fixed>
            </typ:dscFeeBasis>
         </mes:debtFeeInformation>
         <!--Optional:-->
         <mes:numberOfTradeLines>?</mes:numberOfTradeLines>
         <!--Optional:-->
         <mes:tradeLines>
            <!--1 or more repetitions:-->
            <typ:tradeLine>
               <typ:tradeLineName>?</typ:tradeLineName>
               <typ:currentBalance>?</typ:currentBalance>
            </typ:tradeLine>
         </mes:tradeLines>
      </mes:CreateFeeBasisRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateFeeBasisRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateFeeItems" bindingOperationName="CreateFeeItems" type="Request-Response" outputName="CreateFeeItemsResponse" inputName="CreateFeeItemsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateFeeItemsRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:scheduleList>
            <!--1 or more repetitions:-->
            <typ:schedule>
               <!--You may enter the following 7 items in any order-->
               <typ:scheduleDate>
                  <typ:date format="?" value="?"/>
               </typ:scheduleDate>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:comment>?</typ:comment>
               <!--Optional:-->
               <typ:feeId>?</typ:feeId>
               <!--Optional:-->
               <typ:externalFeeId>?</typ:externalFeeId>
               <typ:amount>?</typ:amount>
               <!--Optional:-->
               <typ:remark>?</typ:remark>
            </typ:schedule>
         </mes:scheduleList>
      </mes:CreateFeeItemsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateFeeItemsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateFeeSchedule" bindingOperationName="CreateFeeSchedule" type="Request-Response" outputName="CreateFeeScheduleResponse" inputName="CreateFeeScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateFeeScheduleRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberFeeId>?</mes:subscriberFeeId>
         <mes:amount>?</mes:amount>
         <mes:occurs>?</mes:occurs>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:frequency>?</mes:frequency>
         <!--Optional:-->
         <mes:remark>?</mes:remark>
         <!--Optional:-->
         <mes:settlementId>?</mes:settlementId>
      </mes:CreateFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateFeeScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateGroupEnrollmentAffiliate" bindingOperationName="CreateGroupEnrollmentAffiliate" type="Request-Response" outputName="CreateGroupEnrollmentAffiliateResponse" inputName="CreateGroupEnrollmentAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateGroupEnrollmentAffiliateRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:subscriberId>?</mes:subscriberId>
         <mes:subscriberAffiliateGroupId>?</mes:subscriberAffiliateGroupId>
      </mes:CreateGroupEnrollmentAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateGroupEnrollmentAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateHierarchyAffiliateCommissionDist" bindingOperationName="CreateHierarchyAffiliateCommissionDist" type="Request-Response" outputName="CreateHierarchyAffiliateCommissionDistResponse" inputName="CreateHierarchyAffiliateCommissionDistRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateHierarchyAffiliateCommissionDistRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliateType>?</mes:affiliateType>
         <!--Optional:-->
         <mes:referalId>?</mes:referalId>
         <!--Optional:-->
         <mes:fixed>
            <typ:cycle>
               <!--You may enter the following 3 items in any order-->
               <typ:distType>?</typ:distType>
               <typ:cycleId>?</typ:cycleId>
               <typ:value>?</typ:value>
            </typ:cycle>
            <typ:cycle>
               <!--You may enter the following 3 items in any order-->
               <typ:distType>?</typ:distType>
               <typ:cycleId>?</typ:cycleId>
               <typ:value>?</typ:value>
            </typ:cycle>
         </mes:fixed>
         <!--Optional:-->
         <mes:dealerId>?</mes:dealerId>
         <!--Optional:-->
         <mes:payoutRule>?</mes:payoutRule>
      </mes:CreateHierarchyAffiliateCommissionDistRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateHierarchyAffiliateCommissionDistRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateHierarchyEnrollmentAffiliate" bindingOperationName="CreateHierarchyEnrollmentAffiliate" type="Request-Response" outputName="CreateHierarchyEnrollmentAffiliateResponse" inputName="CreateHierarchyEnrollmentAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateHierarchyEnrollmentAffiliateRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:subscriberId>?</mes:subscriberId>
         <mes:parentId>?</mes:parentId>
      </mes:CreateHierarchyEnrollmentAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateHierarchyEnrollmentAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateInterClientTransfer" bindingOperationName="CreateInterClientTransfer" type="Request-Response" outputName="CreateInterClientTransferResponse" inputName="CreateInterClientTransferRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateInterClientTransferRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:fromClientExternalId>?</mes:fromClientExternalId>
         <!--Optional:-->
         <mes:fromClientId>?</mes:fromClientId>
         <!--Optional:-->
         <mes:toClientExternalId>?</mes:toClientExternalId>
         <!--Optional:-->
         <mes:toClientId>?</mes:toClientId>
         <mes:amount>?</mes:amount>
         <mes:occurs>?</mes:occurs>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:remark>?</mes:remark>
         <!--Optional:-->
         <mes:allowDuplicates>false</mes:allowDuplicates>
      </mes:CreateInterClientTransferRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateInterClientTransferRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreatePartialEnrollment" bindingOperationName="CreatePartialEnrollment" type="Request-Response" outputName="CreatePartialEnrollmentResponse" inputName="CreatePartialEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreatePartialEnrollmentRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:partialEnrollmentInfo>
            <!--Optional:-->
            <typ:partialEnrollmentId>?</typ:partialEnrollmentId>
            <!--Optional:-->
            <typ:affiliatesInfo>
               <!--Zero or more repetitions:-->
               <typ:partialEnrollmentAffiliateInfo>
                  <typ:affiliateId>?</typ:affiliateId>
                  <typ:affiliateType>?</typ:affiliateType>
               </typ:partialEnrollmentAffiliateInfo>
            </typ:affiliatesInfo>
            <!--Optional:-->
            <typ:partnerId>?</typ:partnerId>
            <!--Optional:-->
            <typ:partner>
               <!--Optional:-->
               <typ:partnerId>?</typ:partnerId>
               <!--Optional:-->
               <typ:partnerName>?</typ:partnerName>
               <!--Optional:-->
               <typ:partnerAddress1>?</typ:partnerAddress1>
               <!--Optional:-->
               <typ:partnerAddress2>?</typ:partnerAddress2>
               <!--Optional:-->
               <typ:partnerCity>?</typ:partnerCity>
               <!--Optional:-->
               <typ:partnerState>?</typ:partnerState>
               <!--Optional:-->
               <typ:partnerZipcode>?</typ:partnerZipcode>
               <!--Optional:-->
               <typ:partnerPhone>?</typ:partnerPhone>
               <!--Optional:-->
               <typ:partnerEmail>?</typ:partnerEmail>
               <!--Optional:-->
               <typ:userName>?</typ:userName>
               <!--Optional:-->
               <typ:status>?</typ:status>
               <!--Optional:-->
               <typ:auditInformation>
                  <!--You may enter the following 6 items in any order-->
                  <typ:createdOn>
                     <typ:date format="?" value="?"/>
                  </typ:createdOn>
                  <typ:createdBy>?</typ:createdBy>
                  <typ:createdUserType>?</typ:createdUserType>
                  <typ:modifiedOn>
                     <typ:date format="?" value="?"/>
                  </typ:modifiedOn>
                  <typ:modifiedBy>?</typ:modifiedBy>
                  <typ:modifiedUserType>?</typ:modifiedUserType>
               </typ:auditInformation>
            </typ:partner>
            <!--Optional:-->
            <typ:affiliates>
               <!--Zero or more repetitions:-->
               <typ:partialEnrollmentAffiliates>
                  <!--You may enter the following 43 items in any order-->
                  <typ:subscriberId>?</typ:subscriberId>
                  <!--Optional:-->
                  <typ:affiliateId>?</typ:affiliateId>
                  <!--Optional:-->
                  <typ:externalAffiliateId>?</typ:externalAffiliateId>
                  <!--Optional:-->
                  <typ:parentAffiliateId>?</typ:parentAffiliateId>
                  <!--Optional:-->
                  <typ:parentExternalAffiliateId>?</typ:parentExternalAffiliateId>
                  <!--Optional:-->
                  <typ:externalId>?</typ:externalId>
                  <typ:affiliateType>?</typ:affiliateType>
                  <typ:name>?</typ:name>
                  <typ:address1>?</typ:address1>
                  <!--Optional:-->
                  <typ:address2>?</typ:address2>
                  <typ:city>?</typ:city>
                  <typ:state>?</typ:state>
                  <typ:zipcode>?</typ:zipcode>
                  <typ:email>?</typ:email>
                  <typ:phone>?</typ:phone>
                  <!--Optional:-->
                  <typ:fax>?</typ:fax>
                  <typ:businessType>?</typ:businessType>
                  <!--Optional:-->
                  <typ:taxId>?</typ:taxId>
                  <!--Optional:-->
                  <typ:payoutMethod>ACH</typ:payoutMethod>
                  <!--Optional:-->
                  <typ:payoutFrequency>MONTHLY</typ:payoutFrequency>
                  <!--Optional:-->
                  <typ:payoutFrequencyValue>15</typ:payoutFrequencyValue>
                  <!--Optional:-->
                  <typ:bankName>?</typ:bankName>
                  <!--Optional:-->
                  <typ:routingNunber>?</typ:routingNunber>
                  <!--Optional:-->
                  <typ:accountType>?</typ:accountType>
                  <!--Optional:-->
                  <typ:accountNumber>?</typ:accountNumber>
                  <!--Optional:-->
                  <typ:holdersName>?</typ:holdersName>
                  <!--Optional:-->
                  <typ:bankAddress1>?</typ:bankAddress1>
                  <!--Optional:-->
                  <typ:bankAddress2>?</typ:bankAddress2>
                  <!--Optional:-->
                  <typ:bankCity>?</typ:bankCity>
                  <!--Optional:-->
                  <typ:bankState>?</typ:bankState>
                  <!--Optional:-->
                  <typ:bankZipcode>?</typ:bankZipcode>
                  <!--Optional:-->
                  <typ:signatureDate>
                     <typ:date format="?" value="?"/>
                  </typ:signatureDate>
                  <!--Optional:-->
                  <typ:status>?</typ:status>
                  <!--Optional:-->
                  <typ:collectedBalance>?</typ:collectedBalance>
                  <!--Optional:-->
                  <typ:pendingBalance>?</typ:pendingBalance>
                  <!--Optional:-->
                  <typ:isPaidAsAdvance>?</typ:isPaidAsAdvance>
                  <!--Optional:-->
                  <typ:checkAddress>
                     <!--You may enter the following 5 items in any order-->
                     <!--Optional:-->
                     <typ:address1>?</typ:address1>
                     <!--Optional:-->
                     <typ:address2>?</typ:address2>
                     <!--Optional:-->
                     <typ:city>?</typ:city>
                     <!--Optional:-->
                     <typ:state>?</typ:state>
                     <!--Optional:-->
                     <typ:zip>?</typ:zip>
                  </typ:checkAddress>
                  <!--Optional:-->
                  <typ:isReferral>?</typ:isReferral>
                  <!--Optional:-->
                  <typ:referralStartDate>
                     <typ:date format="?" value="?"/>
                  </typ:referralStartDate>
                  <!--Optional:-->
                  <typ:referralEndDate>
                     <typ:date format="?" value="?"/>
                  </typ:referralEndDate>
                  <!--Optional:-->
                  <typ:fixed>
                     <!--Zero or more repetitions:-->
                     <typ:cycle>
                        <!--You may enter the following 3 items in any order-->
                        <typ:distType>?</typ:distType>
                        <typ:cycleId>?</typ:cycleId>
                        <typ:value>?</typ:value>
                     </typ:cycle>
                  </typ:fixed>
                  <!--Optional:-->
                  <typ:payoutRule>?</typ:payoutRule>
                  <!--Optional:-->
                  <typ:auditInformation>
                     <!--You may enter the following 6 items in any order-->
                     <typ:createdOn>
                        <typ:date format="?" value="?"/>
                     </typ:createdOn>
                     <typ:createdBy>?</typ:createdBy>
                     <typ:createdUserType>?</typ:createdUserType>
                     <typ:modifiedOn>
                        <typ:date format="?" value="?"/>
                     </typ:modifiedOn>
                     <typ:modifiedBy>?</typ:modifiedBy>
                     <typ:modifiedUserType>?</typ:modifiedUserType>
                  </typ:auditInformation>
               </typ:partialEnrollmentAffiliates>
            </typ:affiliates>
            <!--Optional:-->
            <typ:status>?</typ:status>
            <!--Optional:-->
            <typ:firstName>?</typ:firstName>
            <!--Optional:-->
            <typ:lastName>?</typ:lastName>
            <!--Optional:-->
            <typ:address1>?</typ:address1>
            <!--Optional:-->
            <typ:address2>?</typ:address2>
            <!--Optional:-->
            <typ:city>?</typ:city>
            <!--Optional:-->
            <typ:state>?</typ:state>
            <!--Optional:-->
            <typ:zipcode>?</typ:zipcode>
            <!--Optional:-->
            <typ:emailAddress>?</typ:emailAddress>
            <!--Optional:-->
            <typ:phoneNumber1>?</typ:phoneNumber1>
            <!--Optional:-->
            <typ:phoneNumber2>?</typ:phoneNumber2>
            <!--Optional:-->
            <typ:flex_1>?</typ:flex_1>
            <!--Optional:-->
            <typ:flex_2>?</typ:flex_2>
            <!--Optional:-->
            <typ:flex_3>?</typ:flex_3>
            <!--Optional:-->
            <typ:flex_4>?</typ:flex_4>
            <!--Optional:-->
            <typ:flex_5>?</typ:flex_5>
            <!--Optional:-->
            <typ:flex_6>?</typ:flex_6>
            <!--Optional:-->
            <typ:flex_7>?</typ:flex_7>
            <!--Optional:-->
            <typ:flex_8>?</typ:flex_8>
            <!--Optional:-->
            <typ:flex_9>?</typ:flex_9>
            <!--Optional:-->
            <typ:flex_10>?</typ:flex_10>
            <!--Optional:-->
            <typ:flex_11>?</typ:flex_11>
            <!--Optional:-->
            <typ:flex_12>?</typ:flex_12>
            <!--Optional:-->
            <typ:flex_13>?</typ:flex_13>
            <!--Optional:-->
            <typ:flex_14>?</typ:flex_14>
            <!--Optional:-->
            <typ:flex_15>?</typ:flex_15>
            <!--Optional:-->
            <typ:flex_16>?</typ:flex_16>
            <!--Optional:-->
            <typ:flex_17>?</typ:flex_17>
            <!--Optional:-->
            <typ:flex_18>?</typ:flex_18>
            <!--Optional:-->
            <typ:flex_19>?</typ:flex_19>
            <!--Optional:-->
            <typ:flex_20>?</typ:flex_20>
            <!--Optional:-->
            <typ:flex_21>?</typ:flex_21>
            <!--Optional:-->
            <typ:flex_22>?</typ:flex_22>
            <!--Optional:-->
            <typ:flex_23>?</typ:flex_23>
            <!--Optional:-->
            <typ:flex_24>?</typ:flex_24>
            <!--Optional:-->
            <typ:flex_25>?</typ:flex_25>
            <!--Optional:-->
            <typ:flex_26>?</typ:flex_26>
            <!--Optional:-->
            <typ:flex_27>?</typ:flex_27>
            <!--Optional:-->
            <typ:flex_28>?</typ:flex_28>
            <!--Optional:-->
            <typ:flex_29>?</typ:flex_29>
            <!--Optional:-->
            <typ:flex_30>?</typ:flex_30>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
         </mes:partialEnrollmentInfo>
      </mes:CreatePartialEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreatePartialEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreatePerformanceSettlement" bindingOperationName="CreatePerformanceSettlement" type="Request-Response" outputName="CreatePerformanceSettlementResponse" inputName="CreatePerformanceSettlementRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreatePerformanceSettlementRequest>
         <!--You may enter the following 20 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:payeeId>?</mes:payeeId>
         <!--Optional:-->
         <mes:payeeAddressId>?</mes:payeeAddressId>
         <!--Optional:-->
         <mes:PayeeExternalAddressId>?</mes:PayeeExternalAddressId>
         <!--Optional:-->
         <mes:payeeContactId>?</mes:payeeContactId>
         <!--Optional:-->
         <mes:payeeExternalContactId>?</mes:payeeExternalContactId>
         <!--Optional:-->
         <mes:payeeBankAccountId>?</mes:payeeBankAccountId>
         <!--Optional:-->
         <mes:PayeeBankExternalAccountId>?</mes:PayeeBankExternalAccountId>
         <mes:currentBalance>?</mes:currentBalance>
         <mes:settlementAmount>?</mes:settlementAmount>
         <!--Optional:-->
         <mes:settlementReference>?</mes:settlementReference>
         <!--Optional:-->
         <mes:numPayments>?</mes:numPayments>
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:negotiator>?</mes:negotiator>
         <mes:isApprovalRequired>true</mes:isApprovalRequired>
         <!--Optional:-->
         <mes:settlementPaymentList>
            <!--1 or more repetitions:-->
            <typ:settlementPayment scheduleId="?" operation="?">
               <!--You may enter the following 7 items in any order-->
               <typ:effectiveDate>
                  <typ:date format="?" value="?"/>
               </typ:effectiveDate>
               <typ:paymentAmount>?</typ:paymentAmount>
               <typ:payeeId>?</typ:payeeId>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:externalCheckNumber>?</typ:externalCheckNumber>
               <typ:transactionMethod>?</typ:transactionMethod>
               <!--Optional:-->
               <typ:associatedFeeList>
                  <!--1 or more repetitions:-->
                  <typ:associatedFee scheduleId="?" operation="?">
                     <!--You may enter the following 4 items in any order-->
                     <typ:amount>?</typ:amount>
                     <!--Optional:-->
                     <typ:feeId>?</typ:feeId>
                     <!--Optional:-->
                     <typ:externalFeeId>?</typ:externalFeeId>
                     <!--Optional:-->
                     <typ:effectiveDate>
                        <typ:date format="?" value="?"/>
                     </typ:effectiveDate>
                  </typ:associatedFee>
               </typ:associatedFeeList>
            </typ:settlementPayment>
         </mes:settlementPaymentList>
      </mes:CreatePerformanceSettlementRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreatePerformanceSettlementRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreatePerformanceSettlementBasis" bindingOperationName="CreatePerformanceSettlementBasis" type="Request-Response" outputName="CreatePerformanceSettlementBasisResponse" inputName="CreatePerformanceSettlementBasisRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreatePerformanceSettlementBasisRequest>
         <!--You may enter the following 20 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:payeeId>?</mes:payeeId>
         <!--Optional:-->
         <mes:payeeAddressId>?</mes:payeeAddressId>
         <!--Optional:-->
         <mes:PayeeExternalAddressId>?</mes:PayeeExternalAddressId>
         <!--Optional:-->
         <mes:payeeContactId>?</mes:payeeContactId>
         <!--Optional:-->
         <mes:payeeExternalContactId>?</mes:payeeExternalContactId>
         <!--Optional:-->
         <mes:payeeBankAccountId>?</mes:payeeBankAccountId>
         <!--Optional:-->
         <mes:PayeeBankExternalAccountId>?</mes:PayeeBankExternalAccountId>
         <mes:originalDebt>?</mes:originalDebt>
         <mes:settlementAmount>?</mes:settlementAmount>
         <!--Optional:-->
         <mes:settlementReference>?</mes:settlementReference>
         <!--Optional:-->
         <mes:numPayments>?</mes:numPayments>
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:negotiator>?</mes:negotiator>
         <mes:isApprovalRequired>true</mes:isApprovalRequired>
         <!--Optional:-->
         <mes:settlementPaymentList>
            <!--1 or more repetitions:-->
            <typ:settlementPayment scheduleId="?" operation="?">
               <!--You may enter the following 7 items in any order-->
               <typ:effectiveDate>
                  <typ:date format="?" value="?"/>
               </typ:effectiveDate>
               <typ:paymentAmount>?</typ:paymentAmount>
               <typ:payeeId>?</typ:payeeId>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:externalCheckNumber>?</typ:externalCheckNumber>
               <typ:transactionMethod>?</typ:transactionMethod>
               <!--Optional:-->
               <typ:associatedFeeList>
                  <!--1 or more repetitions:-->
                  <typ:associatedFee scheduleId="?" operation="?">
                     <!--You may enter the following 4 items in any order-->
                     <typ:amount>?</typ:amount>
                     <!--Optional:-->
                     <typ:feeId>?</typ:feeId>
                     <!--Optional:-->
                     <typ:externalFeeId>?</typ:externalFeeId>
                     <!--Optional:-->
                     <typ:effectiveDate>
                        <typ:date format="?" value="?"/>
                     </typ:effectiveDate>
                  </typ:associatedFee>
               </typ:associatedFeeList>
            </typ:settlementPayment>
         </mes:settlementPaymentList>
      </mes:CreatePerformanceSettlementBasisRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreatePerformanceSettlementBasisRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreatePositivePayList" bindingOperationName="CreatePositivePayList" type="Request-Response" outputName="CreatePositivePayListResponse" inputName="CreatePositivePayListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreatePositivePayListRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:expandUpTo>
            <typ:date format="?" value="?"/>
         </mes:expandUpTo>
         <mes:paymentIdList>
            <!--1 or more repetitions:-->
            <typ:paymentId>?</typ:paymentId>
         </mes:paymentIdList>
      </mes:CreatePositivePayListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreatePositivePayListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreatePrenoteSchedule" bindingOperationName="CreatePrenoteSchedule" type="Request-Response" outputName="CreatePrenoteScheduleResponse" inputName="CreatePrenoteScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreatePrenoteScheduleRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientBankAccountId>?</mes:clientBankAccountId>
         <mes:prenoteDate>
            <typ:date format="?" value="?"/>
         </mes:prenoteDate>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
      </mes:CreatePrenoteScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreatePrenoteScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateReturnSchedule" bindingOperationName="CreateReturnSchedule" type="Request-Response" outputName="CreateReturnScheduleResponse" inputName="CreateReturnScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateReturnScheduleRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:scheduleDate>
            <typ:date format="?" value="?"/>
         </mes:scheduleDate>
         <!--Optional:-->
         <mes:recoupFeeDate>
            <typ:date format="?" value="?"/>
         </mes:recoupFeeDate>
         <!--Optional:-->
         <mes:feeScheduleId>?</mes:feeScheduleId>
         <!--Optional:-->
         <mes:clientBankAccountId>?</mes:clientBankAccountId>
         <mes:amount>?</mes:amount>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <mes:transactionClass>?</mes:transactionClass>
         <mes:transactionMethod>?</mes:transactionMethod>
      </mes:CreateReturnScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateReturnScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateRTPSettlementSchedule" bindingOperationName="CreateRTPSettlementSchedule" type="Request-Response" outputName="CreateRTPSettlementScheduleResponse" inputName="CreateRTPSettlementScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateRTPSettlementScheduleRequest>
         <!--You may enter the following 21 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:payeeId>?</mes:payeeId>
         <mes:payeeName>?</mes:payeeName>
         <!--Optional:-->
         <mes:payeeAddressId>?</mes:payeeAddressId>
         <!--Optional:-->
         <mes:PayeeExternalAddressId>?</mes:PayeeExternalAddressId>
         <!--Optional:-->
         <mes:payeeContactId>?</mes:payeeContactId>
         <!--Optional:-->
         <mes:payeeExternalContactId>?</mes:payeeExternalContactId>
         <!--Optional:-->
         <mes:payeeBankAccountId>?</mes:payeeBankAccountId>
         <!--Optional:-->
         <mes:PayeeBankExternalAccountId>?</mes:PayeeBankExternalAccountId>
         <mes:currentBalance>?</mes:currentBalance>
         <mes:settlementAmount>?</mes:settlementAmount>
         <!--Optional:-->
         <mes:settlementReference>?</mes:settlementReference>
         <!--Optional:-->
         <mes:numPayments>?</mes:numPayments>
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:negotiator>?</mes:negotiator>
         <mes:isApprovalRequired>true</mes:isApprovalRequired>
         <!--Optional:-->
         <mes:settlementScheduleList>
            <!--1 or more repetitions:-->
            <typ:SettlementScheduleInfo scheduleId="?" operation="?">
               <!--You may enter the following 6 items in any order-->
               <typ:effectiveDate>
                  <typ:date format="?" value="?"/>
               </typ:effectiveDate>
               <typ:paymentAmount>?</typ:paymentAmount>
               <typ:payeeId>?</typ:payeeId>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:externalCheckNumber>?</typ:externalCheckNumber>
               <typ:transactionMethod>?</typ:transactionMethod>
            </typ:SettlementScheduleInfo>
         </mes:settlementScheduleList>
      </mes:CreateRTPSettlementScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateRTPSettlementScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateRuleSet" bindingOperationName="CreateRuleSet" type="Request-Response" outputName="CreateRuleSetResponse" inputName="CreateRuleSetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateRuleSetRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:name>?</mes:name>
         <!--Optional:-->
         <mes:externalRuleSetId>?</mes:externalRuleSetId>
      </mes:CreateRuleSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateRuleSetRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateSettlementSchedule" bindingOperationName="CreateSettlementSchedule" type="Request-Response" outputName="CreateSettlementScheduleResponse" inputName="CreateSettlementScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSettlementScheduleRequest>
         <!--You may enter the following 20 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:payeeId>?</mes:payeeId>
         <!--Optional:-->
         <mes:payeeAddressId>?</mes:payeeAddressId>
         <!--Optional:-->
         <mes:PayeeExternalAddressId>?</mes:PayeeExternalAddressId>
         <!--Optional:-->
         <mes:payeeContactId>?</mes:payeeContactId>
         <!--Optional:-->
         <mes:payeeExternalContactId>?</mes:payeeExternalContactId>
         <!--Optional:-->
         <mes:payeeBankAccountId>?</mes:payeeBankAccountId>
         <!--Optional:-->
         <mes:PayeeBankExternalAccountId>?</mes:PayeeBankExternalAccountId>
         <mes:currentBalance>?</mes:currentBalance>
         <mes:settlementAmount>?</mes:settlementAmount>
         <!--Optional:-->
         <mes:settlementReference>?</mes:settlementReference>
         <!--Optional:-->
         <mes:numPayments>?</mes:numPayments>
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:negotiator>?</mes:negotiator>
         <mes:isApprovalRequired>true</mes:isApprovalRequired>
         <!--Optional:-->
         <mes:settlementScheduleList>
            <!--1 or more repetitions:-->
            <typ:SettlementScheduleInfo scheduleId="?" operation="?">
               <!--You may enter the following 6 items in any order-->
               <typ:effectiveDate>
                  <typ:date format="?" value="?"/>
               </typ:effectiveDate>
               <typ:paymentAmount>?</typ:paymentAmount>
               <typ:payeeId>?</typ:payeeId>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:externalCheckNumber>?</typ:externalCheckNumber>
               <typ:transactionMethod>?</typ:transactionMethod>
            </typ:SettlementScheduleInfo>
         </mes:settlementScheduleList>
      </mes:CreateSettlementScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSettlementScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateSubscriberAffiliateConfigs" bindingOperationName="CreateSubscriberAffiliateConfigs" type="Request-Response" outputName="CreateSubscriberAffiliateConfigsResponse" inputName="CreateSubscriberAffiliateConfigsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSubscriberAffiliateConfigsRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:partnerId>?</mes:partnerId>
         <mes:affiliateConfigs>
            <!--1 or more repetitions:-->
            <mes:config>
               <mes:name>?</mes:name>
               <mes:value>?</mes:value>
            </mes:config>
         </mes:affiliateConfigs>
      </mes:CreateSubscriberAffiliateConfigsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberAffiliateConfigsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateSubscriberFee" bindingOperationName="CreateSubscriberFee" type="Request-Response" outputName="CreateSubscriberFeeResponse" inputName="CreateSubscriberFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSubscriberFeeRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:fee>
            <!--You may enter the following 9 items in any order-->
            <!--Optional:-->
            <typ:id>?</typ:id>
            <typ:feeId>?</typ:feeId>
            <!--Optional:-->
            <typ:externalFeeId>?</typ:externalFeeId>
            <typ:type>?</typ:type>
            <typ:name>?</typ:name>
            <typ:description>?</typ:description>
            <typ:required>?</typ:required>
            <typ:priority>?</typ:priority>
            <typ:amount>?</typ:amount>
         </mes:fee>
      </mes:CreateSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateSubscriberPartner" bindingOperationName="CreateSubscriberPartner" type="Request-Response" outputName="CreateSubscriberPartnerResponse" inputName="CreateSubscriberPartnerRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSubscriberPartnerRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:partner>
            <!--Optional:-->
            <typ:partnerId>?</typ:partnerId>
            <!--Optional:-->
            <typ:partnerName>?</typ:partnerName>
            <!--Optional:-->
            <typ:partnerAddress1>?</typ:partnerAddress1>
            <!--Optional:-->
            <typ:partnerAddress2>?</typ:partnerAddress2>
            <!--Optional:-->
            <typ:partnerCity>?</typ:partnerCity>
            <!--Optional:-->
            <typ:partnerState>?</typ:partnerState>
            <!--Optional:-->
            <typ:partnerZipcode>?</typ:partnerZipcode>
            <!--Optional:-->
            <typ:partnerPhone>?</typ:partnerPhone>
            <!--Optional:-->
            <typ:partnerEmail>?</typ:partnerEmail>
            <!--Optional:-->
            <typ:userName>?</typ:userName>
            <!--Optional:-->
            <typ:status>?</typ:status>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
         </mes:partner>
         <!--Optional:-->
         <mes:partnerConfigs>
            <!--1 or more repetitions:-->
            <mes:config>
               <mes:name>?</mes:name>
               <mes:value>?</mes:value>
            </mes:config>
         </mes:partnerConfigs>
      </mes:CreateSubscriberPartnerRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberPartnerRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateSubscriberPayee" bindingOperationName="CreateSubscriberPayee" type="Request-Response" outputName="CreateSubscriberPayeeResponse" inputName="CreateSubscriberPayeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSubscriberPayeeRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberPayeeId>?</mes:subscriberPayeeId>
         <mes:payeeName>?</mes:payeeName>
         <!--Optional:-->
         <mes:payeeStatus>true</mes:payeeStatus>
         <!--Optional:-->
         <mes:payeeDescription>?</mes:payeeDescription>
         <!--Optional:-->
         <mes:payeeWebsite>?</mes:payeeWebsite>
         <!--Optional:-->
         <mes:externalPayeeId>?</mes:externalPayeeId>
         <!--Optional:-->
         <mes:faxNo>?</mes:faxNo>
         <!--Optional:-->
         <mes:phoneNo>?</mes:phoneNo>
         <!--Optional:-->
         <mes:payeeAdresses>
            <!--Zero or more repetitions:-->
            <mes:address operation="?">
               <!--You may enter the following 7 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <!--Optional:-->
               <typ:externalId>?</typ:externalId>
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </mes:address>
         </mes:payeeAdresses>
         <!--Optional:-->
         <mes:payeeContacts>
            <!--Zero or more repetitions:-->
            <mes:contact operation="?">
               <!--You may enter the following 10 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <!--Optional:-->
               <typ:externalId>?</typ:externalId>
               <!--Optional:-->
               <typ:department>?</typ:department>
               <typ:name>?</typ:name>
               <!--Optional:-->
               <typ:title>?</typ:title>
               <!--Optional:-->
               <typ:homePhone ext="?">?</typ:homePhone>
               <!--Optional:-->
               <typ:businessPhone ext="?">?</typ:businessPhone>
               <!--Optional:-->
               <typ:mobilePhone>?</typ:mobilePhone>
               <!--Optional:-->
               <typ:fax>?</typ:fax>
               <!--Optional:-->
               <typ:email>?</typ:email>
            </mes:contact>
         </mes:payeeContacts>
         <!--Optional:-->
         <mes:payeeBankAccounts>
            <!--Zero or more repetitions:-->
            <mes:account operation="?">
               <!--You may enter the following 8 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <!--Optional:-->
               <typ:externalId>?</typ:externalId>
               <!--Optional:-->
               <typ:bankName>?</typ:bankName>
               <typ:routingNumber>?</typ:routingNumber>
               <!--Optional:-->
               <typ:accountHolderName>?</typ:accountHolderName>
               <!--Optional:-->
               <typ:accountNumber>?</typ:accountNumber>
               <!--Optional:-->
               <typ:accountType>?</typ:accountType>
               <!--Optional:-->
               <typ:status>?</typ:status>
            </mes:account>
         </mes:payeeBankAccounts>
      </mes:CreateSubscriberPayeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateSubscriberUser" bindingOperationName="CreateSubscriberUser" type="Request-Response" outputName="CreateSubscriberUserResponse" inputName="CreateSubscriberUserRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSubscriberUserRequest>
         <!--You may enter the following 18 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:firstName>?</mes:firstName>
         <mes:userName>?</mes:userName>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <mes:lastName>?</mes:lastName>
         <mes:email>?</mes:email>
         <mes:phone>?</mes:phone>
         <mes:password>?</mes:password>
         <!--Optional:-->
         <mes:addressLine1>?</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>?</mes:addressLine2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <mes:isActive>true</mes:isActive>
         <mes:rolePermissions>
            <!--1 or more repetitions:-->
            <typ:rolePermission>?</typ:rolePermission>
         </mes:rolePermissions>
         <mes:isIpValidationRequired>true</mes:isIpValidationRequired>
         <!--Optional:-->
         <mes:ipAddresses>
            <!--1 or more repetitions:-->
            <typ:IpAddress>?</typ:IpAddress>
         </mes:ipAddresses>
      </mes:CreateSubscriberUserRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberUserRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="CreateSuscriberTemplateAsset" bindingOperationName="CreateSuscriberTemplateAsset" type="Request-Response" outputName="CreateSuscriberTemplateAssetResponse" inputName="CreateSuscriberTemplateAssetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSuscriberTemplateAssetRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:note>?</mes:note>
         <!--Optional:-->
         <mes:documentType>?</mes:documentType>
         <mes:base64EncodedContent>?</mes:base64EncodedContent>
         <mes:contentType>?</mes:contentType>
         <mes:documentName>?</mes:documentName>
      </mes:CreateSuscriberTemplateAssetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSuscriberTemplateAssetRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="DelayDraft" bindingOperationName="DelayDraft" type="Request-Response" outputName="DelayDraftResponse" inputName="DelayDraftRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:DelayDraftRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
         <mes:currentDraftDate>
            <typ:date format="?" value="?"/>
         </mes:currentDraftDate>
         <mes:newDraftDate>
            <typ:date format="?" value="?"/>
         </mes:newDraftDate>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
      </mes:DelayDraftRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/DelayDraftRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliate" bindingOperationName="GetAffiliate" type="Request-Response" outputName="GetAffiliateResponse" inputName="GetAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
      </mes:GetAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliateClients" bindingOperationName="GetAffiliateClients" type="Request-Response" outputName="GetAffiliateClientsResponse" inputName="GetAffiliateClientsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateClientsRequest>
         <!--You may enter the following 31 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:keyWord>?</mes:keyWord>
         <!--Optional:-->
         <mes:statuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:statuses>
         <!--Optional:-->
         <mes:spaStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:spaStatuses>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:enrollmentFromDate>
            <typ:date format="?" value="?"/>
         </mes:enrollmentFromDate>
         <!--Optional:-->
         <mes:enrollmentToDate>
            <typ:date format="?" value="?"/>
         </mes:enrollmentToDate>
         <!--Optional:-->
         <mes:phoneNumber>?</mes:phoneNumber>
         <!--Optional:-->
         <mes:addressLine1>?</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>?</mes:addressLine2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:loanNumber>?</mes:loanNumber>
         <!--Optional:-->
         <mes:lenderName>?</mes:lenderName>
         <!--Optional:-->
         <mes:VIN>?</mes:VIN>
         <!--Optional:-->
         <mes:routingNumber>?</mes:routingNumber>
         <!--Optional:-->
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetAffiliateClientsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateClientsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliateDocumentList" bindingOperationName="GetAffiliateDocumentList" type="Request-Response" outputName="GetAffiliateDocumentListResponse" inputName="GetAffiliateDocumentListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateDocumentListRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetAffiliateDocumentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateDocumentListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliateHierarchy" bindingOperationName="GetAffiliateHierarchy" type="Request-Response" outputName="GetAffiliateHierarchyResponse" inputName="GetAffiliateHierarchyRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateHierarchyRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
      </mes:GetAffiliateHierarchyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateHierarchyRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliateList" bindingOperationName="GetAffiliateList" type="Request-Response" outputName="GetAffiliateListResponse" inputName="GetAffiliateListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateListRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:name>?</mes:name>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
         <!--Optional:-->
         <mes:affiliateType>?</mes:affiliateType>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetAffiliateListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliateScheduleList" bindingOperationName="GetAffiliateScheduleList" type="Request-Response" outputName="GetAffiliateScheduleListResponse" inputName="GetAffiliateScheduleListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateScheduleListRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <mes:transactionClass>?</mes:transactionClass>
      </mes:GetAffiliateScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateScheduleListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliateTransactionList" bindingOperationName="GetAffiliateTransactionList" type="Request-Response" outputName="GetAffiliateTransactionListResponse" inputName="GetAffiliateTransactionListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateTransactionListRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetAffiliateTransactionListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateTransactionListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAffiliateUserList" bindingOperationName="GetAffiliateUserList" type="Request-Response" outputName="GetAffiliateUserListResponse" inputName="GetAffiliateUserListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAffiliateUserListRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliateType>?</mes:affiliateType>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetAffiliateUserListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAffiliateUserListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAllOverriddenSubscriberFee" bindingOperationName="GetAllOverriddenSubscriberFee" type="Request-Response" outputName="GetAllOverriddenSubscriberFeeResponse" inputName="GetAllOverriddenSubscriberFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAllOverriddenSubscriberFeeRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
      </mes:GetAllOverriddenSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAllOverriddenSubscriberFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetApprovalsById" bindingOperationName="GetApprovalsById" type="Request-Response" outputName="GetApprovalsByIdResponse" inputName="GetApprovalsByIdRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetApprovalsByIdRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:approvalId>?</mes:approvalId>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetApprovalsByIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetApprovalsByIdRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetAutoEnrollmentDetailFromStoneEagle" bindingOperationName="GetAutoEnrollmentDetailFromStoneEagle" type="Request-Response" outputName="GetAutoEnrollmentDetailFromStoneEagleResponse" inputName="GetAutoEnrollmentDetailFromStoneEagleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetAutoEnrollmentDetailFromStoneEagleRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:dealNumber>?</mes:dealNumber>
      </mes:GetAutoEnrollmentDetailFromStoneEagleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetAutoEnrollmentDetailFromStoneEagleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetBankList" bindingOperationName="GetBankList" type="Request-Response" outputName="GetBankListResponse" inputName="GetBankListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetBankListRequest>
         <!--You may enter the following 6 items in any order-->
         <!--Optional:-->
         <mes:bankName>?</mes:bankName>
         <!--Optional:-->
         <mes:routing_number>?</mes:routing_number>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
      </mes:GetBankListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetBankListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetCancelReasonCodes" bindingOperationName="GetCancelReasonCodes" type="Request-Response" outputName="GetCancelReasonCodesResponse" inputName="GetCancelReasonCodesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetCancelReasonCodesRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetCancelReasonCodesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetCancelReasonCodesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetCaptureDraft" bindingOperationName="GetCaptureDraft" type="Request-Response" outputName="GetCaptureDraftResponse" inputName="GetCaptureDraftRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetCaptureDraftRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:GetCaptureDraftRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetCaptureDraftRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetCheckImage" bindingOperationName="GetCheckImage" type="Request-Response" outputName="GetCheckImageResponse" inputName="GetCheckImageRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetCheckImageRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:transactionId>?</mes:transactionId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
      </mes:GetCheckImageRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetCheckImageRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetCheckNumber" bindingOperationName="GetCheckNumber" type="Request-Response" outputName="GetCheckNumberResponse" inputName="GetCheckNumberRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetCheckNumberRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetCheckNumberRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetCheckNumberRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetChildAffiliateList" bindingOperationName="GetChildAffiliateList" type="Request-Response" outputName="GetChildAffiliateListResponse" inputName="GetChildAffiliateListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetChildAffiliateListRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:name>?</mes:name>
         <!--Optional:-->
         <mes:parentId>?</mes:parentId>
         <!--Optional:-->
         <mes:parentExternalAffiliateId>?</mes:parentExternalAffiliateId>
         <!--Optional:-->
         <mes:affiliateType>?</mes:affiliateType>
         <!--Optional:-->
         <mes:status>
            <!--Zero or more repetitions:-->
            <typ:status>?</typ:status>
         </mes:status>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetChildAffiliateListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetChildAffiliateListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClient" bindingOperationName="GetClient" type="Request-Response" outputName="GetClientResponse" inputName="GetClientRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:status>?</mes:status>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:returnSPAAImage>false</mes:returnSPAAImage>
      </mes:GetClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientBalances" bindingOperationName="GetClientBalances" type="Request-Response" outputName="GetClientBalancesResponse" inputName="GetClientBalancesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientBalancesRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetClientBalancesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientBalancesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientBankAccount" bindingOperationName="GetClientBankAccount" type="Request-Response" outputName="GetClientBankAccountResponse" inputName="GetClientBankAccountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientBankAccountRequest>
         <!--You may enter the following 4 items in any order-->
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientBankAccountId>?</mes:clientBankAccountId>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetClientBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientBankAccountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientBankAccountList" bindingOperationName="GetClientBankAccountList" type="Request-Response" outputName="GetClientBankAccountListResponse" inputName="GetClientBankAccountListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientBankAccountListRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:createdFrom>
            <typ:date format="?" value="?"/>
         </mes:createdFrom>
         <!--Optional:-->
         <mes:createdTo>
            <typ:date format="?" value="?"/>
         </mes:createdTo>
         <!--Optional:-->
         <mes:modifiedFrom>
            <typ:date format="?" value="?"/>
         </mes:modifiedFrom>
         <!--Optional:-->
         <mes:modifiedTo>
            <typ:date format="?" value="?"/>
         </mes:modifiedTo>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
      </mes:GetClientBankAccountListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientBankAccountListRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientIds" bindingOperationName="GetClientIds" type="Request-Response" outputName="GetClientIdsResponse" inputName="GetClientIdsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientIdsRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:noOfIds>?</mes:noOfIds>
      </mes:GetClientIdsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientIdsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientRTPSettlement" bindingOperationName="GetClientRTPSettlement" type="Request-Response" outputName="GetClientRTPSettlementResponse" inputName="GetClientRTPSettlementRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientRTPSettlementRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:settlementId>?</mes:settlementId>
      </mes:GetClientRTPSettlementRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientRTPSettlementRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClients" bindingOperationName="GetClients" type="Request-Response" outputName="GetClientsResponse" inputName="GetClientsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientsRequest>
         <!--You may enter the following 31 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:keyWord>?</mes:keyWord>
         <!--Optional:-->
         <mes:statuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:statuses>
         <!--Optional:-->
         <mes:spaStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:spaStatuses>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:enrollmentFromDate>
            <typ:date format="?" value="?"/>
         </mes:enrollmentFromDate>
         <!--Optional:-->
         <mes:enrollmentToDate>
            <typ:date format="?" value="?"/>
         </mes:enrollmentToDate>
         <!--Optional:-->
         <mes:phoneNumber>?</mes:phoneNumber>
         <!--Optional:-->
         <mes:addressLine1>?</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>?</mes:addressLine2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:loanNumber>?</mes:loanNumber>
         <!--Optional:-->
         <mes:lenderName>?</mes:lenderName>
         <!--Optional:-->
         <mes:VIN>?</mes:VIN>
         <!--Optional:-->
         <mes:routingNumber>?</mes:routingNumber>
         <!--Optional:-->
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:skipDeleted>true</mes:skipDeleted>
      </mes:GetClientsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientsRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientSettlement" bindingOperationName="GetClientSettlement" type="Request-Response" outputName="GetClientSettlementResponse" inputName="GetClientSettlementRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientSettlementRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:settlementId>?</mes:settlementId>
      </mes:GetClientSettlementRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientSettlementRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientSettlementList" bindingOperationName="GetClientSettlementList" type="Request-Response" outputName="GetClientSettlementListResponse" inputName="GetClientSettlementListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientSettlementListRequest>
         <!--You may enter the following 10 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:approvalStatus>?</mes:approvalStatus>
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:GetClientSettlementListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientSettlementListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetClientStatus" bindingOperationName="GetClientStatus" type="Request-Response" outputName="GetClientStatusResponse" inputName="GetClientStatusRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientStatusRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:GetClientStatusRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientStatusRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetCplusClients" bindingOperationName="GetCplusClients" type="Request-Response" outputName="GetCplusClientsResponse" inputName="GetCplusClientsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetCplusClientsRequest>
         <!--You may enter the following 31 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:keyWord>?</mes:keyWord>
         <!--Optional:-->
         <mes:statuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:statuses>
         <!--Optional:-->
         <mes:spaStatuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:spaStatuses>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:enrollmentFromDate>
            <typ:date format="?" value="?"/>
         </mes:enrollmentFromDate>
         <!--Optional:-->
         <mes:enrollmentToDate>
            <typ:date format="?" value="?"/>
         </mes:enrollmentToDate>
         <!--Optional:-->
         <mes:phoneNumber>?</mes:phoneNumber>
         <!--Optional:-->
         <mes:addressLine1>?</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>?</mes:addressLine2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:loanNumber>?</mes:loanNumber>
         <!--Optional:-->
         <mes:lenderName>?</mes:lenderName>
         <!--Optional:-->
         <mes:VIN>?</mes:VIN>
         <!--Optional:-->
         <mes:routingNumber>?</mes:routingNumber>
         <!--Optional:-->
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:skipDeleted>true</mes:skipDeleted>
      </mes:GetCplusClientsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetCplusClientsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetDelayDraftChangedDates" bindingOperationName="GetDelayDraftChangedDates" type="Request-Response" outputName="GetDelayDraftChangedDatesResponse" inputName="GetDelayDraftChangedDatesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetDelayDraftChangedDatesRequest>
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
         <mes:currentDraftDate>
            <typ:date format="?" value="?"/>
         </mes:currentDraftDate>
      </mes:GetDelayDraftChangedDatesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDelayDraftChangedDatesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetDocumentById" bindingOperationName="GetDocumentById" type="Request-Response" outputName="GetDocumentByIdResponse" inputName="GetDocumentByIdRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetDocumentByIdRequest>
         <mes:documentId>?</mes:documentId>
      </mes:GetDocumentByIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDocumentByIdRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetDraftErrorList" bindingOperationName="GetDraftErrorList" type="Request-Response" outputName="GetDraftErrorListResponse" inputName="GetDraftErrorListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetDraftErrorListRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:transactionType>?</mes:transactionType>
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
      </mes:GetDraftErrorListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftErrorListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetDraftSchedule" bindingOperationName="GetDraftSchedule" type="Request-Response" outputName="GetDraftScheduleResponse" inputName="GetDraftScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetDraftScheduleRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:GetDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetDraftScheduleList" bindingOperationName="GetDraftScheduleList" type="Request-Response" outputName="GetDraftScheduleListResponse" inputName="GetDraftScheduleListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetDraftScheduleListRequest>
         <!--You may enter the following 14 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>?</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <!--Optional:-->
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:GetDraftScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleListRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetDraftScheduleListWithNextDate" bindingOperationName="GetDraftScheduleListWithNextDate" type="Request-Response" outputName="GetDraftScheduleListWithNextDateResponse" inputName="GetDraftScheduleListWithNextDateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetDraftScheduleListWithNextDateRequest>
         <!--You may enter the following 14 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>?</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <!--Optional:-->
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:GetDraftScheduleListWithNextDateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleListWithNextDateRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetDraftScheduleModifiableDates" bindingOperationName="GetDraftScheduleModifiableDates" type="Request-Response" outputName="GetDraftScheduleModifiableDatesResponse" inputName="GetDraftScheduleModifiableDatesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetDraftScheduleModifiableDatesRequest>
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
      </mes:GetDraftScheduleModifiableDatesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleModifiableDatesRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentAffiliateList" bindingOperationName="GetEnrollmentAffiliateList" type="Request-Response" outputName="GetEnrollmentAffiliateListResponse" inputName="GetEnrollmentAffiliateListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentAffiliateListRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetEnrollmentAffiliateListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentAffiliateListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentChannelAttributeValuesList" bindingOperationName="GetEnrollmentChannelAttributeValuesList" type="Request-Response" outputName="GetEnrollmentChannelAttributeValuesListResponse" inputName="GetEnrollmentChannelAttributeValuesListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentChannelAttributeValuesListRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetEnrollmentChannelAttributeValuesListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentChannelAttributeValuesListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentCommentList" bindingOperationName="GetEnrollmentCommentList" type="Request-Response" outputName="GetEnrollmentCommentListResponse" inputName="GetEnrollmentCommentListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentCommentListRequest>
         <!--You may enter the following 10 items in any order-->
         <!--Optional:-->
         <mes:commentId>?</mes:commentId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
      </mes:GetEnrollmentCommentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentCommentListRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentCount" bindingOperationName="GetEnrollmentCount" type="Request-Response" outputName="GetEnrollmentCountResponse" inputName="GetEnrollmentCountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentCountRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:statuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:statuses>
      </mes:GetEnrollmentCountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentCountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentDocument" bindingOperationName="GetEnrollmentDocument" type="Request-Response" outputName="GetEnrollmentDocumentResponse" inputName="GetEnrollmentDocumentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentDocumentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:documentId>?</mes:documentId>
      </mes:GetEnrollmentDocumentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentDocumentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentDocumentList" bindingOperationName="GetEnrollmentDocumentList" type="Request-Response" outputName="GetEnrollmentDocumentListResponse" inputName="GetEnrollmentDocumentListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentDocumentListRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
      </mes:GetEnrollmentDocumentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentDocumentListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentErrorList" bindingOperationName="GetEnrollmentErrorList" type="Request-Response" outputName="GetEnrollmentErrorListResponse" inputName="GetEnrollmentErrorListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentErrorListRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:enrollmentStatus>INACTIVE</mes:enrollmentStatus>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetEnrollmentErrorListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentErrorListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentExceptionsList" bindingOperationName="GetEnrollmentExceptionsList" type="Request-Response" outputName="GetEnrollmentExceptionsListResponse" inputName="GetEnrollmentExceptionsListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentExceptionsListRequest>
         <!--You may enter the following 13 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:transactionClass>?</mes:transactionClass>
         <!--Optional:-->
         <mes:code>?</mes:code>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:orderBy>?</mes:orderBy>
         <mes:ascending>true</mes:ascending>
      </mes:GetEnrollmentExceptionsListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentExceptionsListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentPayee" bindingOperationName="GetEnrollmentPayee" type="Request-Response" outputName="GetEnrollmentPayeeResponse" inputName="GetEnrollmentPayeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentPayeeRequest>
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
      </mes:GetEnrollmentPayeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentPayeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentTicket" bindingOperationName="GetEnrollmentTicket" type="Request-Response" outputName="GetEnrollmentTicketResponse" inputName="GetEnrollmentTicketRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentTicketRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:enrollmentTicketId>?</mes:enrollmentTicketId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetEnrollmentTicketRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentTicketRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetEnrollmentTicketList" bindingOperationName="GetEnrollmentTicketList" type="Request-Response" outputName="GetEnrollmentTicketListResponse" inputName="GetEnrollmentTicketListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentTicketListRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:asigneeId>?</mes:asigneeId>
         <!--Optional:-->
         <mes:ticketStatus>?</mes:ticketStatus>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
      </mes:GetEnrollmentTicketListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentTicketListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetExternalPayeeListByName" bindingOperationName="GetExternalPayeeListByName" type="Request-Response" outputName="GetExternalPayeeListByNameResponse" inputName="GetExternalPayeeListByNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetExternalPayeeListByNameRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:searchName>?</mes:searchName>
         <!--Optional:-->
         <mes:searchCity>?</mes:searchCity>
         <!--Optional:-->
         <mes:searchState>?</mes:searchState>
         <!--Optional:-->
         <mes:searchAddress2>?</mes:searchAddress2>
      </mes:GetExternalPayeeListByNameRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetExternalPayeeListByNameRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetFeeBasis" bindingOperationName="GetFeeBasis" type="Request-Response" outputName="GetFeeBasisResponse" inputName="GetFeeBasisRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetFeeBasisRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:GetFeeBasisRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetFeeBasisRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetFeeSchedule" bindingOperationName="GetFeeSchedule" type="Request-Response" outputName="GetFeeScheduleResponse" inputName="GetFeeScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetFeeScheduleRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:GetFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetFeeScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetFeeScheduleBasis" bindingOperationName="GetFeeScheduleBasis" type="Request-Response" outputName="GetFeeScheduleBasisResponse" inputName="GetFeeScheduleBasisRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetFeeScheduleBasisRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:GetFeeScheduleBasisRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetFeeScheduleBasisRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetFeeScheduleList" bindingOperationName="GetFeeScheduleList" type="Request-Response" outputName="GetFeeScheduleListResponse" inputName="GetFeeScheduleListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetFeeScheduleListRequest>
         <!--You may enter the following 18 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:owner>?</mes:owner>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>?</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <!--Optional:-->
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:subscriberFeeId>?</mes:subscriberFeeId>
         <!--Optional:-->
         <mes:filterReversedFees>false</mes:filterReversedFees>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:showRfee>false</mes:showRfee>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:GetFeeScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetFeeScheduleListRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetFeeScheduleListBasis" bindingOperationName="GetFeeScheduleListBasis" type="Request-Response" outputName="GetFeeScheduleListBasisResponse" inputName="GetFeeScheduleListBasisRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetFeeScheduleListBasisRequest>
         <!--You may enter the following 18 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:owner>?</mes:owner>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>?</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <!--Optional:-->
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:subscriberFeeId>?</mes:subscriberFeeId>
         <!--Optional:-->
         <mes:filterReversedFees>false</mes:filterReversedFees>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:showRfee>false</mes:showRfee>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:GetFeeScheduleListBasisRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetFeeScheduleListBasisRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetHierarchyAffiliateCommissionDist" bindingOperationName="GetHierarchyAffiliateCommissionDist" type="Request-Response" outputName="GetHierarchyAffiliateCommissionDistResponse" inputName="GetHierarchyAffiliateCommissionDistRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetHierarchyAffiliateCommissionDistRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliateType>?</mes:affiliateType>
      </mes:GetHierarchyAffiliateCommissionDistRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetHierarchyAffiliateCommissionDistRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetNewPositivePayList" bindingOperationName="GetNewPositivePayList" type="Request-Response" outputName="GetNewPositivePayListResponse" inputName="GetNewPositivePayListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetNewPositivePayListRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:expandUpTo>
            <typ:date format="?" value="?"/>
         </mes:expandUpTo>
         <!--Optional:-->
         <mes:maximumRecords>?</mes:maximumRecords>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:GetNewPositivePayListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetNewPositivePayListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetNextSchedule" bindingOperationName="GetNextSchedule" type="Request-Response" outputName="GetNextScheduleResponse" inputName="GetNextScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetNextScheduleRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:transactionClass>?</mes:transactionClass>
         <mes:clientId>?</mes:clientId>
         <mes:status>?</mes:status>
      </mes:GetNextScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetNextScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetOverriddenSubscriberFee" bindingOperationName="GetOverriddenSubscriberFee" type="Request-Response" outputName="GetOverriddenSubscriberFeeResponse" inputName="GetOverriddenSubscriberFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetOverriddenSubscriberFeeRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:feeId>?</mes:feeId>
      </mes:GetOverriddenSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetOverriddenSubscriberFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPartialEnrollment" bindingOperationName="GetPartialEnrollment" type="Request-Response" outputName="GetPartialEnrollmentResponse" inputName="GetPartialEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPartialEnrollmentRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:partialEnrollmentId>?</mes:partialEnrollmentId>
      </mes:GetPartialEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPartialEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPartialEnrollmentList" bindingOperationName="GetPartialEnrollmentList" type="Request-Response" outputName="GetPartialEnrollmentListResponse" inputName="GetPartialEnrollmentListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPartialEnrollmentListRequest>
         <!--You may enter the following 10 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:searchFirstName>?</mes:searchFirstName>
         <!--Optional:-->
         <mes:searchLastName>?</mes:searchLastName>
         <!--Optional:-->
         <mes:searchCity>?</mes:searchCity>
         <!--Optional:-->
         <mes:searchState>?</mes:searchState>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetPartialEnrollmentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPartialEnrollmentListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPartnerList" bindingOperationName="GetPartnerList" type="Request-Response" outputName="GetPartnerListResponse" inputName="GetPartnerListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPartnerListRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:partnerId>?</mes:partnerId>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetPartnerListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPartnerListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPaymentDetails" bindingOperationName="GetPaymentDetails" type="Request-Response" outputName="GetPaymentDetailsResponse" inputName="GetPaymentDetailsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPaymentDetailsRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
      </mes:GetPaymentDetailsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentDetailsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPaymentList" bindingOperationName="GetPaymentList" type="Request-Response" outputName="GetPaymentListResponse" inputName="GetPaymentListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPaymentListRequest>
         <!--You may enter the following 19 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientIds>
            <!--Zero or more repetitions:-->
            <typ:clientId>?</typ:clientId>
         </mes:clientIds>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>?</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:transactionMethod>?</mes:transactionMethod>
         <!--Optional:-->
         <mes:scheduleStatuses>
            <!--Zero or more repetitions:-->
            <typ:status>?</typ:status>
         </mes:scheduleStatuses>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromAmount>?</mes:fromAmount>
         <!--Optional:-->
         <mes:toAmount>?</mes:toAmount>
         <!--Optional:-->
         <mes:payeeName>?</mes:payeeName>
         <!--Optional:-->
         <mes:clientName>?</mes:clientName>
         <!--Optional:-->
         <mes:checkNumber>?</mes:checkNumber>
         <!--Optional:-->
         <mes:accountInfo>?</mes:accountInfo>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:GetPaymentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentListRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPaymentListOnPositivePay" bindingOperationName="GetPaymentListOnPositivePay" type="Request-Response" outputName="GetPaymentListOnPositivePayResponse" inputName="GetPaymentListOnPositivePayRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPaymentListOnPositivePayRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:transactionMethod>?</mes:transactionMethod>
         <!--Optional:-->
         <mes:scheduleStatus>?</mes:scheduleStatus>
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:GetPaymentListOnPositivePayRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentListOnPositivePayRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPaymentMonitorList" bindingOperationName="GetPaymentMonitorList" type="Request-Response" outputName="GetPaymentMonitorListResponse" inputName="GetPaymentMonitorListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPaymentMonitorListRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:numberOfDays>?</mes:numberOfDays>
         <!--Optional:-->
         <mes:searchText>?</mes:searchText>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetPaymentMonitorListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentMonitorListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPositivePayDetails" bindingOperationName="GetPositivePayDetails" type="Request-Response" outputName="GetPositivePayDetailsResponse" inputName="GetPositivePayDetailsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPositivePayDetailsRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:clientId>?</mes:clientId>
         <mes:positivePayId>?</mes:positivePayId>
      </mes:GetPositivePayDetailsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPositivePayDetailsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPositivePayInquiries" bindingOperationName="GetPositivePayInquiries" type="Request-Response" outputName="GetPositivePayInquiriesResponse" inputName="GetPositivePayInquiriesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPositivePayInquiriesRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>?</typ:orderBy>
         </mes:orderBy>
      </mes:GetPositivePayInquiriesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPositivePayInquiriesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPositivePayList" bindingOperationName="GetPositivePayList" type="Request-Response" outputName="GetPositivePayListResponse" inputName="GetPositivePayListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPositivePayListRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:GetPositivePayListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPositivePayListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetPostedTransaction" bindingOperationName="GetPostedTransaction" type="Request-Response" outputName="GetPostedTransactionResponse" inputName="GetPostedTransactionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPostedTransactionRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:postedTransactionId>?</mes:postedTransactionId>
      </mes:GetPostedTransactionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPostedTransactionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetReferralAffiliateList" bindingOperationName="GetReferralAffiliateList" type="Request-Response" outputName="GetReferralAffiliateListResponse" inputName="GetReferralAffiliateListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetReferralAffiliateListRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetReferralAffiliateListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetReferralAffiliateListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetResetPasswordToken" bindingOperationName="GetResetPasswordToken" type="Request-Response" outputName="GetResetPasswordTokenResponse" inputName="GetResetPasswordTokenRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetResetPasswordTokenRequest>
         <mes:username>?</mes:username>
      </mes:GetResetPasswordTokenRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetResetPasswordTokenRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetReturnList" bindingOperationName="GetReturnList" type="Request-Response" outputName="GetReturnListResponse" inputName="GetReturnListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetReturnListRequest>
         <!--You may enter the following 13 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientName>?</mes:clientName>
         <!--Optional:-->
         <mes:accountNumber>?</mes:accountNumber>
         <!--Optional:-->
         <mes:modifiedby>?</mes:modifiedby>
         <!--Optional:-->
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <!--Optional:-->
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:transactionClass>?</mes:transactionClass>
         <!--Optional:-->
         <mes:transactionMethod>?</mes:transactionMethod>
      </mes:GetReturnListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetReturnListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetReturnSchedule" bindingOperationName="GetReturnSchedule" type="Request-Response" outputName="GetReturnScheduleResponse" inputName="GetReturnScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetReturnScheduleRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:GetReturnScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetReturnScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetRuleSet" bindingOperationName="GetRuleSet" type="Request-Response" outputName="GetRuleSetResponse" inputName="GetRuleSetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetRuleSetRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:ruleSetId>?</mes:ruleSetId>
         <!--Optional:-->
         <mes:externalRuleSetId>?</mes:externalRuleSetId>
      </mes:GetRuleSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetRuleSetRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetRuleSetDefinition" bindingOperationName="GetRuleSetDefinition" type="Request-Response" outputName="GetRuleSetDefinitionResponse" inputName="GetRuleSetDefinitionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetRuleSetDefinitionRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:ruleSetId>?</mes:ruleSetId>
         <!--Optional:-->
         <mes:externalRuleSetId>?</mes:externalRuleSetId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetRuleSetDefinitionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetRuleSetDefinitionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetRuleSetList" bindingOperationName="GetRuleSetList" type="Request-Response" outputName="GetRuleSetListResponse" inputName="GetRuleSetListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetRuleSetListRequest>
         <!--You may enter the following 15 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:ruleSetId>?</mes:ruleSetId>
         <!--Optional:-->
         <mes:externalRuleSetId>?</mes:externalRuleSetId>
         <!--Optional:-->
         <mes:name>?</mes:name>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:createdOnStart>
            <typ:date format="?" value="?"/>
         </mes:createdOnStart>
         <!--Optional:-->
         <mes:createdOnEnd>
            <typ:date format="?" value="?"/>
         </mes:createdOnEnd>
         <!--Optional:-->
         <mes:createdBy>?</mes:createdBy>
         <!--Optional:-->
         <mes:modifiedOnStart>
            <typ:date format="?" value="?"/>
         </mes:modifiedOnStart>
         <!--Optional:-->
         <mes:modifiedOnEnd>
            <typ:date format="?" value="?"/>
         </mes:modifiedOnEnd>
         <!--Optional:-->
         <mes:modifiedBy>?</mes:modifiedBy>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetRuleSetListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetRuleSetListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSchedule" bindingOperationName="GetSchedule" type="Request-Response" outputName="GetScheduleResponse" inputName="GetScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetScheduleRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:scheduleId>?</mes:scheduleId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:transactionClass>?</mes:transactionClass>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
      </mes:GetScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetScheduleList" bindingOperationName="GetScheduleList" type="Request-Response" outputName="GetScheduleListResponse" inputName="GetScheduleListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetScheduleListRequest>
         <!--You may enter the following 13 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:order>?</mes:order>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <mes:transactionClasses>
            <!--1 or more repetitions:-->
            <typ:transactionClass>?</typ:transactionClass>
         </mes:transactionClasses>
         <!--Optional:-->
         <mes:showRfee>false</mes:showRfee>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
      </mes:GetScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetScheduleListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSettlementApprovalList" bindingOperationName="GetSettlementApprovalList" type="Request-Response" outputName="GetSettlementApprovalListResponse" inputName="GetSettlementApprovalListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSettlementApprovalListRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:approvalStatus>?</mes:approvalStatus>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
      </mes:GetSettlementApprovalListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSettlementApprovalListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSettlementCount" bindingOperationName="GetSettlementCount" type="Request-Response" outputName="GetSettlementCountResponse" inputName="GetSettlementCountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSettlementCountRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:startDate>
            <typ:date format="?" value="?"/>
         </mes:startDate>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
         <!--Optional:-->
         <mes:statuses>
            <!--Zero or more repetitions:-->
            <mes:status>?</mes:status>
         </mes:statuses>
         <mes:moneySaved>false</mes:moneySaved>
      </mes:GetSettlementCountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSettlementCountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSPAForecastList" bindingOperationName="GetSPAForecastList" type="Request-Response" outputName="GetSPAForecastListResponse" inputName="GetSPAForecastListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSPAForecastListRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:subscriberFeeId>?</mes:subscriberFeeId>
         <!--Optional:-->
         <mes:clientBankAccountId>?</mes:clientBankAccountId>
         <!--Optional:-->
         <mes:payeeId>?</mes:payeeId>
         <!--Optional:-->
         <mes:forecasts>
            <!--Zero or more repetitions:-->
            <typ:forecast>
               <!--You may enter the following 6 items in any order-->
               <typ:scheduleDate>
                  <typ:date format="?" value="?"/>
               </typ:scheduleDate>
               <typ:type>?</typ:type>
               <typ:amount>?</typ:amount>
               <!--Optional:-->
               <typ:scheduleId>?</typ:scheduleId>
               <!--Optional:-->
               <typ:transactionMethod>?</typ:transactionMethod>
               <!--Optional:-->
               <typ:draftType>?</typ:draftType>
            </typ:forecast>
         </mes:forecasts>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
      </mes:GetSPAForecastListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSPAForecastListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSPAMonthlyBalanceList" bindingOperationName="GetSPAMonthlyBalanceList" type="Request-Response" outputName="GetSPAMonthlyBalanceListResponse" inputName="GetSPAMonthlyBalanceListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSPAMonthlyBalanceListRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:endDate>
            <typ:date format="?" value="?"/>
         </mes:endDate>
      </mes:GetSPAMonthlyBalanceListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSPAMonthlyBalanceListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetStatusEnumList" bindingOperationName="GetStatusEnumList" type="Request-Response" outputName="GetStatusEnumListResponse" inputName="GetStatusEnumListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetStatusEnumListRequest>
         <mes:enumName>?</mes:enumName>
      </mes:GetStatusEnumListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetStatusEnumListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSubscriberAffiliateConfigs" bindingOperationName="GetSubscriberAffiliateConfigs" type="Request-Response" outputName="GetSubscriberAffiliateConfigsResponse" inputName="GetSubscriberAffiliateConfigsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberAffiliateConfigsRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetSubscriberAffiliateConfigsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberAffiliateConfigsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSubscriberPayee" bindingOperationName="GetSubscriberPayee" type="Request-Response" outputName="GetSubscriberPayeeResponse" inputName="GetSubscriberPayeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberPayeeRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:payeeId>?</mes:payeeId>
         <!--Optional:-->
         <mes:subscriberPayeeId>?</mes:subscriberPayeeId>
      </mes:GetSubscriberPayeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSubscriberPayeeList" bindingOperationName="GetSubscriberPayeeList" type="Request-Response" outputName="GetSubscriberPayeeListResponse" inputName="GetSubscriberPayeeListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberPayeeListRequest>
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>?</typ:orderBy>
         </mes:orderBy>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:payeeName>?</mes:payeeName>
         <!--Optional:-->
         <mes:subscriberPayeeId>?</mes:subscriberPayeeId>
         <!--Optional:-->
         <mes:payeeId>?</mes:payeeId>
         <!--Optional:-->
         <mes:status>?</mes:status>
      </mes:GetSubscriberPayeeListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSubscriberPayeeListByName" bindingOperationName="GetSubscriberPayeeListByName" type="Request-Response" outputName="GetSubscriberPayeeListByNameResponse" inputName="GetSubscriberPayeeListByNameRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberPayeeListByNameRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:searchName>?</mes:searchName>
      </mes:GetSubscriberPayeeListByNameRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeListByNameRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSubscriberStatewiseFeeCapList" bindingOperationName="GetSubscriberStatewiseFeeCapList" type="Request-Response" outputName="GetSubscriberStatewiseFeeCapListResponse" inputName="GetSubscriberStatewiseFeeCapListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberStatewiseFeeCapListRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetSubscriberStatewiseFeeCapListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberStatewiseFeeCapListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSubscriberTemplateAssetById" bindingOperationName="GetSubscriberTemplateAssetById" type="Request-Response" outputName="GetSubscriberTemplateAssetByIdResponse" inputName="GetSubscriberTemplateAssetByIdRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberTemplateAssetByIdRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:documentId>?</mes:documentId>
      </mes:GetSubscriberTemplateAssetByIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberTemplateAssetByIdRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSubscriberUserList" bindingOperationName="GetSubscriberUserList" type="Request-Response" outputName="GetSubscriberUserListResponse" inputName="GetSubscriberUserListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberUserListRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:pageNumber>?</mes:pageNumber>
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>?</typ:orderBy>
         </mes:orderBy>
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:isActive>true</mes:isActive>
      </mes:GetSubscriberUserListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberUserListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetSummaryScheduleList" bindingOperationName="GetSummaryScheduleList" type="Request-Response" outputName="GetSummaryScheduleListResponse" inputName="GetSummaryScheduleListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSummaryScheduleListRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>?</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:externalReferenceIds>
            <!--Zero or more repetitions:-->
            <mes:externalReferenceId>?</mes:externalReferenceId>
         </mes:externalReferenceIds>
         <!--Optional:-->
         <mes:modifiedFrom>
            <typ:date format="?" value="?"/>
         </mes:modifiedFrom>
         <!--Optional:-->
         <mes:modifiedTo>
            <typ:date format="?" value="?"/>
         </mes:modifiedTo>
         <mes:transactionClass>?</mes:transactionClass>
      </mes:GetSummaryScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSummaryScheduleListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetTransactionDetails" bindingOperationName="GetTransactionDetails" type="Request-Response" outputName="GetTransactionDetailsResponse" inputName="GetTransactionDetailsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetTransactionDetailsRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:transactionId>?</mes:transactionId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <mes:includeCheckImage>false</mes:includeCheckImage>
      </mes:GetTransactionDetailsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionDetailsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetTransactionList" bindingOperationName="GetTransactionList" type="Request-Response" outputName="GetTransactionListResponse" inputName="GetTransactionListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetTransactionListRequest>
         <!--You may enter the following 15 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:skipDeleted>false</mes:skipDeleted>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <!--Optional:-->
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:lastTransactionId>?</mes:lastTransactionId>
      </mes:GetTransactionListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetTransactionListByIds" bindingOperationName="GetTransactionListByIds" type="Request-Response" outputName="GetTransactionListByIdsResponse" inputName="GetTransactionListByIdsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetTransactionListByIdsRequest>
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientIds>
            <!--Zero or more repetitions:-->
            <typ:clientId>?</typ:clientId>
         </mes:clientIds>
         <!--Optional:-->
         <mes:transactionIds>
            <!--Zero or more repetitions:-->
            <mes:transactionId>?</mes:transactionId>
         </mes:transactionIds>
         <!--Optional:-->
         <mes:transactionClass>?</mes:transactionClass>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
      </mes:GetTransactionListByIdsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionListByIdsRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetTransactionMethods" bindingOperationName="GetTransactionMethods" type="Request-Response" outputName="GetTransactionMethodsResponse" inputName="GetTransactionMethodsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetTransactionMethodsRequest>
         <mes:transactionClass>?</mes:transactionClass>
      </mes:GetTransactionMethodsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionMethodsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetTransactionProcessors" bindingOperationName="GetTransactionProcessors" type="Request-Response" outputName="GetTransactionProcessorsResponse" inputName="GetTransactionProcessorsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetTransactionProcessorsRequest>
         <!--You may enter the following 2 items in any order-->
         <!--Optional:-->
         <mes:transactionProcessorType>?</mes:transactionProcessorType>
         <!--Optional:-->
         <mes:direction>?</mes:direction>
      </mes:GetTransactionProcessorsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionProcessorsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetUnprocessedPostedTransactionList" bindingOperationName="GetUnprocessedPostedTransactionList" type="Request-Response" outputName="GetUnprocessedPostedTransactionListResponse" inputName="GetUnprocessedPostedTransactionListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetUnprocessedPostedTransactionListRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:postedTransactionStatus>?</mes:postedTransactionStatus>
         <mes:pageNo>?</mes:pageNo>
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <mes:ascending>true</mes:ascending>
      </mes:GetUnprocessedPostedTransactionListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetUnprocessedPostedTransactionListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetUserById" bindingOperationName="GetUserById" type="Request-Response" outputName="GetUserByIdResponse" inputName="GetUserByIdRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetUserByIdRequest>
         <mes:userId>?</mes:userId>
      </mes:GetUserByIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetUserByIdRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="GetUserRolesList" bindingOperationName="GetUserRolesList" type="Request-Response" outputName="GetUserRolesListResponse" inputName="GetUserRolesListRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetUserRolesListRequest>
         <mes:subscriberId>?</mes:subscriberId>
      </mes:GetUserRolesListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetUserRolesListRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="InstantRemittance" bindingOperationName="InstantRemittance" type="Request-Response" outputName="InstantRemittanceResponse" inputName="InstantRemittanceRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:InstantRemittanceRequest>
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:transactionMethod>?</mes:transactionMethod>
         <!--Optional:-->
         <mes:settlementId>?</mes:settlementId>
         <!--Optional:-->
         <mes:srcAccountNumber>?</mes:srcAccountNumber>
         <!--Optional:-->
         <mes:paymentAccountNumber>?</mes:paymentAccountNumber>
         <mes:payeePaypalId>?</mes:payeePaypalId>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <mes:amount>?</mes:amount>
      </mes:InstantRemittanceRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/InstantRemittanceRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ListEnrollmentFee" bindingOperationName="ListEnrollmentFee" type="Request-Response" outputName="ListEnrollmentFeeResponse" inputName="ListEnrollmentFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ListEnrollmentFeeRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:feeType>?</mes:feeType>
         <!--Optional:-->
         <mes:ownerType>?</mes:ownerType>
      </mes:ListEnrollmentFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ListEnrollmentFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ListSubscriberFee" bindingOperationName="ListSubscriberFee" type="Request-Response" outputName="ListSubscriberFeeResponse" inputName="ListSubscriberFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ListSubscriberFeeRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:order>
            <!--Optional:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <!--Optional:-->
         <mes:pageNo>1</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>10</mes:resultsPerPage>
      </mes:ListSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ListSubscriberFeeRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ListTopLevelFee" bindingOperationName="ListTopLevelFee" type="Request-Response" outputName="ListTopLevelFeeResponse" inputName="ListTopLevelFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ListTopLevelFeeRequest>
         <!--Optional:-->
         <mes:type>?</mes:type>
      </mes:ListTopLevelFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ListTopLevelFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="MakePhonePayment" bindingOperationName="MakePhonePayment" type="Request-Response" outputName="MakePhonePaymentResponse" inputName="MakePhonePaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:MakePhonePaymentRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
         <mes:checkNumber>?</mes:checkNumber>
         <!--Optional:-->
         <mes:creditorProcessingFee>?</mes:creditorProcessingFee>
         <!--Optional:-->
         <mes:creditorProcessingFeeCheckNumber>?</mes:creditorProcessingFeeCheckNumber>
         <!--Optional:-->
         <mes:creditorProcessingFeeCombined>true</mes:creditorProcessingFeeCombined>
         <mes:comment>?</mes:comment>
      </mes:MakePhonePaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/MakePhonePaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ModifyDraftSchedule" bindingOperationName="ModifyDraftSchedule" type="Request-Response" outputName="ModifyDraftScheduleResponse" inputName="ModifyDraftScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ModifyDraftScheduleRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
         <mes:currentDraftDate>
            <typ:date format="?" value="?"/>
         </mes:currentDraftDate>
         <mes:newDraftDate>
            <typ:date format="?" value="?"/>
         </mes:newDraftDate>
      </mes:ModifyDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ModifyDraftScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ModifyHierarchyAffiliateCommissionDist" bindingOperationName="ModifyHierarchyAffiliateCommissionDist" type="Request-Response" outputName="ModifyHierarchyAffiliateCommissionDistResponse" inputName="ModifyHierarchyAffiliateCommissionDistRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ModifyHierarchyAffiliateCommissionDistRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:current>
            <!--You may enter the following 3 items in any order-->
            <mes:affiliateId>?</mes:affiliateId>
            <mes:affiliateType>?</mes:affiliateType>
            <!--Optional:-->
            <mes:referalId>?</mes:referalId>
         </mes:current>
         <mes:new>
            <!--You may enter the following 5 items in any order-->
            <mes:affiliateId>?</mes:affiliateId>
            <mes:affiliateType>?</mes:affiliateType>
            <!--Optional:-->
            <mes:referalId>?</mes:referalId>
            <!--Optional:-->
            <mes:fixed>
               <typ:cycle>
                  <!--You may enter the following 3 items in any order-->
                  <typ:distType>?</typ:distType>
                  <typ:cycleId>?</typ:cycleId>
                  <typ:value>?</typ:value>
               </typ:cycle>
               <typ:cycle>
                  <!--You may enter the following 3 items in any order-->
                  <typ:distType>?</typ:distType>
                  <typ:cycleId>?</typ:cycleId>
                  <typ:value>?</typ:value>
               </typ:cycle>
            </mes:fixed>
            <!--Optional:-->
            <mes:payoutRule>?</mes:payoutRule>
         </mes:new>
      </mes:ModifyHierarchyAffiliateCommissionDistRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ModifyHierarchyAffiliateCommissionDistRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ModifyLoanAmount" bindingOperationName="ModifyLoanAmount" type="Request-Response" outputName="ModifyLoanAmountResponse" inputName="ModifyLoanAmountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ModifyLoanAmountRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <mes:newLoanAmount>?</mes:newLoanAmount>
      </mes:ModifyLoanAmountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ModifyLoanAmountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ModifyLoanDueDate" bindingOperationName="ModifyLoanDueDate" type="Request-Response" outputName="ModifyLoanDueDateResponse" inputName="ModifyLoanDueDateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ModifyLoanDueDateRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
         <mes:currentLoanDueDate>
            <typ:date format="?" value="?"/>
         </mes:currentLoanDueDate>
         <mes:newLoanDueDate>
            <typ:date format="?" value="?"/>
         </mes:newLoanDueDate>
      </mes:ModifyLoanDueDateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ModifyLoanDueDateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="MoveAffiliateHierarchy" bindingOperationName="MoveAffiliateHierarchy" type="Request-Response" outputName="MoveAffiliateHierarchyResponse" inputName="MoveAffiliateHierarchyRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:MoveAffiliateHierarchyRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliateType>?</mes:affiliateType>
         <mes:currentParentAffiliateId>?</mes:currentParentAffiliateId>
         <mes:newParentAffilaiteId>?</mes:newParentAffilaiteId>
      </mes:MoveAffiliateHierarchyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/MoveAffiliateHierarchyRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="OverrideSubscriberFee" bindingOperationName="OverrideSubscriberFee" type="Request-Response" outputName="OverrideSubscriberFeeResponse" inputName="OverrideSubscriberFeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:OverrideSubscriberFeeRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliateType>?</mes:affiliateType>
         <mes:feeId>?</mes:feeId>
         <mes:feeAmount>?</mes:feeAmount>
      </mes:OverrideSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/OverrideSubscriberFeeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="PopulateBiweeklyEnrollmentSchedule" bindingOperationName="PopulateBiweeklyEnrollmentSchedule" type="Request-Response" outputName="PopulateBiweeklyEnrollmentScheduleResponse" inputName="PopulateBiweeklyEnrollmentScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:PopulateBiweeklyEnrollmentScheduleRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:subscriberId>?</mes:subscriberId>
         <mes:firstLoanDueDate>
            <typ:date format="?" value="?"/>
         </mes:firstLoanDueDate>
         <mes:monthlyLoanAmount>?</mes:monthlyLoanAmount>
         <mes:firstDebitDate>
            <typ:date format="?" value="?"/>
         </mes:firstDebitDate>
         <mes:deferredServiceFee>?</mes:deferredServiceFee>
      </mes:PopulateBiweeklyEnrollmentScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/PopulateBiweeklyEnrollmentScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ReactivateDraftSchedule" bindingOperationName="ReactivateDraftSchedule" type="Request-Response" outputName="ReactivateDraftScheduleResponse" inputName="ReactivateDraftScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ReactivateDraftScheduleRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:ReactivateDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ReactivateDraftScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ReactivateFeeSchedule" bindingOperationName="ReactivateFeeSchedule" type="Request-Response" outputName="ReactivateFeeScheduleResponse" inputName="ReactivateFeeScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ReactivateFeeScheduleRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
      </mes:ReactivateFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ReactivateFeeScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="RejectPayment" bindingOperationName="RejectPayment" type="Request-Response" outputName="RejectPaymentResponse" inputName="RejectPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:RejectPaymentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <mes:positivePayInquiryId>?</mes:positivePayInquiryId>
         <!--Optional:-->
         <mes:reason>?</mes:reason>
      </mes:RejectPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/RejectPaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="RemoveAffiliateDocument" bindingOperationName="RemoveAffiliateDocument" type="Request-Response" outputName="RemoveAffiliateDocumentResponse" inputName="RemoveAffiliateDocumentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:RemoveAffiliateDocumentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
         <mes:documentId>?</mes:documentId>
      </mes:RemoveAffiliateDocumentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/RemoveAffiliateDocumentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="ResetPassword" bindingOperationName="ResetPassword" type="Request-Response" outputName="ResetPasswordResponse" inputName="ResetPasswordRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ResetPasswordRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:Username>?</mes:Username>
         <mes:newpassword>?</mes:newpassword>
      </mes:ResetPasswordRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ResetPasswordRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="RevalidateAutoEnrollment" bindingOperationName="RevalidateAutoEnrollment" type="Request-Response" outputName="RevalidateAutoEnrollmentResponse" inputName="RevalidateAutoEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:RevalidateAutoEnrollmentRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
      </mes:RevalidateAutoEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/RevalidateAutoEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SaveAutoEnrollmentAffiliates" bindingOperationName="SaveAutoEnrollmentAffiliates" type="Request-Response" outputName="SaveAutoEnrollmentAffiliatesResponse" inputName="SaveAutoEnrollmentAffiliatesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SaveAutoEnrollmentAffiliatesRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:agencyId>?</mes:agencyId>
         <mes:dealerId>?</mes:dealerId>
         <!--Optional:-->
         <mes:fiMgrId>?</mes:fiMgrId>
         <!--Optional:-->
         <mes:unmatchedFiMgrId>?</mes:unmatchedFiMgrId>
      </mes:SaveAutoEnrollmentAffiliatesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SaveAutoEnrollmentAffiliatesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SaveChannelAttributeValue" bindingOperationName="SaveChannelAttributeValue" type="Request-Response" outputName="SaveChannelAttributeValueResponse" inputName="SaveChannelAttributeValueRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SaveChannelAttributeValueRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:attributes>
            <!--1 or more repetitions:-->
            <mes:attribute name="?" value="?"/>
         </mes:attributes>
      </mes:SaveChannelAttributeValueRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SaveChannelAttributeValueRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SaveStatewiseFeeCap" bindingOperationName="SaveStatewiseFeeCap" type="Request-Response" outputName="SaveStatewiseFeeCapResponse" inputName="SaveStatewiseFeeCapRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SaveStatewiseFeeCapRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:stateCode>?</mes:stateCode>
         <mes:licenseRequired>?</mes:licenseRequired>
         <!--Optional:-->
         <mes:licenseExpiry>
            <typ:date format="?" value="?"/>
         </mes:licenseExpiry>
         <!--Optional:-->
         <mes:stateFeeType>?</mes:stateFeeType>
         <!--Optional:-->
         <mes:stateFeeValue>?</mes:stateFeeValue>
      </mes:SaveStatewiseFeeCapRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SaveStatewiseFeeCapRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SearchCFTPayees" bindingOperationName="SearchCFTPayees" type="Request-Response" outputName="SearchCFTPayeesResponse" inputName="SearchCFTPayeesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SearchCFTPayeesRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:payeeName>?</mes:payeeName>
         <mes:loanAccountNumber>?</mes:loanAccountNumber>
      </mes:SearchCFTPayeesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SearchCFTPayeesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SendEmail" bindingOperationName="SendEmail" type="Request-Response" outputName="SendEmailResponse" inputName="SendEmailRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SendEmailRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:toEmailAddress>?</mes:toEmailAddress>
         <!--Optional:-->
         <mes:ccEmailAddress>?</mes:ccEmailAddress>
         <!--Optional:-->
         <mes:bccEmailAddress>?</mes:bccEmailAddress>
         <mes:subject>?</mes:subject>
         <mes:message>?</mes:message>
      </mes:SendEmailRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SendEmailRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SendReactivationCode" bindingOperationName="SendReactivationCode" type="Request-Response" outputName="SendReactivationCodeResponse" inputName="SendReactivationCodeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SendReactivationCodeRequest>
         <!--You may enter the following 3 items in any order-->
         <!--Optional:-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:username>?</mes:username>
         <mes:notifMethod>?</mes:notifMethod>
      </mes:SendReactivationCodeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SendReactivationCodeRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SkipDraft" bindingOperationName="SkipDraft" type="Request-Response" outputName="SkipDraftResponse" inputName="SkipDraftRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SkipDraftRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleId>?</mes:scheduleId>
      </mes:SkipDraftRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SkipDraftRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SkipPayment" bindingOperationName="SkipPayment" type="Request-Response" outputName="SkipPaymentResponse" inputName="SkipPaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SkipPaymentRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:skipPaymentDate>
            <typ:date format="?" value="?"/>
         </mes:skipPaymentDate>
         <mes:nextDraftDate>
            <typ:date format="?" value="?"/>
         </mes:nextDraftDate>
         <mes:restartLoanPaymentDate>
            <typ:date format="?" value="?"/>
         </mes:restartLoanPaymentDate>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
      </mes:SkipPaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SkipPaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SuspendDraftSchedule" bindingOperationName="SuspendDraftSchedule" type="Request-Response" outputName="SuspendDraftScheduleResponse" inputName="SuspendDraftScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SuspendDraftScheduleRequest>
         <!--You may enter the following 6 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:status>?</mes:status>
      </mes:SuspendDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SuspendDraftScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SuspendFeeSchedule" bindingOperationName="SuspendFeeSchedule" type="Request-Response" outputName="SuspendFeeScheduleResponse" inputName="SuspendFeeScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SuspendFeeScheduleRequest>
         <!--You may enter the following 9 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:feeIdList>
            <!--1 or more repetitions:-->
            <typ:feeId>?</typ:feeId>
         </mes:feeIdList>
         <!--Optional:-->
         <mes:feeTypeIdList>
            <!--1 or more repetitions:-->
            <typ:feeTypeId>?</typ:feeTypeId>
         </mes:feeTypeIdList>
         <!--Optional:-->
         <mes:externalFeeIdList>
            <!--1 or more repetitions:-->
            <typ:externalFeeId>?</typ:externalFeeId>
         </mes:externalFeeIdList>
      </mes:SuspendFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SuspendFeeScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="SuspendSettlement" bindingOperationName="SuspendSettlement" type="Request-Response" outputName="SuspendSettlementResponse" inputName="SuspendSettlementRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:SuspendSettlementRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:settlementId>?</mes:settlementId>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
      </mes:SuspendSettlementRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/SuspendSettlementRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UnlockAccount" bindingOperationName="UnlockAccount" type="Request-Response" outputName="UnlockAccountResponse" inputName="UnlockAccountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UnlockAccountRequest>
         <!--You may enter the following 3 items in any order-->
         <!--Optional:-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:username>?</mes:username>
         <mes:token>?</mes:token>
      </mes:UnlockAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UnlockAccountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateAdhocTransfer" bindingOperationName="UpdateAdhocTransfer" type="Request-Response" outputName="UpdateAdhocTransferResponse" inputName="UpdateAdhocTransferRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateAdhocTransferRequest>
         <!--You may enter the following 10 items in any order-->
         <mes:scheduleId>?</mes:scheduleId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:scheduleDate>
            <typ:date format="?" value="?"/>
         </mes:scheduleDate>
         <mes:amount>?</mes:amount>
         <mes:fromAccount>
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountId>?</typ:accountId>
         </mes:fromAccount>
         <mes:toAccount>
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountId>?</typ:accountId>
         </mes:toAccount>
         <mes:status>?</mes:status>
         <mes:comment>?</mes:comment>
      </mes:UpdateAdhocTransferRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateAdhocTransferRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateAffiliate" bindingOperationName="UpdateAffiliate" type="Request-Response" outputName="UpdateAffiliateResponse" inputName="UpdateAffiliateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateAffiliateRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:affiliateId>?</mes:affiliateId>
         <mes:affiliate>
            <!--You may enter the following 23 items in any order-->
            <!--Optional:-->
            <typ:externalAffiliateId>?</typ:externalAffiliateId>
            <!--Optional:-->
            <typ:parentAffiliateId>?</typ:parentAffiliateId>
            <!--Optional:-->
            <typ:affiliateType>?</typ:affiliateType>
            <!--Optional:-->
            <typ:name>?</typ:name>
            <!--Optional:-->
            <typ:address1>?</typ:address1>
            <!--Optional:-->
            <typ:address2>?</typ:address2>
            <!--Optional:-->
            <typ:city>?</typ:city>
            <!--Optional:-->
            <typ:state>?</typ:state>
            <!--Optional:-->
            <typ:zipcode>?</typ:zipcode>
            <!--Optional:-->
            <typ:email>?</typ:email>
            <!--Optional:-->
            <typ:phone>?</typ:phone>
            <!--Optional:-->
            <typ:fax>?</typ:fax>
            <!--Optional:-->
            <typ:businessType>?</typ:businessType>
            <!--Optional:-->
            <typ:taxId>?</typ:taxId>
            <!--Optional:-->
            <typ:payoutMethod>?</typ:payoutMethod>
            <!--Optional:-->
            <typ:payoutFrequency>?</typ:payoutFrequency>
            <!--Optional:-->
            <typ:payoutFrequencyValue>?</typ:payoutFrequencyValue>
            <!--Optional:-->
            <typ:routingNunber>?</typ:routingNunber>
            <!--Optional:-->
            <typ:accountType>?</typ:accountType>
            <!--Optional:-->
            <typ:accountNumber>?</typ:accountNumber>
            <!--Optional:-->
            <typ:holdersName>?</typ:holdersName>
            <!--Optional:-->
            <typ:checkAddress>
               <!--You may enter the following 5 items in any order-->
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </typ:checkAddress>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
         </mes:affiliate>
      </mes:UpdateAffiliateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateAffiliateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateAffiliateDocument" bindingOperationName="UpdateAffiliateDocument" type="Request-Response" outputName="UpdateAffiliateDocumentResponse" inputName="UpdateAffiliateDocumentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateAffiliateDocumentRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:externalAffiliateId>?</mes:externalAffiliateId>
         <mes:document>
            <!--You may enter the following 6 items in any order-->
            <!--Optional:-->
            <typ:documentId>?</typ:documentId>
            <typ:note>?</typ:note>
            <typ:name>?</typ:name>
            <typ:contentType>?</typ:contentType>
            <typ:base64EncodedContent>?</typ:base64EncodedContent>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
         </mes:document>
      </mes:UpdateAffiliateDocumentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateAffiliateDocumentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateApproval" bindingOperationName="UpdateApproval" type="Request-Response" outputName="UpdateApprovalResponse" inputName="UpdateApprovalRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateApprovalRequest>
         <!--You may enter the following 13 items in any order-->
         <mes:approvalId>?</mes:approvalId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <mes:approvalStatus>?</mes:approvalStatus>
         <mes:approvalAttemptMode>?</mes:approvalAttemptMode>
         <!--Optional:-->
         <mes:approvalAttemptDisposition>?</mes:approvalAttemptDisposition>
         <mes:approvalType>?</mes:approvalType>
         <!--Optional:-->
         <mes:note>?</mes:note>
         <!--Optional:-->
         <mes:documentName>?</mes:documentName>
         <!--Optional:-->
         <mes:documentType>?</mes:documentType>
         <!--Optional:-->
         <mes:base64EncodedContent>?</mes:base64EncodedContent>
         <!--Optional:-->
         <mes:contentType>?</mes:contentType>
         <mes:overwriteDocument>true</mes:overwriteDocument>
      </mes:UpdateApprovalRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateApprovalRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateAutoEnrollmentAffiliates" bindingOperationName="UpdateAutoEnrollmentAffiliates" type="Request-Response" outputName="UpdateAutoEnrollmentAffiliatesResponse" inputName="UpdateAutoEnrollmentAffiliatesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateAutoEnrollmentAffiliatesRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:agencyId>?</mes:agencyId>
         <!--Optional:-->
         <mes:subAgencyId>?</mes:subAgencyId>
         <mes:dealerId>?</mes:dealerId>
         <!--Optional:-->
         <mes:fiMgrId>?</mes:fiMgrId>
         <!--Optional:-->
         <mes:unmatchedFiMgrId>?</mes:unmatchedFiMgrId>
      </mes:UpdateAutoEnrollmentAffiliatesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateAutoEnrollmentAffiliatesRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateAutoPayeeInfo" bindingOperationName="UpdateAutoPayeeInfo" type="Request-Response" outputName="UpdateAutoPayeeInfoResponse" inputName="UpdateAutoPayeeInfoRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateAutoPayeeInfoRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:payeeId>?</mes:payeeId>
         <mes:newLenderInfo>
            <!--You may enter the following 5 items in any order-->
            <!--Optional:-->
            <mes:loanNumber>?</mes:loanNumber>
            <!--Optional:-->
            <mes:payeeId>?</mes:payeeId>
            <!--Optional:-->
            <mes:name>?</mes:name>
            <!--Optional:-->
            <mes:phone>?</mes:phone>
            <!--Optional:-->
            <mes:address>
               <!--You may enter the following 5 items in any order-->
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </mes:address>
         </mes:newLenderInfo>
      </mes:UpdateAutoPayeeInfoRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateAutoPayeeInfoRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateCaptureDraft" bindingOperationName="UpdateCaptureDraft" type="Request-Response" outputName="UpdateCaptureDraftResponse" inputName="UpdateCaptureDraftRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateCaptureDraftRequest>
         <!--You may enter the following 13 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:spaDraftId>?</mes:spaDraftId>
         <!--Optional:-->
         <mes:recurringType>?</mes:recurringType>
         <!--Optional:-->
         <mes:recurringStartDate>
            <typ:date format="?" value="?"/>
         </mes:recurringStartDate>
         <!--Optional:-->
         <mes:recurringAmount1>?</mes:recurringAmount1>
         <!--Optional:-->
         <mes:recurringDay1>?</mes:recurringDay1>
         <!--Optional:-->
         <mes:recurringAmount2>?</mes:recurringAmount2>
         <!--Optional:-->
         <mes:recurringDay2>?</mes:recurringDay2>
         <!--Optional:-->
         <mes:lumpSumDate>
            <typ:date format="?" value="?"/>
         </mes:lumpSumDate>
         <!--Optional:-->
         <mes:lumpSumAmount>?</mes:lumpSumAmount>
         <mes:lumpSumOnly>false</mes:lumpSumOnly>
      </mes:UpdateCaptureDraftRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateCaptureDraftRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateChannelAttributeValue" bindingOperationName="UpdateChannelAttributeValue" type="Request-Response" outputName="UpdateChannelAttributeValueResponse" inputName="UpdateChannelAttributeValueRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateChannelAttributeValueRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:firstLoanDueDate>
            <typ:date format="?" value="?"/>
         </mes:firstLoanDueDate>
         <mes:monthlyLoanAmount>?</mes:monthlyLoanAmount>
         <!--Optional:-->
         <mes:firstDebitAmount>?</mes:firstDebitAmount>
         <mes:firstDebitDate>
            <typ:date format="?" value="?"/>
         </mes:firstDebitDate>
         <!--Optional:-->
         <mes:isHalfDraft>false</mes:isHalfDraft>
      </mes:UpdateChannelAttributeValueRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateChannelAttributeValueRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateClient" bindingOperationName="UpdateClient" type="Request-Response" outputName="UpdateClientResponse" inputName="UpdateClientRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateClientRequest>
         <!--You may enter the following 22 items in any order-->
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:referralId type="RULESET" internal="YES">
            <typ:id>?</typ:id>
         </mes:referralId>
         <!--Optional:-->
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="?" value="?"/>
         </mes:dob>
         <!--Optional:-->
         <mes:address1>?</mes:address1>
         <!--Optional:-->
         <mes:address2>?</mes:address2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:WorkNumber>?</mes:WorkNumber>
         <!--Optional:-->
         <mes:mobile>?</mes:mobile>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:oldPassword>?</mes:oldPassword>
         <!--Optional:-->
         <mes:password>?</mes:password>
         <!--Optional:-->
         <mes:svaDocument>
            <!--You may enter the following 5 items in any order-->
            <typ:note>?</typ:note>
            <!--Optional:-->
            <typ:documentType>?</typ:documentType>
            <typ:base64EncodedContent>?</typ:base64EncodedContent>
            <typ:contentType>?</typ:contentType>
            <typ:documentName>?</typ:documentName>
         </mes:svaDocument>
         <!--Optional:-->
         <mes:enrollmentStatus>?</mes:enrollmentStatus>
      </mes:UpdateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateClientRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateClientBankAccount" bindingOperationName="UpdateClientBankAccount" type="Request-Response" outputName="UpdateClientBankAccountResponse" inputName="UpdateClientBankAccountRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateClientBankAccountRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:clientBankAccountId>?</mes:clientBankAccountId>
         <mes:routingNumber>?</mes:routingNumber>
         <mes:accountType>?</mes:accountType>
         <mes:accountNumber>?</mes:accountNumber>
         <mes:holdersName>?</mes:holdersName>
         <!--Optional:-->
         <mes:externalBankId>?</mes:externalBankId>
      </mes:UpdateClientBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateClientBankAccountRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateCoClient" bindingOperationName="UpdateCoClient" type="Request-Response" outputName="UpdateCoClientResponse" inputName="UpdateCoClientRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateCoClientRequest operation="EDIT">
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:clientId>?</mes:clientId>
         <mes:coClientFirstname>?</mes:coClientFirstname>
         <mes:coClientLastname>?</mes:coClientLastname>
         <!--Optional:-->
         <mes:coClientMiddleInitial>?</mes:coClientMiddleInitial>
         <!--Optional:-->
         <mes:coClientSsn>?</mes:coClientSsn>
         <mes:coClientDob>
            <typ:date format="?" value="?"/>
         </mes:coClientDob>
         <!--Optional:-->
         <mes:coClientPhone>?</mes:coClientPhone>
         <!--Optional:-->
         <mes:coClientWorkNumber>?</mes:coClientWorkNumber>
         <!--Optional:-->
         <mes:coClientMobile>?</mes:coClientMobile>
         <!--Optional:-->
         <mes:coClientEmail>?</mes:coClientEmail>
      </mes:UpdateCoClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateCoClientRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateDraftItems" bindingOperationName="UpdateDraftItems" type="Request-Response" outputName="UpdateDraftItemsResponse" inputName="UpdateDraftItemsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateDraftItemsRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:scheduleList>
            <!--1 or more repetitions:-->
            <typ:draftItemSchedule>
               <!--You may enter the following 12 items in any order-->
               <!--Optional:-->
               <typ:scheduleId>?</typ:scheduleId>
               <!--Optional:-->
               <typ:clientId>?</typ:clientId>
               <!--Optional:-->
               <typ:externalClientId>?</typ:externalClientId>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:clientBankAccountId>?</typ:clientBankAccountId>
               <typ:status>?</typ:status>
               <typ:amount>?</typ:amount>
               <!--Optional:-->
               <typ:scheduleDate>
                  <typ:date format="?" value="?"/>
               </typ:scheduleDate>
               <!--Optional:-->
               <typ:updateRemainingSchedules>false</typ:updateRemainingSchedules>
               <!--Optional:-->
               <typ:allowDuplicates>false</typ:allowDuplicates>
               <!--Optional:-->
               <typ:comment>?</typ:comment>
               <!--Optional:-->
               <typ:remark>?</typ:remark>
            </typ:draftItemSchedule>
         </mes:scheduleList>
      </mes:UpdateDraftItemsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateDraftItemsRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateDraftSchedule" bindingOperationName="UpdateDraftSchedule" type="Request-Response" outputName="UpdateDraftScheduleResponse" inputName="UpdateDraftScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateDraftScheduleRequest>
         <!--You may enter the following 13 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientBankAccountId>?</mes:clientBankAccountId>
         <mes:status>?</mes:status>
         <mes:amount>?</mes:amount>
         <!--Optional:-->
         <mes:scheduleDate>
            <typ:date format="?" value="?"/>
         </mes:scheduleDate>
         <!--Optional:-->
         <mes:updateRemainingSchedules>false</mes:updateRemainingSchedules>
         <!--Optional:-->
         <mes:allowDuplicates>false</mes:allowDuplicates>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:remark>?</mes:remark>
      </mes:UpdateDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateDraftScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateEnrollmentError" bindingOperationName="UpdateEnrollmentError" type="Request-Response" outputName="UpdateEnrollmentErrorResponse" inputName="UpdateEnrollmentErrorRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateEnrollmentErrorRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:enrollmentErrorId>?</mes:enrollmentErrorId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:reason>?</mes:reason>
         <!--Optional:-->
         <mes:status>?</mes:status>
      </mes:UpdateEnrollmentErrorRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateEnrollmentErrorRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateEnrollmentTicket" bindingOperationName="UpdateEnrollmentTicket" type="Request-Response" outputName="UpdateEnrollmentTicketResponse" inputName="UpdateEnrollmentTicketRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateEnrollmentTicketRequest>
         <!--You may enter the following 15 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:enrollmentTicketId>?</mes:enrollmentTicketId>
         <!--Optional:-->
         <mes:transactionId>?</mes:transactionId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <mes:ticketType>?</mes:ticketType>
         <mes:ticketStatus>?</mes:ticketStatus>
         <mes:subject>?</mes:subject>
         <mes:assigneeId>?</mes:assigneeId>
         <!--Optional:-->
         <mes:reviewDate>
            <typ:date format="?" value="?"/>
         </mes:reviewDate>
         <mes:assosiatedAmount>?</mes:assosiatedAmount>
         <mes:reason>?</mes:reason>
         <mes:comment>?</mes:comment>
         <mes:message>?</mes:message>
      </mes:UpdateEnrollmentTicketRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateEnrollmentTicketRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateFeeBasis" bindingOperationName="UpdateFeeBasis" type="Request-Response" outputName="UpdateFeeBasisResponse" inputName="UpdateFeeBasisRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateFeeBasisRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <mes:debtFeeInformation>
            <typ:originalDebt>?</typ:originalDebt>
            <typ:dscFeeBasis>
               <!--You have a CHOICE of the next 2 items at this level-->
               <typ:Percentage>?</typ:Percentage>
               <typ:Fixed>?</typ:Fixed>
            </typ:dscFeeBasis>
         </mes:debtFeeInformation>
         <!--Optional:-->
         <mes:numberOfTradeLines>?</mes:numberOfTradeLines>
         <!--Optional:-->
         <mes:tradeLines>
            <!--1 or more repetitions:-->
            <typ:tradeLine>
               <typ:tradeLineName>?</typ:tradeLineName>
               <typ:currentBalance>?</typ:currentBalance>
            </typ:tradeLine>
         </mes:tradeLines>
      </mes:UpdateFeeBasisRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateFeeBasisRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateFeeSchedule" bindingOperationName="UpdateFeeSchedule" type="Request-Response" outputName="UpdateFeeScheduleResponse" inputName="UpdateFeeScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateFeeScheduleRequest>
         <!--You may enter the following 11 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:amount>?</mes:amount>
         <mes:scheduleDate>
            <typ:date format="?" value="?"/>
         </mes:scheduleDate>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <mes:updateRemainingSchedules>?</mes:updateRemainingSchedules>
         <!--Optional:-->
         <mes:remark>?</mes:remark>
      </mes:UpdateFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateFeeScheduleRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdatePartialEnrollment" bindingOperationName="UpdatePartialEnrollment" type="Request-Response" outputName="UpdatePartialEnrollmentResponse" inputName="UpdatePartialEnrollmentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdatePartialEnrollmentRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:partialEnrollmentInfo>
            <!--Optional:-->
            <typ:partialEnrollmentId>?</typ:partialEnrollmentId>
            <!--Optional:-->
            <typ:affiliatesInfo>
               <!--Zero or more repetitions:-->
               <typ:partialEnrollmentAffiliateInfo>
                  <typ:affiliateId>?</typ:affiliateId>
                  <typ:affiliateType>?</typ:affiliateType>
               </typ:partialEnrollmentAffiliateInfo>
            </typ:affiliatesInfo>
            <!--Optional:-->
            <typ:partnerId>?</typ:partnerId>
            <!--Optional:-->
            <typ:partner>
               <!--Optional:-->
               <typ:partnerId>?</typ:partnerId>
               <!--Optional:-->
               <typ:partnerName>?</typ:partnerName>
               <!--Optional:-->
               <typ:partnerAddress1>?</typ:partnerAddress1>
               <!--Optional:-->
               <typ:partnerAddress2>?</typ:partnerAddress2>
               <!--Optional:-->
               <typ:partnerCity>?</typ:partnerCity>
               <!--Optional:-->
               <typ:partnerState>?</typ:partnerState>
               <!--Optional:-->
               <typ:partnerZipcode>?</typ:partnerZipcode>
               <!--Optional:-->
               <typ:partnerPhone>?</typ:partnerPhone>
               <!--Optional:-->
               <typ:partnerEmail>?</typ:partnerEmail>
               <!--Optional:-->
               <typ:userName>?</typ:userName>
               <!--Optional:-->
               <typ:status>?</typ:status>
               <!--Optional:-->
               <typ:auditInformation>
                  <!--You may enter the following 6 items in any order-->
                  <typ:createdOn>
                     <typ:date format="?" value="?"/>
                  </typ:createdOn>
                  <typ:createdBy>?</typ:createdBy>
                  <typ:createdUserType>?</typ:createdUserType>
                  <typ:modifiedOn>
                     <typ:date format="?" value="?"/>
                  </typ:modifiedOn>
                  <typ:modifiedBy>?</typ:modifiedBy>
                  <typ:modifiedUserType>?</typ:modifiedUserType>
               </typ:auditInformation>
            </typ:partner>
            <!--Optional:-->
            <typ:affiliates>
               <!--Zero or more repetitions:-->
               <typ:partialEnrollmentAffiliates>
                  <!--You may enter the following 43 items in any order-->
                  <typ:subscriberId>?</typ:subscriberId>
                  <!--Optional:-->
                  <typ:affiliateId>?</typ:affiliateId>
                  <!--Optional:-->
                  <typ:externalAffiliateId>?</typ:externalAffiliateId>
                  <!--Optional:-->
                  <typ:parentAffiliateId>?</typ:parentAffiliateId>
                  <!--Optional:-->
                  <typ:parentExternalAffiliateId>?</typ:parentExternalAffiliateId>
                  <!--Optional:-->
                  <typ:externalId>?</typ:externalId>
                  <typ:affiliateType>?</typ:affiliateType>
                  <typ:name>?</typ:name>
                  <typ:address1>?</typ:address1>
                  <!--Optional:-->
                  <typ:address2>?</typ:address2>
                  <typ:city>?</typ:city>
                  <typ:state>?</typ:state>
                  <typ:zipcode>?</typ:zipcode>
                  <typ:email>?</typ:email>
                  <typ:phone>?</typ:phone>
                  <!--Optional:-->
                  <typ:fax>?</typ:fax>
                  <typ:businessType>?</typ:businessType>
                  <!--Optional:-->
                  <typ:taxId>?</typ:taxId>
                  <!--Optional:-->
                  <typ:payoutMethod>ACH</typ:payoutMethod>
                  <!--Optional:-->
                  <typ:payoutFrequency>MONTHLY</typ:payoutFrequency>
                  <!--Optional:-->
                  <typ:payoutFrequencyValue>15</typ:payoutFrequencyValue>
                  <!--Optional:-->
                  <typ:bankName>?</typ:bankName>
                  <!--Optional:-->
                  <typ:routingNunber>?</typ:routingNunber>
                  <!--Optional:-->
                  <typ:accountType>?</typ:accountType>
                  <!--Optional:-->
                  <typ:accountNumber>?</typ:accountNumber>
                  <!--Optional:-->
                  <typ:holdersName>?</typ:holdersName>
                  <!--Optional:-->
                  <typ:bankAddress1>?</typ:bankAddress1>
                  <!--Optional:-->
                  <typ:bankAddress2>?</typ:bankAddress2>
                  <!--Optional:-->
                  <typ:bankCity>?</typ:bankCity>
                  <!--Optional:-->
                  <typ:bankState>?</typ:bankState>
                  <!--Optional:-->
                  <typ:bankZipcode>?</typ:bankZipcode>
                  <!--Optional:-->
                  <typ:signatureDate>
                     <typ:date format="?" value="?"/>
                  </typ:signatureDate>
                  <!--Optional:-->
                  <typ:status>?</typ:status>
                  <!--Optional:-->
                  <typ:collectedBalance>?</typ:collectedBalance>
                  <!--Optional:-->
                  <typ:pendingBalance>?</typ:pendingBalance>
                  <!--Optional:-->
                  <typ:isPaidAsAdvance>?</typ:isPaidAsAdvance>
                  <!--Optional:-->
                  <typ:checkAddress>
                     <!--You may enter the following 5 items in any order-->
                     <!--Optional:-->
                     <typ:address1>?</typ:address1>
                     <!--Optional:-->
                     <typ:address2>?</typ:address2>
                     <!--Optional:-->
                     <typ:city>?</typ:city>
                     <!--Optional:-->
                     <typ:state>?</typ:state>
                     <!--Optional:-->
                     <typ:zip>?</typ:zip>
                  </typ:checkAddress>
                  <!--Optional:-->
                  <typ:isReferral>?</typ:isReferral>
                  <!--Optional:-->
                  <typ:referralStartDate>
                     <typ:date format="?" value="?"/>
                  </typ:referralStartDate>
                  <!--Optional:-->
                  <typ:referralEndDate>
                     <typ:date format="?" value="?"/>
                  </typ:referralEndDate>
                  <!--Optional:-->
                  <typ:fixed>
                     <!--Zero or more repetitions:-->
                     <typ:cycle>
                        <!--You may enter the following 3 items in any order-->
                        <typ:distType>?</typ:distType>
                        <typ:cycleId>?</typ:cycleId>
                        <typ:value>?</typ:value>
                     </typ:cycle>
                  </typ:fixed>
                  <!--Optional:-->
                  <typ:payoutRule>?</typ:payoutRule>
                  <!--Optional:-->
                  <typ:auditInformation>
                     <!--You may enter the following 6 items in any order-->
                     <typ:createdOn>
                        <typ:date format="?" value="?"/>
                     </typ:createdOn>
                     <typ:createdBy>?</typ:createdBy>
                     <typ:createdUserType>?</typ:createdUserType>
                     <typ:modifiedOn>
                        <typ:date format="?" value="?"/>
                     </typ:modifiedOn>
                     <typ:modifiedBy>?</typ:modifiedBy>
                     <typ:modifiedUserType>?</typ:modifiedUserType>
                  </typ:auditInformation>
               </typ:partialEnrollmentAffiliates>
            </typ:affiliates>
            <!--Optional:-->
            <typ:status>?</typ:status>
            <!--Optional:-->
            <typ:firstName>?</typ:firstName>
            <!--Optional:-->
            <typ:lastName>?</typ:lastName>
            <!--Optional:-->
            <typ:address1>?</typ:address1>
            <!--Optional:-->
            <typ:address2>?</typ:address2>
            <!--Optional:-->
            <typ:city>?</typ:city>
            <!--Optional:-->
            <typ:state>?</typ:state>
            <!--Optional:-->
            <typ:zipcode>?</typ:zipcode>
            <!--Optional:-->
            <typ:emailAddress>?</typ:emailAddress>
            <!--Optional:-->
            <typ:phoneNumber1>?</typ:phoneNumber1>
            <!--Optional:-->
            <typ:phoneNumber2>?</typ:phoneNumber2>
            <!--Optional:-->
            <typ:flex_1>?</typ:flex_1>
            <!--Optional:-->
            <typ:flex_2>?</typ:flex_2>
            <!--Optional:-->
            <typ:flex_3>?</typ:flex_3>
            <!--Optional:-->
            <typ:flex_4>?</typ:flex_4>
            <!--Optional:-->
            <typ:flex_5>?</typ:flex_5>
            <!--Optional:-->
            <typ:flex_6>?</typ:flex_6>
            <!--Optional:-->
            <typ:flex_7>?</typ:flex_7>
            <!--Optional:-->
            <typ:flex_8>?</typ:flex_8>
            <!--Optional:-->
            <typ:flex_9>?</typ:flex_9>
            <!--Optional:-->
            <typ:flex_10>?</typ:flex_10>
            <!--Optional:-->
            <typ:flex_11>?</typ:flex_11>
            <!--Optional:-->
            <typ:flex_12>?</typ:flex_12>
            <!--Optional:-->
            <typ:flex_13>?</typ:flex_13>
            <!--Optional:-->
            <typ:flex_14>?</typ:flex_14>
            <!--Optional:-->
            <typ:flex_15>?</typ:flex_15>
            <!--Optional:-->
            <typ:flex_16>?</typ:flex_16>
            <!--Optional:-->
            <typ:flex_17>?</typ:flex_17>
            <!--Optional:-->
            <typ:flex_18>?</typ:flex_18>
            <!--Optional:-->
            <typ:flex_19>?</typ:flex_19>
            <!--Optional:-->
            <typ:flex_20>?</typ:flex_20>
            <!--Optional:-->
            <typ:flex_21>?</typ:flex_21>
            <!--Optional:-->
            <typ:flex_22>?</typ:flex_22>
            <!--Optional:-->
            <typ:flex_23>?</typ:flex_23>
            <!--Optional:-->
            <typ:flex_24>?</typ:flex_24>
            <!--Optional:-->
            <typ:flex_25>?</typ:flex_25>
            <!--Optional:-->
            <typ:flex_26>?</typ:flex_26>
            <!--Optional:-->
            <typ:flex_27>?</typ:flex_27>
            <!--Optional:-->
            <typ:flex_28>?</typ:flex_28>
            <!--Optional:-->
            <typ:flex_29>?</typ:flex_29>
            <!--Optional:-->
            <typ:flex_30>?</typ:flex_30>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
         </mes:partialEnrollmentInfo>
      </mes:UpdatePartialEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdatePartialEnrollmentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdatePartialEnrollmentStatus" bindingOperationName="UpdatePartialEnrollmentStatus" type="Request-Response" outputName="UpdatePartialEnrollmentStatusResponse" inputName="UpdatePartialEnrollmentStatusRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdatePartialEnrollmentStatusRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:partialEnrollmentId>?</mes:partialEnrollmentId>
         <mes:status>?</mes:status>
      </mes:UpdatePartialEnrollmentStatusRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdatePartialEnrollmentStatusRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdatePayment" bindingOperationName="UpdatePayment" type="Request-Response" outputName="UpdatePaymentResponse" inputName="UpdatePaymentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdatePaymentRequest>
         <!--You may enter the following 2 items in any order-->
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <mes:updatePaymentList>
            <!--1 or more repetitions:-->
            <typ:updatePayment>
               <!--You may enter the following 9 items in any order-->
               <typ:subscriberId>?</typ:subscriberId>
               <typ:clientId>?</typ:clientId>
               <typ:paymentId>?</typ:paymentId>
               <typ:payeeId>?</typ:payeeId>
               <typ:accountNumber>?</typ:accountNumber>
               <typ:transactionMethod>?</typ:transactionMethod>
               <typ:amount>?</typ:amount>
               <typ:dueDate>
                  <typ:date format="?" value="?"/>
               </typ:dueDate>
               <typ:comment>?</typ:comment>
            </typ:updatePayment>
         </mes:updatePaymentList>
      </mes:UpdatePaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdatePaymentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdatePaymentStatus" bindingOperationName="UpdatePaymentStatus" type="Request-Response" outputName="UpdatePaymentStatusResponse" inputName="UpdatePaymentStatusRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdatePaymentStatusRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:clientId>?</mes:clientId>
         <mes:paymentId>?</mes:paymentId>
         <mes:status>?</mes:status>
      </mes:UpdatePaymentStatusRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdatePaymentStatusRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateReturnSchedule" bindingOperationName="UpdateReturnSchedule" type="Request-Response" outputName="UpdateReturnScheduleResponse" inputName="UpdateReturnScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateReturnScheduleRequest>
         <!--You may enter the following 7 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:effectiveDate>
            <typ:date format="?" value="?"/>
         </mes:effectiveDate>
         <!--Optional:-->
         <mes:amount>?</mes:amount>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:status>?</mes:status>
      </mes:UpdateReturnScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateReturnScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateRuleSet" bindingOperationName="UpdateRuleSet" type="Request-Response" outputName="UpdateRuleSetResponse" inputName="UpdateRuleSetRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateRuleSetRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:ruleSetId>?</mes:ruleSetId>
         <!--Optional:-->
         <mes:externalRuleSetId>?</mes:externalRuleSetId>
         <!--Optional:-->
         <mes:name>?</mes:name>
         <!--Optional:-->
         <mes:status>?</mes:status>
      </mes:UpdateRuleSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateRuleSetRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateRuleSetDefinition" bindingOperationName="UpdateRuleSetDefinition" type="Request-Response" outputName="UpdateRuleSetDefinitionResponse" inputName="UpdateRuleSetDefinitionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateRuleSetDefinitionRequest>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:ruleSetId>?</mes:ruleSetId>
         <!--Optional:-->
         <mes:externalRuleSetId>?</mes:externalRuleSetId>
         <!--Zero or more repetitions:-->
         <mes:commissionSet affiliateId="?" externalAffiliateId="?" feeId="?" externalFeeId="?">
            <typ:number>?</typ:number>
            <typ:amount>?</typ:amount>
            <typ:basis>?</typ:basis>
            <!--Optional:-->
            <typ:distributionRule>?</typ:distributionRule>
            <!--Optional:-->
            <typ:occuranceType>?</typ:occuranceType>
            <!--Optional:-->
            <typ:occuranceRange>
               <!--You may enter the following 2 items in any order-->
               <typ:startValue>?</typ:startValue>
               <typ:endValue>?</typ:endValue>
            </typ:occuranceRange>
         </mes:commissionSet>
         <mes:makeDefault>true</mes:makeDefault>
      </mes:UpdateRuleSetDefinitionRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateRuleSetDefinitionRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateSettlementSchedule" bindingOperationName="UpdateSettlementSchedule" type="Request-Response" outputName="UpdateSettlementScheduleResponse" inputName="UpdateSettlementScheduleRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateSettlementScheduleRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:settlementId>?</mes:settlementId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>?</mes:externalReferenceId>
         <!--Optional:-->
         <mes:payeeAddressId>?</mes:payeeAddressId>
         <!--Optional:-->
         <mes:PayeeExternalAddressId>?</mes:PayeeExternalAddressId>
         <!--Optional:-->
         <mes:settlementScheduleList>
            <!--Zero or more repetitions:-->
            <mes:SettlementScheduleInfo scheduleId="?" operation="?">
               <!--You may enter the following 6 items in any order-->
               <typ:effectiveDate>
                  <typ:date format="?" value="?"/>
               </typ:effectiveDate>
               <typ:paymentAmount>?</typ:paymentAmount>
               <typ:payeeId>?</typ:payeeId>
               <!--Optional:-->
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:externalCheckNumber>?</typ:externalCheckNumber>
               <typ:transactionMethod>?</typ:transactionMethod>
            </mes:SettlementScheduleInfo>
         </mes:settlementScheduleList>
      </mes:UpdateSettlementScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateSettlementScheduleRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateSignatureDate" bindingOperationName="UpdateSignatureDate" type="Request-Response" outputName="UpdateSignatureDateResponse" inputName="UpdateSignatureDateRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateSignatureDateRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:enrollmentId>?</mes:enrollmentId>
         <mes:signatureDate>
            <typ:date format="?" value="?"/>
         </mes:signatureDate>
      </mes:UpdateSignatureDateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateSignatureDateRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateSubscriberPartner" bindingOperationName="UpdateSubscriberPartner" type="Request-Response" outputName="UpdateSubscriberPartnerResponse" inputName="UpdateSubscriberPartnerRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateSubscriberPartnerRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:partner>
            <!--Optional:-->
            <typ:partnerId>?</typ:partnerId>
            <!--Optional:-->
            <typ:partnerName>?</typ:partnerName>
            <!--Optional:-->
            <typ:partnerAddress1>?</typ:partnerAddress1>
            <!--Optional:-->
            <typ:partnerAddress2>?</typ:partnerAddress2>
            <!--Optional:-->
            <typ:partnerCity>?</typ:partnerCity>
            <!--Optional:-->
            <typ:partnerState>?</typ:partnerState>
            <!--Optional:-->
            <typ:partnerZipcode>?</typ:partnerZipcode>
            <!--Optional:-->
            <typ:partnerPhone>?</typ:partnerPhone>
            <!--Optional:-->
            <typ:partnerEmail>?</typ:partnerEmail>
            <!--Optional:-->
            <typ:userName>?</typ:userName>
            <!--Optional:-->
            <typ:status>?</typ:status>
            <!--Optional:-->
            <typ:auditInformation>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInformation>
         </mes:partner>
         <!--Optional:-->
         <mes:partnerConfigs>
            <!--1 or more repetitions:-->
            <mes:config>
               <mes:name>?</mes:name>
               <mes:value>?</mes:value>
            </mes:config>
         </mes:partnerConfigs>
      </mes:UpdateSubscriberPartnerRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateSubscriberPartnerRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateSubscriberPayee" bindingOperationName="UpdateSubscriberPayee" type="Request-Response" outputName="UpdateSubscriberPayeeResponse" inputName="UpdateSubscriberPayeeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateSubscriberPayeeRequest>
         <!--You may enter the following 13 items in any order-->
         <!--Optional:-->
         <mes:payeeId>?</mes:payeeId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberPayeeId>?</mes:subscriberPayeeId>
         <mes:payeeName>?</mes:payeeName>
         <!--Optional:-->
         <mes:payeeStatus>true</mes:payeeStatus>
         <!--Optional:-->
         <mes:payeeDescription>?</mes:payeeDescription>
         <!--Optional:-->
         <mes:payeeWebsite>?</mes:payeeWebsite>
         <!--Optional:-->
         <mes:externalPayeeId>?</mes:externalPayeeId>
         <!--Optional:-->
         <mes:faxNo>?</mes:faxNo>
         <!--Optional:-->
         <mes:phoneNo>?</mes:phoneNo>
         <!--Optional:-->
         <mes:payeeAdresses>
            <!--Zero or more repetitions:-->
            <mes:address operation="?">
               <!--You may enter the following 7 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <!--Optional:-->
               <typ:externalId>?</typ:externalId>
               <!--Optional:-->
               <typ:address1>?</typ:address1>
               <!--Optional:-->
               <typ:address2>?</typ:address2>
               <!--Optional:-->
               <typ:city>?</typ:city>
               <!--Optional:-->
               <typ:state>?</typ:state>
               <!--Optional:-->
               <typ:zip>?</typ:zip>
            </mes:address>
         </mes:payeeAdresses>
         <!--Optional:-->
         <mes:payeeContacts>
            <!--Zero or more repetitions:-->
            <mes:contact operation="?">
               <!--You may enter the following 10 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <!--Optional:-->
               <typ:externalId>?</typ:externalId>
               <!--Optional:-->
               <typ:department>?</typ:department>
               <typ:name>?</typ:name>
               <!--Optional:-->
               <typ:title>?</typ:title>
               <!--Optional:-->
               <typ:homePhone ext="?">?</typ:homePhone>
               <!--Optional:-->
               <typ:businessPhone ext="?">?</typ:businessPhone>
               <!--Optional:-->
               <typ:mobilePhone>?</typ:mobilePhone>
               <!--Optional:-->
               <typ:fax>?</typ:fax>
               <!--Optional:-->
               <typ:email>?</typ:email>
            </mes:contact>
         </mes:payeeContacts>
         <!--Optional:-->
         <mes:payeeBankAccounts>
            <!--Zero or more repetitions:-->
            <mes:account operation="?">
               <!--You may enter the following 8 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <!--Optional:-->
               <typ:externalId>?</typ:externalId>
               <!--Optional:-->
               <typ:bankName>?</typ:bankName>
               <typ:routingNumber>?</typ:routingNumber>
               <!--Optional:-->
               <typ:accountHolderName>?</typ:accountHolderName>
               <!--Optional:-->
               <typ:accountNumber>?</typ:accountNumber>
               <!--Optional:-->
               <typ:accountType>?</typ:accountType>
               <!--Optional:-->
               <typ:status>?</typ:status>
            </mes:account>
         </mes:payeeBankAccounts>
      </mes:UpdateSubscriberPayeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UpdateSubscriberUser" bindingOperationName="UpdateSubscriberUser" type="Request-Response" outputName="UpdateSubscriberUserResponse" inputName="UpdateSubscriberUserRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdateSubscriberUserRequest>
         <!--You may enter the following 21 items in any order-->
         <mes:userId>?</mes:userId>
         <mes:subscriberId>?</mes:subscriberId>
         <mes:firstName>?</mes:firstName>
         <mes:userName>?</mes:userName>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <!--Optional:-->
         <mes:lastName>?</mes:lastName>
         <mes:email>?</mes:email>
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:password>?</mes:password>
         <!--Optional:-->
         <mes:addressLine1>?</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>?</mes:addressLine2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:comment>?</mes:comment>
         <!--Optional:-->
         <mes:existingPassword>?</mes:existingPassword>
         <mes:isActive>true</mes:isActive>
         <mes:isLocked>false</mes:isLocked>
         <mes:rolePermissions>
            <!--1 or more repetitions:-->
            <typ:rolePermission>?</typ:rolePermission>
         </mes:rolePermissions>
         <mes:isIpValidationRequired>true</mes:isIpValidationRequired>
         <!--Optional:-->
         <mes:ipAddresses>
            <!--1 or more repetitions:-->
            <typ:IpAddress>?</typ:IpAddress>
         </mes:ipAddresses>
      </mes:UpdateSubscriberUserRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateSubscriberUserRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="UploadDocument" bindingOperationName="UploadDocument" type="Request-Response" outputName="UploadDocumentResponse" inputName="UploadDocumentRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UploadDocumentRequest>
         <!--You may enter the following 8 items in any order-->
         <!--Optional:-->
         <mes:settlementId>?</mes:settlementId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleId>?</mes:scheduleId>
         <!--Optional:-->
         <mes:affiliateId>?</mes:affiliateId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:stateCode>?</mes:stateCode>
         <mes:document>
            <!--You may enter the following 5 items in any order-->
            <typ:note>?</typ:note>
            <typ:documentType>?</typ:documentType>
            <typ:base64EncodedContent>?</typ:base64EncodedContent>
            <typ:contentType>?</typ:contentType>
            <typ:documentName>?</typ:documentName>
         </mes:document>
      </mes:UploadDocumentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UploadDocumentRequest"/></con:call></con:operation><con:operation isOneWay="false" action="" name="VerifyIp" bindingOperationName="VerifyIp" type="Request-Response" outputName="VerifyIpResponse" inputName="VerifyIpRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:VerifyIpRequest>
         <mes:token>?</mes:token>
      </mes:VerifyIpRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/VerifyIpRequest"/></con:call></con:operation></con:interface><con:testSuite name="Automation_TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Automation_TestCase" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Automationdriver22april"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

int flagForExtraLargeResponse = 0;
int flagCount=0;
int iCountTestCase=0;
WritableSheet sheet;
WritableWorkbook workbook;


try{

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
def ActualResponseValue;
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 workbook = Workbook.createWorkbook(new File(TestResponseFile));
 sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
flagCount = 3

 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


/**
 * 
 */

//int responseSize = response.size();
int responseSize = response.length();
log.info "    >>>>    responseSize : "+responseSize;

int iDivisionCount;
if(responseSize>10000)
{
flagForExtraLargeResponse = 1;

double divisionCount = responseSize/10000;
int divisionOfResponseCount =  Math.round(divisionCount);

log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
{
	log.info "    >>>>    Division loop count : "+iDivisionCount;
	String responseName = "response"+iDivisionCount;
	int iStartLength = 0;
	int iEndLength = 10000*iDivisionCount;
	if(iDivisionCount>1)
	{
		log.info "   >>>>> into iDivisionCount>1 loop ";
		log.info "    >>>> iDivisionCount : "+iDivisionCount;
		iStartLength = (iDivisionCount-1)*10000;
		
	}
	//responseName = response.substring(iStartLength,32767*iDivisionCount);

	
	log.info "    >>>>>    iStartLength : "+iStartLength;
	log.info "    >>>>>    iEndLength : "+iEndLength;
	log.info "    >>>>>    responseSize : "+responseSize;
	if(!(iEndLength>=responseSize))
	{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
	log.info "    >>>>   IF BLOCK ";
	responseName = response.substring(iStartLength,iEndLength);
	}
	else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
	log.info "    >>>>   ELSE BLOCK ";
	responseName = response.substring(iStartLength,responseSize);	
	}
	log.info "   >>>>   responseName : "+responseName;
	Label labelResponse = new Label(iDivisionCount+1,iCountTestCase,responseName);
   	sheet.addCell(labelResponse);
}

//response = response.substring(0,32768);
}


if(flagForExtraLargeResponse>0)
{
	flagCount = flagCount+iDivisionCount;
}

Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
if(flagForExtraLargeResponse==0)
{
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
}




//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("ActualResponseValue,Value for "+xpath2+" is : "+ActualResponseValue);
//def v=ActualResponseValue.toString();
//def v1=v.trim();
//log.info("<<<ActualResponseValue toString:"+v);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
	
		//if(ActualResponseValue.toString().equalsIgnoreCase(""))
		//if(ActualResponseValue.toString().contains(""))
		if(ActualResponseValue==null)
		
		//if(v1.equals(null))
		//if(ActualResponseValue.toString()='')
		
		{
			log.info "I m here";
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue==null)
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE

if(TYPE.toString().equalsIgnoreCase("Boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
	
	if(ActualResponseValue)
	{
		log.info  "Boolean Value-1 - "+ActualResponseValue;
	}
	else if(ActualResponseValue.toString.equalsIgnoreCase('true')||ActualResponseValue.toString.equalsIgnoreCase('false'))
	{
		log.info  "Boolean Value-2 - "+ActualResponseValue;
	}
	else
	{

	typeErrorMsg="Data type mismatch in response : "+xpath2;
	Label labelNotBoolean = new Label(flagCount,iCountTestCase,typeErrorMsg);
   	sheet.addCell(labelNotBoolean);
    	flagCount = flagCount+1
   	
		
	}
	
	
	
	/*
	//ActualResponseValue=ActualResponseValue.toString();
	//boolean typeError2 = Boolean.valueOf(true.toBoolean());
	//boolean returnDataType = Boolean.valueOf(ActualResponseValue);
	typeError=boolean.valueOf(ActualResponseValue)
	*/
	log.info "    >>>>    Boolean DataType Check Completed";
}
if(TYPE.equals("Integer")||TYPE.equals("integer"))
{
log.info "    >>>>    Integer DataType CHECK";
typeError=Integer.valueOf(ActualResponseValue)	
}
//else if(TYPE.equalsIgnoreCase("String"))
if(TYPE.equals("String")||TYPE.equals("string"))
{
	log.info "    >>>>    String DataType CHECK";
typeError=String.valueOf(ActualResponseValue)
}
//else if(TYPE.equalsIgnoreCase("Long"))
if(TYPE.equals("Long")||TYPE.equals("long"))
{
	log.info "    >>>>    Long DataType CHECK";
typeError=Long.valueOf(ActualResponseValue)
}
if(TYPE.equals("Float")||TYPE.equals("float"))
{
	log.info "    >>>>    Float DataType CHECK";
typeError = Float.valueOf(ActualResponseValue)
}
if(TYPE.equals("Double")||TYPE.equals("double"))
{
	log.info "    >>>>    Double DataType CHECK";
typeError = Double.valueOf(ActualResponseValue)
}
/*
if(TYPE.toString().equalsIgnoreCase("Boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
	//ActualResponseValue=ActualResponseValue.toString();
	//boolean typeError2 = Boolean.valueOf(true.toBoolean());
	boolean returnDataType = Boolean.valueOf(ActualResponseValue);
	log.info "    >>>>    Boolean DataType Check Completed";
}
*/
if(TYPE.toString().toLowerCase().contains(("Enum").toLowerCase()))
    {
	log.info "    >>>>    Enum DataType CHECK";
	log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = TYPE.substring(TYPE.indexOf("[") + 1, TYPE.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ActualResponseValue).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
    }
else
typeError="Datatype should be either Integer,String,Long,Float,Boolean,double in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   	//workbook.write();
	//workbook.close();
}
//checking DataType done

}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}
log.info "       >>>>>>    flagCount : "+flagForExtraLargeResponse;
log.info "       >>>>>>    iDivisionCount : "+iDivisionCount;
log.info "       >>>>>>    flagForExtraLargeResponse : "+flagForExtraLargeResponse;
if(flagCount<=(3+iDivisionCount))
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}




workbook.write();
workbook.close();


}
/*
catch(XPathException xpathexp){
String expText = "An exception occurred : "+xpathexp;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();

}
*/
catch(NumberFormatException e){
	String expText = "An exception occurred : "+e;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();
}
catch(all){
	String expText = "An exception occurred : "+all;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();
}


log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"



]]></script></con:config></con:testStep><con:testStep type="groovy" name="DataTypeTest"><con:settings/><con:config><script>ActualResponseValue = true;

try{
	log.info "    >>>>    Boolean DataType CHECK";
	boolean typeError = Boolean.valueOf(true.toBoolean());

	if(true)
	{
		log.info  "        >>>>>>>>      true";
	}
	if(!false)
	{
		log.info "         >>>>>>>>      false";
	}
	if(!('wqerqwer'.toBoolean()))
	{
		log.info  "        >>>>>>   String";
	}


}
catch(all)
{
	log.info "        >>>>>    exp - "+all;
}
</script></con:config></con:testStep><con:testStep type="groovy" name="StringTest"><con:settings/><con:config><script>

/*
String str1 = "abcde";

if(str1.contains("bcd"))
{
	log.info " OK ";
}

if(str1.equalsIgnoreCase("ABCDE"))
{
	log.info " OK2 ";
}
*/


ParameterDataType = "Enum[PENDING,ACCEPTED,REJECTED]";

if(ParameterDataType.toString().toLowerCase().contains(("enum").toLowerCase()))
{
	log.info "   ok   ";
}
  


</script></con:config></con:testStep><con:testStep type="groovy" name="Automationdriver17april" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//

//Taking Testdata file location and Api name
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
  currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
  
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 
 def ActualResponseValue;
 
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}



//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 3
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);

	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(int iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;

def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRawRequest);
Label lableResponse = new Label(2,iCountTestCase,response);
   sheet.addCell(lableResponse);





//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("Value for "+xpath2+" is : "+ActualResponseValue);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
		
		if(ActualResponseValue.toString().equalsIgnoreCase(""))
		{
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue.toString().equalsIgnoreCase(""))
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE
if(TYPE.equalsIgnoreCase("Integer"))
typeError=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equalsIgnoreCase("String"))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equalsIgnoreCase("Long"))
typeError=Long.valueOf(ActualResponseValue)	
else
typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   
}
//checking DataType done
	
}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values   
for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is >>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath : "+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("Value for "+xpath1+" is : "+ActualResponseValue);

log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("ExcelResponse datatype"+ResponseFromTestData.getClass())



if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="getXmlNodes"><con:settings/><con:config><script><![CDATA[import com.eviware.soapui.support.XmlHolder

//testRunner.runTestStepByName("createClient");
// create groovyUtils and XmlHolder for response of Request 1 request


//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 //holder = groovyUtils.getXmlHolder( "createdraftItems#Response" )
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 //holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

def response = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header ver:CPIIDA-BUILD="build-57199" ver:CPIIDA-BUILD-TIME="2014-04-03_12-55-38" ver:CPIISRV-BUILD="build-57199" ver:CPIISRV-BUILD-TIME="2014-04-03_12-57-56" ver:CPIIWSRV-BUILD="build-57199" ver:CPIIWSRV-BUILD-TIME="2014-04-03_12-59-46" xmlns:ver="http://nationalpayment.net/ws/schemas/header/version"/>
   <SOAP-ENV:Body>
      <ns3:CreateClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/">
         <ns3:clientId>4320000010003809</ns3:clientId>
         <ns3:enrollmentId>363298</ns3:enrollmentId>
         <ns3:commandStatus>1</ns3:commandStatus>
         <ns3:errorMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </ns3:CreateClientResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''

//def response = testRunner.testCase.getTestStepByName("createClient").getPropertyValue("response")


log.info "  response "+response;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
holder = groovyUtils.getXmlHolder(response);

//log.info "    >>>> holder \n"+holder;
/*
// define namespace
holder.namespaces["ns"] = "http://www.w3.org/2001/XMLSchema-instance";

// loop item nodes in response message
for( item in holder.getNodeValues( "//ns:item" ))
log.info "Item : [$item]";
*/
// loop item nodes in response message
for( item in holder.getNodeValues("//item"));
log.info "Item : [$item]";
]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriverForSoap" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
 
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);
String TCID = TestDataValues1.getCell(0,iCountTestCase).getContents();
log.info "    >>>>    Executing TCID : "+TCID;


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter,iCountTestCase).getContents();
log.info"    >>>>    set :   >>    "+key+" : "+value;
// testRunner.testCase.setPropertyValue(key,value);
log.info "    >>>>  Request Name : "+testRunner.testCase.getTestStepByName(APIName);
def ReqHolder1 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1

 testRunner.testCase.setPropertyValue(key,value);
 ///testRunner.testCase.getTestStepByName(APIName).setPropertyValue(key,value);


log.info "    >>>>    EXECUTING REQUEST";
testRunner.runTestStepByName(APIName)
//log.info iCountTestCase;
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);

   log.info "    >>>>    FLAG ONE";
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

	log.info "    >>>>   iCounter1  = "+iCounter1;
	log.info "    >>>>   iCountTestCase = "+iCountTestCase;

	//log.info">>>>Nidhi"+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
}
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver2" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#TestDataFileLocation}
String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo














 int Length =  TestDataFile.lastIndexOf( '\\' )
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 5;


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	/**
	if(value.contains(" "))
	{
		value = '"'+value+'"';
	}
	//requestData = requestData+"-d "+TestDataProp1.getCell(0,iCounter).getContents()+"="+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()+" \\\n";
	requestData = requestData+"-d "+key+"="+value+" \\\n";
	**/

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
//log.info  "				>>>> rawReq =:"+rawReq


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
//log.info "				>>>> ReqHolder2 =:"+ReqHolder2


//*******************************************************************************************//

  --<//Getting JSON Response
def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
log.info "        JSON response holder            "+holder;

//Parsing JSON Response
def slurper = new JsonSlurper()
def ParsedJSONResponse = slurper.parseText(holder)
log.info "        JSON Parsed               "+ParsedJSONResponse

//Stringification of JSON response
String ResponseInString = holder.toString()
log.info "         JSON String                "+ResponseInString
String ParsedJSONResponseInString = ParsedJSONResponse.toString()


log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
Label label = new Label(4, iCountTestCase, ResponseInString); //column=0=A,row=0=1
		sheet.addCell(label);
//log.info "				>>>>>>>>>>>>>>>>>> : ResponseSchemaRowCount :"+ResponseSchemaRowCount

Label labelCurl = new Label(3, iCountTestCase, requestData); //column=0=A,row=0=1
		sheet.addCell(labelCurl);

for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
{//******************start loop for Response Schema validation
//flush2
ParameterDataType = "";
	
	if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
	{
		//log.info "          >>   YES  " +iCounter
		String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter
		if(!(ParsedJSONResponseInString.contains(requiredParameter)))
		{
			
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents() 
			String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter
			Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
			sheet.addCell(label2);
			flagCount = flagCount+1
			//testRunner.fail
		}
	}



//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		ParameterDataType="";
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
ResponseParameter = ResponseParameter+'":';
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
// log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)
 //log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)
	//log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
		log.info "				>>>> Enum Data Collection :"+EnumDataCollection
 		/*
 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 		*/
 		if(!(EnumDataCollection.matches("[0-9,]*")))
 		{
 			enumType = "String1"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

//Thread.sleep(500) 
if(ParameterDataType.equalsIgnoreCase('Float'))
{
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO float BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
else if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String1"))) //********** **

 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 

 
 else
 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO NON -- STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{

log.info "				>>>> The ResponseValueText is :"+ResposeValueText 

-- >
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType
	
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}




/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }

	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
//openEscrowopenEscrowParameterDataType = "";
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))


	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==5)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0004);

	
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0004);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()
}//************END loop for No of Reqeusts


}
catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}

catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}

log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
]]></script></con:config></con:testStep><con:testStep type="request" name="getClient" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="getClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
     <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sanjib.pal@icteas.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetClientRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:status xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:returnSPAAImage>${#TestCase#returnSPAAImage}</mes:returnSPAAImage>
      </mes:GetClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="updateClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
<soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:UpdateClientRequest>
         <!--You may enter the following 22 items in any order-->
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:firstname>${#TestCase#firstname} </mes:firstname>
         <mes:middleInitial>${#TestCase#middleInitial}</mes:middleInitial>
         <!--Optional:-->
         <mes:lastname>${#TestCase#lastname}</mes:lastname>
         <!--Optional:-->
         <mes:ssn>${#TestCase#ssn}</mes:ssn>
       
         <!--Optional:-->
         <mes:address1>${#TestCase#address1}</mes:address1>
         <!--Optional:-->
         <mes:address2>${#TestCase#address2}</mes:address2>
         <!--Optional:-->
         <mes:city>${#TestCase#city}</mes:city>
         <!--Optional:-->
         <mes:state>${#TestCase#state}</mes:state>
         <!--Optional:-->
         <mes:zip>${#TestCase#zip}</mes:zip>
         <!--Optional:-->
         <mes:phone>${#TestCase#phone}</mes:phone>
         <!--Optional:-->
         <mes:WorkNumber>${#TestCase#WorkNumber}</mes:WorkNumber>
         <!--Optional:-->
         <mes:mobile>${#TestCase#mobile}</mes:mobile>
         <!--Optional:-->
         <mes:email>${#TestCase#email}</mes:email>
         
        
         <!--Optional:-->
         <mes:enrollmentStatus></mes:enrollmentStatus>
      </mes:UpdateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="createClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws-1615244660.us-east-1.elb.amazonaws.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>

      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
		<mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
          <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <mes:firstname>${#TestCase#firstname}</mes:firstname>
         <mes:middleInitial>${#TestCase#middleInitial}</mes:middleInitial>
         <mes:lastname>${#TestCase#lastname}</mes:lastname>
         <mes:ssn>${#TestCase#ssn}</mes:ssn>
         <mes:dob>
            ${#TestCase#dob}
         </mes:dob>
                 <mes:address1>${#TestCase#address1}</mes:address1>
        
         <mes:city>${#TestCase#city}</mes:city>
         <!--Optional:-->
         <mes:state>${#TestCase#state}</mes:state>
         <!--Optional:-->
         <mes:zip>${#TestCase#zip}</mes:zip>
         <!--Optional:-->
         <mes:phone>${#TestCase#phone}</mes:phone>
         <mes:email>${#TestCase#email}</mes:email>
         <!--Optional:-->
         <mes:userName>${#TestCase#userName}</mes:userName>
         <mes:draftAmount>${#TestCase#draftAmount}</mes:draftAmount>
      </mes:CreateClientRequest>


       
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createdraftSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateDraftSchedule</con:operation><con:request name="createdraftSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateDraftScheduleRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientBankAccountId>${#TestCase#clientBankAccountId}</mes:clientBankAccountId>
         <mes:amount>${#TestCase#amount}</mes:amount>
         <mes:occurs>${#TestCase#occurs}</mes:occurs>
         <mes:startDate>${#TestCase#startDate}</mes:startDate>
         <mes:type>${#TestCase#type}</mes:type>
         <!--Optional:-->
         <mes:comment>${#TestCase#comment}</mes:comment>
         <!--Optional:-->
         <mes:remark>${#TestCase#remark}</mes:remark>
         <!--Optional:-->
         <mes:allowDuplicates>${#TestCase#allowDuplicates}</mes:allowDuplicates>
      </mes:CreateDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDraftScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updatedraftItems" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdateDraftItems</con:operation><con:request name="updatedraftItems" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:UpdateDraftItemsRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:scheduleList>
            <!--1 or more repetitions:-->
            <typ:draftItemSchedule>
               <!--You may enter the following 12 items in any order-->
               <!--Optional:-->
               <typ:scheduleId>${#TestCase#scheduleId}</typ:scheduleId>
               <!--Optional:-->
               <typ:clientId>${#TestCase#clientId}</typ:clientId>
               <!--Optional:-->
               <typ:externalClientId>${#TestCase#externalClientId}</typ:externalClientId>
               <!--Optional:-->
               <typ:externalReferenceId>${#TestCase#externalReferenceId}</typ:externalReferenceId>
               <!--Optional:-->
               <typ:clientBankAccountId>${#TestCase#clientBankAccountId}</typ:clientBankAccountId>
               <typ:status>${#TestCase#status}</typ:status>
               <typ:amount>${#TestCase#amount}</typ:amount>
               <!--Optional:-->
               <typ:scheduleDate>${#TestCase#scheduleDate}</typ:scheduleDate>
               <!--Optional:-->
               <typ:updateRemainingSchedules>${#TestCase#updateRemainingSchedules}</typ:updateRemainingSchedules>
               <!--Optional:-->
               <typ:allowDuplicates>${#TestCase#allowDuplicates}</typ:allowDuplicates>
               <!--Optional:-->
               <typ:comment>${#TestCase#comment}</typ:comment>
               <!--Optional:-->
               <typ:remark>${#TestCase#remark}</typ:remark>
            </typ:draftItemSchedule>
         </mes:scheduleList>
      </mes:UpdateDraftItemsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateDraftItemsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createdraftItems"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateDraftItems</con:operation><con:request name="createdraftItems" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateDraftItemsRequest>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalclientId}</mes:externalClientId>
         <mes:scheduleFrequencyType>${#TestCase#scheduleFrequencyType}</mes:scheduleFrequencyType>
         <mes:scheduleList>
            <!--1 or more repetitions:-->
            <typ:schedule>
               <!--You may enter the following 7 items in any order-->
               <typ:scheduleDate>${#TestCase#scheduleDate}</typ:scheduleDate>
               <typ:amount>${#TestCase#amount}</typ:amount>
               <!--Optional:-->
               <typ:externalReferenceId>${#TestCase#externalReferenceId}</typ:externalReferenceId>
               <!--Optional:-->
               <typ:clientBankAccountId>${#TestCase#clientBankAccountId}</typ:clientBankAccountId>
               <!--Optional:-->
               <typ:comment>${#TestCase#comment}</typ:comment>
               <!--Optional:-->
               <typ:remark>${#TestCase#remark}</typ:remark>
               <!--Optional:-->
               <typ:allowDuplicates>${#TestCase#allowDuplicates}</typ:allowDuplicates>
            </typ:schedule>
         </mes:scheduleList>
      </mes:CreateDraftItemsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDraftItemsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
 
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="request" name="updatecoClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdateCoClient</con:operation><con:request name="updatecoClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:UpdateCoClientRequest>
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
          <mes:coClientFirstname>${#TestCase#coClientFirstname}</mes:coClientFirstname>
         <mes:coClientLastname>${#TestCase#coClientLastname}</mes:coClientLastname>
         <mes:coClientSsn>${#TestCase#coClientSsn}</mes:coClientSsn>
         <mes:coClientDob>${#TestCase#coClientDob}</mes:coClientDob>
         
      </mes:UpdateCoClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateCoClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createcoClient"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="createcoClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateCoClientRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalclientId}</mes:externalClientId>
         <mes:coClientFirstname>${#TestCase#coclientfirstname}</mes:coClientFirstname>
         <mes:coClientLastname>${#TestCase#coclientlastname}</mes:coClientLastname>
        
         <mes:coClientSsn>${#TestCase#coclientssn}</mes:coClientSsn>
         <mes:coClientDob>${#TestCase#coclientDob}</mes:coClientDob>
         <!--Optional:-->
         <mes:coClientPhone>${#TestCase#coclientphone}</mes:coClientPhone>
         <!--Optional:-->
         <mes:coClientWorkNumber>${#TestCase#coclientworkNumber}</mes:coClientWorkNumber>
         <!--Optional:-->
         <mes:coClientMobile>${#TestCase#coclientmobile}</mes:coClientMobile>
         <!--Optional:-->
         <mes:coClientEmail>${#TestCase#coclientemail}</mes:coClientEmail>
      </mes:CreateCoClientRequest>
   </soapenv:Body>
</soapenv:Envelope>
]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updatedraftSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdateDraftSchedule</con:operation><con:request name="updatedraftSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:UpdateDraftScheduleRequest>
         <!--You may enter the following 13 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientBankAccountId>${#TestCase#clientBankAccountId}</mes:clientBankAccountId>
         <mes:status>${#TestCase#status}</mes:status>
         <mes:amount>${#TestCase#amount}</mes:amount>
         <!--Optional:-->
        <mes:scheduleDate>${#TestCase#scheduleDate}</mes:scheduleDate>
         <!--Optional:-->
         <mes:updateRemainingSchedules>${#TestCase#updateRemainingSchedules}</mes:updateRemainingSchedules>
         <!--Optional:-->
         <mes:allowDuplicates>${#TestCase#allowDuplicates}</mes:allowDuplicates>
         <!--Optional:-->
         <mes:comment>${#TestCase#comment}</mes:comment>
         <!--Optional:-->
         <mes:remark>${#TestCase#remark}</mes:remark>
      </mes:UpdateDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateDraftScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="cancelEnrollment" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CancelEnrollment</con:operation><con:request name="cancelEnrollment" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CancelEnrollmentRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:enrollmentId>${#TestCase#enrollmentId}      </mes:enrollmentId>
         <mes:cancelReasonCode>${#TestCase#cancelReasonCode}</mes:cancelReasonCode>
         <mes:cancelFeeAmt>${#TestCase#cancelFeeAmt}</mes:cancelFeeAmt>
         <!--Optional:-->
         
         <mes:comments>${#TestCase#comments}</mes:comments><mes:printCancelLetter>true</mes:printCancelLetter>
         <mes:waiveCancelFee>${#TestCase#waiveCancelFee}</mes:waiveCancelFee>
         <mes:waivePendingFee>${#TestCase#waivePendingFee}</mes:waivePendingFee>
         <mes:cancelledBy>${#TestCase#cancelledBy}</mes:cancelledBy>
      </mes:CancelEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>
]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CancelEnrollmentRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getdraftSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetDraftSchedule</con:operation><con:request name="getdraftSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetDraftScheduleRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
      </mes:GetDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getdraftscheduleList" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetDraftScheduleList</con:operation><con:request name="getdraftscheduleList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
<soapenv:Body>
      <mes:GetDraftScheduleListRequest>
         <!--You may enter the following 14 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:startDate>${#TestCase#startDate}</mes:startDate>
         <!--Optional:-->
         <mes:endDate>${#TestCase#endDate}</mes:endDate>
         <!--Optional:-->
         <mes:modifiedFromDate>${#TestCase#modifiedFromDate}</mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>${#TestCase#modifiedToDate}</mes:modifiedToDate>
         <!--Optional:-->
         <mes:order>${#TestCase#order}</mes:order>
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
         <!--Optional:-->
         <mes:status>${#TestCase#status}</mes:status>
         <!--Optional:-->
         <mes:pageNumber>${#TestCase#pageNumber}</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>${#TestCase#numberOfRecordsPerPage}</mes:numberOfRecordsPerPage>
      </mes:GetDraftScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createclientbankAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClientBankAccount</con:operation><con:request name="createclientbankAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateClientBankAccountRequest>
         <!--You may enter the following 8 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <mes:routingNumber>${#TestCase#routingNumber}</mes:routingNumber>
         <mes:accountType>${#TestCase#accountType}</mes:accountType>
         <mes:accountNumber>${#TestCase#accountNumber}</mes:accountNumber>
         <mes:holdersName>${#TestCase#holdersName}</mes:holdersName>
         <!--Optional:-->
         <mes:externalBankId>${#TestCase#externalBankId}</mes:externalBankId>
      </mes:CreateClientBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientBankAccountRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updateclientbankAccount"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdateClientBankAccount</con:operation><con:request name="updateclientbankAccount" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:UpdateClientBankAccountRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:clientBankAccountId>${#TestCase#clientBankAccountId}</mes:clientBankAccountId>
         <mes:routingNumber>${#TestCase#routingNumber}</mes:routingNumber>
         <mes:accountType>${#TestCase#accountType}</mes:accountType>
         <mes:accountNumber>${#TestCase#accountNumber}</mes:accountNumber>
         <mes:holdersName>${#TestCase#holdersName}</mes:holdersName>
         <!--Optional:-->
         <mes:externalBankId>${#TestCase#externalBankId}</mes:externalBankId>
      </mes:UpdateClientBankAccountRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateClientBankAccountRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getdraftschedulemodifiableDates" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetDraftScheduleModifiableDates</con:operation><con:request name="getdraftschedulemodifiableDates" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetDraftScheduleModifiableDatesRequest>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
      </mes:GetDraftScheduleModifiableDatesRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleModifiableDatesRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getdraftschedulelistwithnextDate" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetDraftScheduleListWithNextDate</con:operation><con:request name="getdraftschedulelistwithnextDate" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetDraftScheduleListWithNextDateRequest>
         <!--You may enter the following 14 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:startDate>${#TestCase#startDate}</mes:startDate>
         <!--Optional:-->
         <mes:endDate>${#TestCase#endDate}</mes:endDate>
         <!--Optional:-->
         <mes:modifiedFromDate>${#TestCase#modifiedFromDate}</mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>${#TestCase#modifiedToDate}</mes:modifiedToDate>
         <!--Optional:-->
         <mes:order>${#TestCase#order}</mes:order>
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
         <!--Optional:-->
         <mes:status>${#TestCase#status}</mes:status>
         <!--Optional:-->
         <mes:pageNumber>${#TestCase#pageNumber}</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>${#TestCase#numberOfRecordsPerPage}</mes:numberOfRecordsPerPage>
      </mes:GetDraftScheduleListWithNextDateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleListWithNextDateRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getclientbankaccountList" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetClientBankAccountList</con:operation><con:request name="getclientbankaccountList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetClientBankAccountListRequest>
         <!--You may enter the following 9 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:createdFrom>
            ${#TestCase#createdFrom}
         </mes:createdFrom>
         <!--Optional:-->
         <mes:createdTo>
            ${#TestCase#createdTo}
         </mes:createdTo>
         <!--Optional:-->
         <mes:modifiedFrom>
            ${#TestCase#modifiedFrom}
         </mes:modifiedFrom>
         <!--Optional:-->
         <mes:modifiedTo>
            ${#TestCase#modifiedTo}
         </mes:modifiedTo>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>${#TestCase#numberOfRecordsPerPage}</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:pageNumber>${#TestCase#pageNumber}</mes:pageNumber>
      </mes:GetClientBankAccountListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientBankAccountListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updatesubscriberPayee1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdateSubscriberPayee</con:operation><con:request name="updatesubscriberPayee1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
            <mes:UpdateSubscriberPayeeRequest>
         <!--You may enter the following 13 items in any order-->
         <!--Optional:-->
         <mes:payeeId>${#TestCase#payeeId}</mes:payeeId>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberPayeeId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:payeeName xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:payeeStatus>${#TestCase#payeeStatus}</mes:payeeStatus>
         <!--Optional:-->
         <mes:payeeDescription xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:payeeWebsite xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:externalPayeeId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:faxNo xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:phoneNo xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         
         <!--Optional:-->
         <mes:payeeAdresses><mes:address operation="CREATE">
         
               <typ:address1>${#TestCase#address1}</typ:address1>
               <!--Optional:-->
               <typ:address2>${#TestCase#address2}</typ:address2>
               <!--Optional:-->
               <typ:city>${#TestCase#city}</typ:city>
               <!--Optional:-->
               <typ:state>${#TestCase#state}</typ:state>
               <!--Optional:-->
               <typ:zip>${#TestCase#zip}</typ:zip><!--Zero or more repetitions:-->
             </mes:address>
         </mes:payeeAdresses>

        
      </mes:UpdateSubscriberPayeeRequest>
      
    
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createsubscriberPayee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateSubscriberPayee</con:operation><con:request name="createsubscriberPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
 <soapenv:Body>
      <mes:CreateSubscriberPayeeRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberPayeeId>${#TestCase#subscriberPayeeId}</mes:subscriberPayeeId>
         <mes:payeeName>${#TestCase#payeeName}</mes:payeeName>
         <!--Optional:-->
         <mes:payeeStatus>${#TestCase#payeeStatus}</mes:payeeStatus>
         <!--Optional:-->
         <mes:payeeDescription>${#TestCase#payeeDescription}</mes:payeeDescription>
         <!--Optional:-->
         <mes:payeeWebsite>${#TestCase#payeeWebsite}</mes:payeeWebsite>
         
         <!--Optional:-->
         <mes:faxNo>${#TestCase#faxNo}</mes:faxNo>
         <!--Optional:-->
         <mes:phoneNo>${#TestCase#phoneNo}</mes:phoneNo>
         <!--Optional:-->
         <mes:payeeAdresses>
            <!--Zero or more repetitions:-->
            <mes:address operation="CREATE">
               <!--You may enter the following 7 items in any order-->
               
               <!--Optional:-->
               <typ:address1>${#TestCase#address1}</typ:address1>
               <!--Optional:-->
               <typ:address2>${#TestCase#address2}</typ:address2>
               <!--Optional:-->
               <typ:city>${#TestCase#city}</typ:city>
               <!--Optional:-->
               <typ:state>${#TestCase#state}</typ:state>
               <!--Optional:-->
               <typ:zip>${#TestCase#zip}</typ:zip>
            </mes:address>
         </mes:payeeAdresses>
         <!--Optional:-->
         <mes:payeeContacts>
            <!--Zero or more repetitions:-->
            <mes:contact operation="CREATE">
               <!--You may enter the following 10 items in any order-->
               
               <!--Optional:-->
               <typ:department>${#TestCase#department}</typ:department>
               <typ:name>${#TestCase#name}</typ:name>
               
             
            </mes:contact>
         </mes:payeeContacts>
         <!--Optional:-->
         <mes:payeeBankAccounts>
            <!--Zero or more repetitions:-->
            <mes:account operation="CREATE">
               <!--You may enter the following 8 items in any order-->
              
               
               <!--Optional:-->
               <typ:bankName>${#TestCase#bankName}</typ:bankName>
               <typ:routingNumber>${#TestCase#routingNumber}</typ:routingNumber>
               <!--Optional:-->
               <typ:accountHolderName>${#TestCase#accountHolderName}</typ:accountHolderName>
               <!--Optional:-->
               <typ:accountNumber>${#TestCase#accountNumber}</typ:accountNumber>
               <!--Optional:-->
               <typ:accountType>${#TestCase#accountType}</typ:accountType>
               <!--Optional:-->
                <typ:status xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            </mes:account>
         </mes:payeeBankAccounts>
      </mes:CreateSubscriberPayeeRequest>
</soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updatepaymentStatus"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdatePaymentStatus</con:operation><con:request name="updatepaymentStatus" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:UpdatePaymentStatusRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <mes:paymentId>${#TestCase#paymentId}</mes:paymentId>
         <mes:status>${#TestCase#status}</mes:status>
      </mes:UpdatePaymentStatusRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdatePaymentStatusRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updatePayment"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdatePayment</con:operation><con:request name="updatePayment" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:UpdatePaymentRequest>
         <!--You may enter the following 2 items in any order-->
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <mes:updatePaymentList>
            <!--1 or more repetitions:-->
            <typ:updatePayment>
               <!--You may enter the following 9 items in any order-->
               <typ:subscriberId>${#TestCase#subscriberId}</typ:subscriberId>
               <typ:clientId>${#TestCase#clientId}</typ:clientId>
               <typ:paymentId>${#TestCase#paymentId}</typ:paymentId>
               <typ:payeeId>${#TestCase#payeeId}</typ:payeeId>
               <typ:accountNumber>${#TestCase#accountNumber}</typ:accountNumber>
               <typ:transactionMethod>${#TestCase#transactionMethod}</typ:transactionMethod>
               <typ:amount>${#TestCase#amount}</typ:amount>
               <typ:dueDate>
                  ${#TestCase#dueDate}
               </typ:dueDate>
               <typ:comment>${#TestCase#comment}</typ:comment>
            </typ:updatePayment>
         </mes:updatePaymentList>
      </mes:UpdatePaymentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdatePaymentRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createfeeSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateFeeSchedule</con:operation><con:request name="createfeeSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
  <soapenv:Body>
      <mes:CreateFeeScheduleRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <mes:subscriberFeeId>${#TestCase#subscriberFeeId}</mes:subscriberFeeId>
         <mes:amount>${#TestCase#amount}</mes:amount>
         <mes:occurs>${#TestCase#occurs}</mes:occurs>
         <mes:startDate>
            ${#TestCase#startDate}
         </mes:startDate>
         <!--Optional:-->
         <mes:comment>${#TestCase#comment}</mes:comment>
         <!--Optional:-->
         <mes:frequency>${#TestCase#frequency}</mes:frequency>
         <!--Optional:-->
         <mes:remark>${#TestCase#remark}</mes:remark>
         <!--Optional:-->
         <mes:settlementId>${#TestCase#settlementId}</mes:settlementId>
      </mes:CreateFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateFeeScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="gettransactionList"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetTransactionList</con:operation><con:request name="gettransactionList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[ <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetTransactionListRequest>
         <!--You may enter the following 15 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
              <mes:clientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:externalClientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:type xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:status xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
        
         <mes:modifiedFromDate>
            ${#TestCase#modifiedFromDate}
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            ${#TestCase#modifiedToDate}
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromDate>
            ${#TestCase#fromDate}
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            ${#TestCase#toDate}
         </mes:toDate>
         <!--Optional:-->
         <mes:skipDeleted>${#TestCase#skipDeleted}</mes:skipDeleted>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>${#TestCase#orderBy}</mes:orderBy>
         </mes:order>
         <!--Optional:-->
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
         <!--Optional:-->
         <mes:pageNo>${#TestCase#pageNo}</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>${#TestCase#resultsPerPage}</mes:resultsPerPage>
         <!--Optional:-->
         <mes:lastTransactionId>${#TestCase#lastTransactionId}</mes:lastTransactionId>
      </mes:GetTransactionListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createsettlementSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateSettlementSchedule</con:operation><con:request name="createsettlementSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      
      <mes:CreateSettlementScheduleRequest>
         <!--You may enter the following 20 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:externalReferenceId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:payeeId>${#TestCase#payeeId}</mes:payeeId>
         <!--Optional:-->
         <mes:payeeAddressId>${#TestCase#payeeAddressId}</mes:payeeAddressId>
         <!--Optional:-->
         <mes:PayeeExternalAddressId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:payeeContactId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:payeeExternalContactId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:payeeBankAccountId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:PayeeBankExternalAccountId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:currentBalance>${#TestCase#currentBalance}</mes:currentBalance>
         <mes:settlementAmount>${#TestCase#settlementAmount}</mes:settlementAmount>
         <!--Optional:-->
         <mes:settlementReference xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:numPayments>${#TestCase#numPayments}</mes:numPayments>
         <mes:accountNumber>${#TestCase#accountNumber}</mes:accountNumber>
         <!--Optional:-->
         <mes:comment xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:negotiator xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:isApprovalRequired>${#TestCase#isApprovalRequired}</mes:isApprovalRequired><mes:settlementScheduleList><typ:SettlementScheduleInfo><typ:effectiveDate><typ:date format="dd-MM-yyyy" value="09-07-2014"/></typ:effectiveDate><typ:paymentAmount>80</typ:paymentAmount><typ:payeeId>71240</typ:payeeId><typ:transactionMethod>CHECK_STD</typ:transactionMethod></typ:SettlementScheduleInfo></mes:settlementScheduleList>
         <!--Optional:-->
         
      </mes:CreateSettlementScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSettlementScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getsubscriberPayee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetSubscriberPayee</con:operation><con:request name="getsubscriberPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetSubscriberPayeeRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:payeeId>${#TestCase#payeeId}</mes:payeeId>
         <!--Optional:-->
         <mes:subscriberPayeeId>${#TestCase#subscriberPayeeId}</mes:subscriberPayeeId>
      </mes:GetSubscriberPayeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getsubscriberpayeeList"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetSubscriberPayeeList</con:operation><con:request name="getsubscriberpayeeList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetSubscriberPayeeListRequest>
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:numberOfRecordsPerPage>${#TestCase#numberOfRecordsPerPage}</mes:numberOfRecordsPerPage>
         <mes:pageNumber>${#TestCase#pageNumber}</mes:pageNumber>
         
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
         <!--Optional:-->
         <mes:payeeName>${#TestCase#payeeName}</mes:payeeName>
         <!--Optional:-->
         <mes:subscriberPayeeId>${#TestCase#subscriberPayeeId}</mes:subscriberPayeeId>
        
      </mes:GetSubscriberPayeeListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getfeescheduleList"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetFeeScheduleList</con:operation><con:request name="getfeescheduleList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetFeeScheduleListRequest>
         <!--You may enter the following 18 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <!--Optional:-->
         <mes:owner>${#TestCase#owner}</mes:owner>
         
         <!--Optional:-->
         <mes:startDate>
            ${#TestCase#startDate}
         </mes:startDate>
         <!--Optional:-->
         <mes:endDate>
            ${#TestCase#endDate}
         </mes:endDate>
       
         <!--Optional:-->
         <mes:filterReversedFees>${#TestCase#filterReversedFees}</mes:filterReversedFees>
         <!--Optional:-->
         <mes:modifiedFromDate>${#TestCase#modifiedFromDate}</mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>${#TestCase#modifiedToDate}</mes:modifiedToDate>
         
         <!--Optional:-->
         <mes:order>${#TestCase#order}</mes:order>
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
         <!--Optional:-->
         <mes:showRfee>${#TestCase#showRfee}</mes:showRfee>
         <mes:pageNumber>${#TestCase#pageNumber}</mes:pageNumber>
         <mes:numberOfRecordsPerPage>${#TestCase#numberOfRecordsPerPage}</mes:numberOfRecordsPerPage>
      </mes:GetFeeScheduleListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetFeeScheduleListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getfeeSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetFeeSchedule</con:operation><con:request name="getfeeSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetFeeScheduleRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
         
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         
      </mes:GetFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetFeeScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createsubscriberFee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateSubscriberFee</con:operation><con:request name="createsubscriberFee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateSubscriberFeeRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:fee>
            <!--You may enter the following 9 items in any order-->
            <!--Optional:-->
           
            <typ:feeId>${#TestCase#feeId}</typ:feeId>
            <!--Optional:-->
            <typ:externalFeeId>${#TestCase#externalFeeId}</typ:externalFeeId>
            <typ:type>${#TestCase#type}</typ:type>
            <typ:name>${#TestCase#name}</typ:name>
            <typ:description>${#TestCase#description}</typ:description>
            <typ:required>${#TestCase#required}</typ:required>
            <typ:priority>${#TestCase#priority}</typ:priority>
            <typ:amount>${#TestCase#amount}</typ:amount>
         </mes:fee>
      </mes:CreateSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberFeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updatefeeSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdateFeeSchedule</con:operation><con:request name="updatefeeSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
<soapenv:Body>
      <mes:UpdateFeeScheduleRequest>
         <!--You may enter the following 11 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
         <!--Optional:-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>${#TestCase#externalReferenceId}</mes:externalReferenceId>
         <mes:amount>${#TestCase#amount}</mes:amount>
         <mes:scheduleDate>
            ${#TestCase#scheduleDate}
         </mes:scheduleDate>
         <mes:updateRemainingSchedules>${#TestCase#updateRemainingSchedules}</mes:updateRemainingSchedules>
   </mes:UpdateFeeScheduleRequest>
</soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateFeeScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="listsubscriberFee"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>ListSubscriberFee</con:operation><con:request name="listsubscriberFee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
 </soapenv:Header>
   <soapenv:Body>
      <mes:ListSubscriberFeeRequest>
         <!--You may enter the following 6 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:type>${#TestCase#type}</mes:type>
         <!--Optional:-->
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
         <!--Optional:-->
         <mes:order>
            <!--Optional:-->
            <mes:orderBy>${#TestCase#orderBy}</mes:orderBy>
         </mes:order>
         <!--Optional:-->
         <mes:pageNo>${#TestCase#pageNo}</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>${#TestCase#resultsPerPage}</mes:resultsPerPage>
      </mes:ListSubscriberFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ListSubscriberFeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getClients"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetClients</con:operation><con:request name="getClients" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetClientsRequest>
         <!--You may enter the following 31 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId}</mes:externalClientId>
         <!--Optional:-->
         <mes:clientId>${#TestCase#clientId}</mes:clientId>
         
         
         <!--Optional:-->
         <mes:fromDate>
            ${#TestCase#fromDate}
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            ${#TestCase#toDate}
         </mes:toDate>
         <!--Optional:-->
         <mes:enrollmentFromDate>
            ${#TestCase#enrollmentFromDate}
         </mes:enrollmentFromDate>
         <!--Optional:-->
         <mes:enrollmentToDate>
            ${#TestCase#enrollmentToDate}
         </mes:enrollmentToDate>
         
         <!--Optional:-->
         <mes:addressLine1>${#TestCase#addressLine1}</mes:addressLine1>
         <!--Optional:-->
         <mes:addressLine2>${#TestCase#addressLine2}</mes:addressLine2>
         <!--Optional:-->
         <mes:city>${#TestCase#city}</mes:city>
         <!--Optional:-->
         <mes:state>${#TestCase#state}</mes:state>
         <!--Optional:-->
         <mes:zip>${#TestCase#zip}</mes:zip>
         <!--Optional:-->
         <mes:loanNumber>${#TestCase#loanNumber}</mes:loanNumber>
         <!--Optional:-->
         <mes:lenderName>${#TestCase#lenderName}</mes:lenderName>
         <!--Optional:-->
         <mes:VIN>${#TestCase#VIN}</mes:VIN>
         
         <!--Optional:-->
         <mes:accountNumber>${#TestCase#accountNumber}</mes:accountNumber>
         
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
         <mes:pageNo>${#TestCase#pageNo}</mes:pageNo>
         <mes:resultsPerPage>${#TestCase#resultsPerPage}</mes:resultsPerPage>
         <!--Optional:-->
         <mes:skipDeleted>${#TestCase#skipDeleted}</mes:skipDeleted>
      </mes:GetClientsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getenrollmentcommentList"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetEnrollmentCommentList</con:operation><con:request name="getenrollmentcommentList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws2.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetEnrollmentCommentListRequest>
         <!--You may enter the following 10 items in any order-->
         <!--Optional:-->
         <mes:commentId>${#TestCase#commentId}</mes:commentId>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:enrollmentId>${#TestCase#enrollmentId}</mes:enrollmentId>
         <!--Optional:-->
         <mes:scheduleId>${#TestCase#scheduleId}</mes:scheduleId>
         <!--Optional:-->
         <mes:modifiedFromDate>
            ${#TestCase#modifiedFromDate}
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            ${#TestCase#modifiedToDate}
         </mes:modifiedToDate>
         <mes:pageNo>${#TestCase#pageNo}</mes:pageNo>
         <mes:resultsPerPage>${#TestCase#resultsPerPage}</mes:resultsPerPage>
         <!--Optional:-->
         <mes:order>
            <mes:orderBy>${#TestCase#orderBy}</mes:orderBy>
         </mes:order>
         <mes:ascending>${#TestCase#ascending}</mes:ascending>
      </mes:GetEnrollmentCommentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentCommentListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="gettransactionlistbyIds"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetTransactionListByIds</con:operation><con:request name="gettransactionlistbyIds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetTransactionListByIdsRequest>
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:clientIds>
            <!--Zero or more repetitions:-->
            <typ:clientId>${#TestCase#clientId}</typ:clientId>
         </mes:clientIds>
         
         <!--Optional:-->
         <mes:status>${#TestCase#status}</mes:status>
       
         <!--Optional:-->
         <mes:pageNo>${#TestCase#pageNo}</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>${#TestCase#resultsPerPage}</mes:resultsPerPage>
      </mes:GetTransactionListByIdsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionListByIdsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getpaymentList"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetPaymentList</con:operation><con:request name="getpaymentList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetPaymentListRequest>
         <!--You may enter the following 19 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
          <mes:clientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         
         <!--Optional:-->
         <mes:transactionMethod xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:scheduleStatuses xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->

         <!--Optional:-->
         <mes:fromDate>
            ${#TestCase#fromDate}
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            ${#TestCase#toDate}
         </mes:toDate>
         <!--Optional:-->
         <mes:modifiedFromDate>
           ${#TestCase#modifiedFromDate}
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            ${#TestCase#modifiedToDate}
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromAmount>${#TestCase#fromAmount}</mes:fromAmount>
         <!--Optional:-->
         <mes:toAmount>${#TestCase#toAmount}</mes:toAmount>
         <!--Optional:-->
         <mes:payeeName xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:clientName xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:checkNumber xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:accountInfo xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:pageNumber xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="SCHEDULE_DATE" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:GetPaymentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="updatesubscriberpayeeCreate"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdateSubscriberPayee</con:operation><con:request name="updatesubscriberpayeeCreate" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[ <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
 <soapenv:Body>
 
    <mes:UpdateSubscriberPayeeRequest>
         <!--You may enter the following 13 items in any order-->
         <!--Optional:-->
         <mes:payeeId>${#TestCase#payeeId}</mes:payeeId>
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberPayeeId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:payeeName xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:payeeStatus>${#TestCase#payeeStatus}</mes:payeeStatus>
         <!--Optional:-->
         <mes:payeeDescription xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:payeeWebsite xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:externalPayeeId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:faxNo xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:phoneNo xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         
         <!--Optional:-->
         <mes:payeeAdresses>
         <mes:address operation="CREATE">
         <typ:id xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <typ:address1>${#TestCase#address1}
         </typ:address1>
         <typ:address2>
         ${#TestCase#address2}
         </typ:address2>
         <typ:city>
         ${#TestCase#city}
         </typ:city>
         <typ:state>
         ${#TestCase#state}
         </typ:state>
         <typ:zip>
         ${#TestCase#zip}
         </typ:zip>
         </mes:address>
         </mes:payeeAdresses>
         <mes:payeeContacts>
            <!--Zero or more repetitions:-->
            
         <mes:contact operation="CREATE">
         <typ:name>${#TestCase#name}</typ:name>
         <typ:mobilePhone>${#TestCase#mobilePhone}/typ:mobilePhone>
         <typ:email>${#TestCase#email}</typ:email>
         </mes:contact>
         </mes:payeeContacts>
         <!--Optional:-->
         <mes:payeeBankAccounts>
            <!--Zero or more repetitions:-->
            
         <mes:account operation="CREATE">
         <typ:routingNumber>${#TestCase#routingNumber}</typ:routingNumber>
         <typ:accountHolderName>${#TestCase#accountHolderName}</typ:accountHolderName>
         <typ:accountNumber>${#TestCase#accountNumber}</typ:accountNumber>
         <typ:accountType>${#TestCase#accountType}</typ:accountType>
         <typ:status>${#TestCase#status}</typ:status>
         </mes:account>
         </mes:payeeBankAccounts>
      </mes:UpdateSubscriberPayeeRequest>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdateSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="UpdatePaymentStatus - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>UpdatePaymentStatus</con:operation><con:request name="UpdatePaymentStatus - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:UpdatePaymentStatusRequest>
         <!--You may enter the following 4 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:clientId>?</mes:clientId>
         <mes:paymentId>?</mes:paymentId>
         <mes:status>?</mes:status>
      </mes:UpdatePaymentStatusRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/UpdatePaymentStatusRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getpaymentList1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetPaymentList</con:operation><con:request name="getpaymentList1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[ <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
<soapenv:Body>
      <mes:GetPaymentListRequest>
         <!--You may enter the following 19 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
                
         <!--Optional:-->
         <mes:fromDate>${#TestCase#fromDate}</mes:fromDate>
         <!--Optional:-->
         <mes:toDate>${#TestCase#toDate}</mes:toDate>
         <!--Optional:-->
         <mes:modifiedFromDate>
            ${#TestCase#modifiedFromDate}
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            ${#TestCase#modifiedToDate}
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromAmount>${#TestCase#fromAmount}</mes:fromAmount>
         <!--Optional:-->
         <mes:toAmount>${#TestCase#toAmount}</mes:toAmount>
         
          <typ:orderBy>
               ${#TestCase#orderBy}
            </typ:orderBy>
         </mes:orderBy>
         
      </mes:GetPaymentListRequest>
</soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="getclientIds" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetClientIds</con:operation><con:request name="getclientIds" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetClientIdsRequest>
         <!--You may enter the following 2 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <mes:noOfIds>${#TestCase#noOfIds}</mes:noOfIds>
      </mes:GetClientIdsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientIdsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="listtoplevelFee" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>ListTopLevelFee</con:operation><con:request name="listtoplevelFee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:ListTopLevelFeeRequest>
         <!--Optional:-->
         <mes:type>${#TestCase#type}</mes:type>
      </mes:ListTopLevelFeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ListTopLevelFeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="mehak" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

testRunner.runTestStepByName("ClearTCProperties");

def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")

 log.info "TestDataResponseSchema"+TestDataResponseSchema
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Response Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1
log.info"Expected Response value:"+ResponseFromTestData

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("ActualResponse value:"+ActualResponseValue)
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()




]]></script></con:config></con:testStep><con:testStep type="groovy" name="ClearTCProperties" disabled="true"><con:settings/><con:config><script>String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info ">>     Properties Size : "+props.size();
for (int i=0;i&lt;props.size();i++)
{
 log.info ">>     "+props[i];
 testRunner.testCase.setPropertyValue(props[i],"");
}</script></con:config></con:testStep><con:testStep type="request" name="Auth" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>Auth</con:operation><con:request name="Auth" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <mes:AuthRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:username>prasanth@bancbox.com</mes:username>
         <mes:password>abcd1234</mes:password>
         <!--Optional:-->
<!--         <mes:ipAddress>?</mes:ipAddress>-->
      </mes:AuthRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Test1" disabled="true"><con:settings/><con:config><script>testRunner.runTestStepByName("CreateClient");</script></con:config></con:testStep><con:testStep type="groovy" name="CP2" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
 
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="request" name="createClientvar" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="createClientvar" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
<soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header> 
      
   <soapenv:Body>
     < mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         
         <mes:subscriberId>${#TestCase#subscriberId)</mes:subscriberId>
         
         <mes:firstname>${#TestCase#firstname}</mes:firstname>
         
         <mes:lastname>${#TestCase#lastname}</mes:lastname>
         <!--Optional:-->
         <mes:ssn>${#TestCase#ssn}</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="dd/MM/yyyy" value="26/01/1978">
         </mes:dob>
         
         <mes:address1>${#TestCase#address1}</mes:address1>
         
         <!--Optional:-->
         <mes:city>${#TestCase#city}</mes:city>
         <!--Optional:-->
         <mes:state>${#TestCase#state}</mes:state>
         <!--Optional:-->
         <mes:zip>${#TestCase#zip}</mes:zip>
         <!--Optional:-->
         <mes:phone>${#TestCase#phone}</mes:phone>
         
         <!--Optional:-->
         <mes:mobile>${#TestCase#mobile}</mes:mobile>
         <!--Optional:-->
         <mes:email>${#TestCase#email}</mes:email>
         <!--Optional:-->
         <mes:userName>${#TestCase#userName}</mes:userName>
         <mes:draftAmount>${#TestCase#draftAmount}</mes:draftAmount>
         <!--Optional:-->

         
        
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>Nidhi27786</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver3" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#TestDataFileLocation}
String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo














 int Length =  TestDataFile.lastIndexOf( '\\' )
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 5;


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	/**
	if(value.contains(" "))
	{
		value = '"'+value+'"';
	}
	//requestData = requestData+"-d "+TestDataProp1.getCell(0,iCounter).getContents()+"="+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()+" \\\n";
	requestData = requestData+"-d "+key+"="+value+" \\\n";
	**/

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
//log.info  "				>>>> rawReq =:"+rawReq


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
//log.info "				>>>> ReqHolder2 =:"+ReqHolder2


//*******************************************************************************************//

 log.info "     <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		ParameterDataType="";
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
ResponseParameter = ResponseParameter+'":';
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
// log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)
 //log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)
	//log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
		log.info "				>>>> Enum Data Collection :"+EnumDataCollection
 		/*
 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 		*/
 		if(!(EnumDataCollection.matches("[0-9,]*")))
 		{
 			enumType = "String1"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

//Thread.sleep(500) 
if(ParameterDataType.equalsIgnoreCase('Float'))
{
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO float BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
else if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String1"))) //********** **

 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 

 
 else
 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO NON -- STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{

log.info "				>>>> The ResponseValueText is :"+ResposeValueText
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType
	
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}




/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }

	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
//openEscrowopenEscrowParameterDataType = "";
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))


	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==5)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0004);

	
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0004);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()


try{
	
	}

catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}

catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}


log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
]]></script></con:config></con:testStep><con:testStep type="groovy" name="practicebasiccode" disabled="true"><con:settings/><con:config><script><![CDATA[// Given an XML string
def xml = '''<root>
            |    <node>Tim</node>
            |    <node>Tom</node>
            |    <node>
            |      <anotherNode>another</anotherNode>
            |    </node>
            |</root>'''.stripMargin()

// Parse it
def parsed = new XmlParser().parseText( xml )
log.info"<<<Parsed:: "+parsed

// Deal with each node:
def handle
handle = { node ->
  if( node instanceof String ) {
      node
      //log.info"<<<Handle "+handle
  }
  else {
      [ (node.name()): node.collect( handle ) ]
      //log.info"<<<Handle "+handle
  }
}


// Convert it to a Map containing a List of Maps
def jsonObject = [ (parsed.name()): parsed.collect { node ->
   [ (node.name()): node.collect( handle ) ]
   
} ]
log.info"<<<JsonObject:: "+jsonObject


// And dump it as Json
//def json = new groovy.json.JsonBuilder( jsonObject )

//log.info"<<<Json:: "+json

// Check it's what we expected
//assert json.toString() == '{"root":[{"node":["Tim"]},{"node":["Tom"]},{"node":[{"anotherNode":["another"]}]}]}'
]]></script></con:config></con:testStep><con:testStep type="groovy" name="practice1getclient2" disabled="true"><con:settings/><con:config><script><![CDATA[// Given an XML string
def xml = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header ver:CPIIDA-BUILD="build-57199" ver:CPIIDA-BUILD-TIME="2014-04-03_12-55-38" ver:CPIISRV-BUILD="build-57199" ver:CPIISRV-BUILD-TIME="2014-04-03_12-57-56" ver:CPIIWSRV-BUILD="build-57199" ver:CPIIWSRV-BUILD-TIME="2014-04-03_12-59-46" xmlns:ver="http://nationalpayment.net/ws/schemas/header/version"/>
   <SOAP-ENV:Body>
      <ns3:GetClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/">
         <ns3:client>
            <ns2:id>4320000010004988</ns2:id>
            <ns2:externalClientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <ns2:firstName>Himadri</ns2:firstName>
            <ns2:middleInitial>S</ns2:middleInitial>
            <ns2:lastName>Kundu</ns2:lastName>
            <ns2:username>CFT-197032</ns2:username>
            <ns2:ssn>243-31-2469</ns2:ssn>
            <ns2:dob>
               <ns2:date format="MM/dd/yyyy" value="01/01/1983"/>
            </ns2:dob>
            <ns2:address1>Chandidas Avenue</ns2:address1>
            <ns2:address2>kolkata</ns2:address2>
            <ns2:city>Kolkata</ns2:city>
            <ns2:state>AL</ns2:state>
            <ns2:zip>12345</ns2:zip>
            <ns2:phone>1234567890</ns2:phone>
            <ns2:WorkNumber xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <ns2:mobile>1234567890</ns2:mobile>
            <ns2:email>ditftrfda@gmaicsbh.com</ns2:email>
            <ns2:totalNoOfDraftsCompleted>0</ns2:totalNoOfDraftsCompleted>
            <ns2:totalNoOfDrafts>0</ns2:totalNoOfDrafts>
            <ns2:totalNoOfFeesCompleted>0</ns2:totalNoOfFeesCompleted>
            <ns2:totalNoOfFees>0</ns2:totalNoOfFees>
            <ns2:lastDraftDate xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <ns2:nextDraftDate xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <ns2:nextDraftAmount xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <ns2:nextPaymentDate xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <ns2:nextPaymentAmount xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <ns2:enrollment>
               <ns2:id>197032</ns2:id>
               <ns2:subscriberId>200000</ns2:subscriberId>
               <ns2:spaaAprroval>
                  <ns2:approvalId>494535</ns2:approvalId>
                  <ns2:subscriberId>200000</ns2:subscriberId>
                  <ns2:approvedDate xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                  <ns2:approvalComment xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                  <ns2:approvalStatus>ACCEPTED</ns2:approvalStatus>
                  <ns2:approvalMode xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                  <ns2:approvalType>DRAFT</ns2:approvalType>
                  <ns2:approvalsDocument>
                     <ns2:documentId>461826</ns2:documentId>
                     <ns2:note>Uploaded By Admin Enrollment Module</ns2:note>
                     <ns2:name>Spa.pdf</ns2:name>
                     <ns2:contentType>application/pdf</ns2:contentType>
                     <ns2:base64EncodedContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     <ns2:auditInformation>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInformation>
                  </ns2:approvalsDocument>
                  <ns2:auditInfo>
                     <ns2:createdOn>
                        <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                     </ns2:createdOn>
                     <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                     <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     <ns2:modifiedOn xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     <ns2:modifiedBy xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                  </ns2:auditInfo>
               </ns2:spaaAprroval>
               <ns2:enrollmentStatuses>DELETED</ns2:enrollmentStatuses>
               <ns2:cipStatuses>VERIFIED</ns2:cipStatuses>
               <ns2:ofacStatuses>VERIFIED</ns2:ofacStatuses>
               <ns2:spaStatuses>VERIFIED</ns2:spaStatuses>
               <ns2:enrollDate>
                  <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
               </ns2:enrollDate>
               <ns2:isSvaCreated>true</ns2:isSvaCreated>
               <ns2:allDocumentsSigned xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
               <ns2:draftApprovalRequired xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
               <ns2:draftApprovalStatus xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
               <ns2:draftAmount>248.0</ns2:draftAmount>
               <ns2:virtualAcctId>208678</ns2:virtualAcctId>
               <ns2:virtualAcctNo>208678</ns2:virtualAcctNo>
               <ns2:currentBalance>0.0</ns2:currentBalance>
               <ns2:pendingBalance>463.38</ns2:pendingBalance>
               <ns2:noOfEnrollmentExceptions xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
               <ns2:ofacVerifiedDate>
                  <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
               </ns2:ofacVerifiedDate>
               <ns2:cipVerifiedDate>
                  <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
               </ns2:cipVerifiedDate>
               <ns2:spaaVerifiedDate>
                  <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
               </ns2:spaaVerifiedDate>
               <ns2:draftStartDate xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
               <ns2:mostRecentAction>02/04/2013 05:44:40 AM-41-rdggfdg fegrew</ns2:mostRecentAction>
               <ns2:enrollmentFees>
                  <ns2:fee>
                     <ns2:id>4862910</ns2:id>
                     <ns2:subscriberFeeId>959</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862926</ns2:id>
                     <ns2:subscriberFeeId>83</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862915</ns2:id>
                     <ns2:subscriberFeeId>6</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1030</ns2:priority>
                     <ns2:amount>7.5</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862936</ns2:id>
                     <ns2:subscriberFeeId>5</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1010</ns2:priority>
                     <ns2:amount>3.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862918</ns2:id>
                     <ns2:subscriberFeeId>1733</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>200.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862928</ns2:id>
                     <ns2:subscriberFeeId>9</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>2000</ns2:priority>
                     <ns2:amount>7.5</ns2:amount>
                     <ns2:frequency>MONTHLY</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862924</ns2:id>
                     <ns2:subscriberFeeId>957</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862937</ns2:id>
                     <ns2:subscriberFeeId>7</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1090</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862922</ns2:id>
                     <ns2:subscriberFeeId>87</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862913</ns2:id>
                     <ns2:subscriberFeeId>1318</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1006</ns2:priority>
                     <ns2:amount>8.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862917</ns2:id>
                     <ns2:subscriberFeeId>954</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862911</ns2:id>
                     <ns2:subscriberFeeId>10</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>10001</ns2:priority>
                     <ns2:amount>1.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862923</ns2:id>
                     <ns2:subscriberFeeId>4</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1070</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862931</ns2:id>
                     <ns2:subscriberFeeId>2</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1060</ns2:priority>
                     <ns2:amount>15.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862909</ns2:id>
                     <ns2:subscriberFeeId>1366</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>100.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862920</ns2:id>
                     <ns2:subscriberFeeId>952</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862934</ns2:id>
                     <ns2:subscriberFeeId>3</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1050</ns2:priority>
                     <ns2:amount>20.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862914</ns2:id>
                     <ns2:subscriberFeeId>1832</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>1.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862925</ns2:id>
                     <ns2:subscriberFeeId>1278</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1060</ns2:priority>
                     <ns2:amount>8.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862932</ns2:id>
                     <ns2:subscriberFeeId>11</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1040</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862929</ns2:id>
                     <ns2:subscriberFeeId>13</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1020</ns2:priority>
                     <ns2:amount>3.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862912</ns2:id>
                     <ns2:subscriberFeeId>175</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>9.95</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862927</ns2:id>
                     <ns2:subscriberFeeId>12</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>1000</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862935</ns2:id>
                     <ns2:subscriberFeeId>8</ns2:subscriberFeeId>
                     <ns2:type>TRANSACTION</ns2:type>
                     <ns2:priority>5000</ns2:priority>
                     <ns2:amount>25.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862919</ns2:id>
                     <ns2:subscriberFeeId>953</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862930</ns2:id>
                     <ns2:subscriberFeeId>1831</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>1.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862933</ns2:id>
                     <ns2:subscriberFeeId>1367</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>8.99</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862921</ns2:id>
                     <ns2:subscriberFeeId>958</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>1</ns2:priority>
                     <ns2:amount>0.0</ns2:amount>
                     <ns2:frequency>ADHOC</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
                  <ns2:fee>
                     <ns2:id>4862916</ns2:id>
                     <ns2:subscriberFeeId>1</ns2:subscriberFeeId>
                     <ns2:type>SERVICE</ns2:type>
                     <ns2:priority>10000</ns2:priority>
                     <ns2:amount>9.0</ns2:amount>
                     <ns2:frequency>ONCE</ns2:frequency>
                     <ns2:auditInfo>
                        <ns2:createdOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:createdOn>
                        <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                        <ns2:createdUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        <ns2:modifiedOn>
                           <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                        </ns2:modifiedOn>
                        <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                        <ns2:modifiedUserType xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </ns2:auditInfo>
                  </ns2:fee>
               </ns2:enrollmentFees>
               <ns2:briefClient>
                  <ns2:id>4320000010004988</ns2:id>
                  <ns2:externalClientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                  <ns2:firstName>Himadri</ns2:firstName>
                  <ns2:lastName>Kundu</ns2:lastName>
                  <ns2:middleInitial>S</ns2:middleInitial>
               </ns2:briefClient>
               <ns2:briefSubscriber>
                  <ns2:id>200000</ns2:id>
                  <ns2:name>CFT Internal Test</ns2:name>
                  <ns2:phone xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                  <ns2:email xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                  <ns2:abbreviation xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
               </ns2:briefSubscriber>
               <ns2:auditInfo>
                  <ns2:createdOn>
                     <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                  </ns2:createdOn>
                  <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
                  <ns2:createdUserType>INTERNAL</ns2:createdUserType>
                  <ns2:modifiedOn>
                     <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
                  </ns2:modifiedOn>
                  <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
                  <ns2:modifiedUserType>INTERNAL</ns2:modifiedUserType>
               </ns2:auditInfo>
            </ns2:enrollment>
            <ns2:coClients/>
            <ns2:auditInfo>
               <ns2:createdOn>
                  <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
               </ns2:createdOn>
               <ns2:createdBy>shiladitya.mondal@icteas.com</ns2:createdBy>
               <ns2:createdUserType>INTERNAL</ns2:createdUserType>
               <ns2:modifiedOn>
                  <ns2:date format="MM/dd/yyyy" value="02/04/2013"/>
               </ns2:modifiedOn>
               <ns2:modifiedBy>shiladitya.mondal@icteas.com</ns2:modifiedBy>
               <ns2:modifiedUserType>INTERNAL</ns2:modifiedUserType>
            </ns2:auditInfo>
            <ns2:affiliateGroup xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:client>
         <ns3:commandStatus>1</ns3:commandStatus>
         <ns3:errorMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </ns3:GetClientResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''

// Parse it
def parsed = new XmlParser().parseText( xml )
log.info"<<<Parsed:: "+parsed

// Deal with each node:
def handle
handle = { node ->
  if( node instanceof String ) {
      node
      //log.info"<<<Handle "+handle
  }
  else {
      [ (node.name()): node.collect( handle ) ]
      //log.info"<<<Handle "+handle
  }
}


// Convert it to a Map containing a List of Maps
def jsonObject = [ (parsed.name()): parsed.collect { node ->
   [ (node.name()): node.collect( handle ) ]
   
} ]
log.info"<<<JsonObject:: "+jsonObject


// And dump it as Json
def json = new groovy.json.JsonBuilder( jsonObject )

log.info"<<<Json:: "+json

// Check it's what we expected
//assert json.toString() == '{"root":[{"node":["Tim"]},{"node":["Tom"]},{"node":[{"anotherNode":["another"]}]}]}'

String jsonString = json.toString();
//log.info "    >>>>    jsonString : "+jsonString;

jsonString = jsonString.replaceAll("http://schemas.xmlsoap.org/soap/envelope/","");
//log.info "    >>>>    jsonString : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/messages}","");
//log.info "    >>>>    jsonString3 : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/types}","");
log.info "    >>>>    jsonString4: "+jsonString;

String strToRemove = "GetClientResponse";


int sizeOfstr = strToRemove.size();
log.info "    >>>> size = "+sizeOfstr;

int index1 = jsonString.indexOf(strToRemove);
index1 = index1+sizeOfstr;
log.info "    >>>> index1 = :"+index1;
String str2 = jsonString.substring(0,index1);
log.info "    >>>>   str2 : "+str2;
String str3 = jsonString.replace(str2,"");
log.info "    >>>> str now is : "+str3;
//Replacing curly and square brackets:-
String str4 = str3.replace("{","");
log.info "    >>>> str now is : "+str4;
String str5 = str4.replace("}","");
log.info "    >>>> str now is : "+str5;
String str6 = str5.replace("]","");
log.info "    >>>> str now is : "+str6;
String str7 = str6.replace("[","");
log.info "    >>>> str now is : "+str7;





]]></script></con:config></con:testStep><con:testStep type="groovy" name="practice1createclient1" disabled="true"><con:settings/><con:config><script><![CDATA[// Given an XML string
def xml = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header ver:CPIIDA-BUILD="build-57199" ver:CPIIDA-BUILD-TIME="2014-04-03_12-55-38" ver:CPIISRV-BUILD="build-57199" ver:CPIISRV-BUILD-TIME="2014-04-03_12-57-56" ver:CPIIWSRV-BUILD="build-57199" ver:CPIIWSRV-BUILD-TIME="2014-04-03_12-59-46" xmlns:ver="http://nationalpayment.net/ws/schemas/header/version"/>
   <SOAP-ENV:Body>
      <ns3:CreateClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/">
         <ns3:clientId>4320000010003809</ns3:clientId>
         <ns3:enrollmentId>363298</ns3:enrollmentId>
         <ns3:commandStatus>1</ns3:commandStatus>
         <ns3:errorMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </ns3:CreateClientResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''

// Parse it
def parsed = new XmlParser().parseText( xml )
log.info"<<<Parsed:: "+parsed

// Deal with each node:
def handle
handle = { node ->
  if( node instanceof String ) {
      node
      //log.info"<<<Handle "+handle
  }
  else {
      [ (node.name()): node.collect( handle ) ]
      //log.info"<<<Handle "+handle
  }
}
//log.info "    >>>>    NODE : "+node;

// Convert it to a Map containing a List of Maps
def jsonObject = [ (parsed.name()): parsed.collect { node ->
   [ (node.name()): node.collect( handle ) ]
   
} ]


log.info"<<<JsonObject:: "+jsonObject


// And dump it as Json
def json = new groovy.json.JsonBuilder( jsonObject )

log.info"<<<Json:: "+json

// Check it's what we expected
//assert json.toString() == '{"root":[{"node":["Tim"]},{"node":["Tom"]},{"node":[{"anotherNode":["another"]}]}]}'

String jsonString = json.toString();
log.info "    >>>>    jsonString : "+jsonString;

jsonString = jsonString.replaceAll("http://schemas.xmlsoap.org/soap/envelope/","");
//log.info "    >>>>    jsonString : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/messages}","");
//log.info "    >>>>    jsonString3 : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/types}","");
log.info "    >>>>    jsonString4: "+jsonString;

//String str = '"{}Envelope":[{"{}Header":[]},{"{}Body":[{"{CreateClientResponse":[{"{clientId":["4320000010003809"]}';
String strToRemove = "CreateClientResponse";


int sizeOfstr = strToRemove.size();
log.info "    >>>> size = "+sizeOfstr;

int index1 = jsonString.indexOf(strToRemove);
index1 = index1+sizeOfstr;
log.info "    >>>> index1 = :"+index1;
String str2 = jsonString.substring(0,index1);
log.info "    >>>>   str2 : "+str2;
String str3 = jsonString.replace(str2,"");
log.info "    >>>> str now is : "+str3;
//Replacing curly and square brackets:-
String str4 = str3.replace("{","");
log.info "    >>>> str now is : "+str4;
String str5 = str4.replace("}","");
log.info "    >>>> str now is : "+str5;
String str6 = str5.replace("]","");
log.info "    >>>> str now is : "+str6;
String str7 = str6.replace("[","");
log.info "    >>>> str now is >> "+str7;




]]></script></con:config></con:testStep><con:testStep type="groovy" name="TestString" disabled="true"><con:settings/><con:config><script>String str = '"{}Envelope":[{"{}Header":[]},{"{}Body":[{"{CreateClientResponse":[{"{clientId":["4320000010003809"]}';
String strToRemove = "CreateClientResponse";


int sizeOfstr = strToRemove.size();
log.info "    >>>> size = "+sizeOfstr;

int index1 = str.indexOf(strToRemove);
index1 = index1+sizeOfstr;
log.info "    >>>> index1 = :"+index1;
String str2 = str.substring(0,index1);
log.info "    >>>>   str2 : "+str2;
String str3 = str.replace(str2,"");
log.info "    >>>> str3 now is : "+str3;
</script></con:config></con:testStep><con:testStep type="groovy" name="practiceupdateclient" disabled="true"><con:settings/><con:config><script><![CDATA[// Given an XML string
def xml = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"><SOAP-ENV:Header xmlns:ver="http://nationalpayment.net/ws/schemas/header/version" ver:CPIIDA-BUILD="build-51041" ver:CPIIDA-BUILD-TIME="2013-11-18_06-11-05" ver:CPIISRV-BUILD="build-51354" ver:CPIISRV-BUILD-TIME="2013-11-18_06-13-03" ver:CPIIWSRV-BUILD="build-50959" ver:CPIIWSRV-BUILD-TIME="2013-11-18_06-20-01"/><SOAP-ENV:Body><ns3:UpdateClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/"><ns3:clientId>4320000110140135</ns3:clientId><ns3:commandStatus>1</ns3:commandStatus><ns3:errorMessage xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/></ns3:UpdateClientResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>'''

// Parse it
def parsed = new XmlParser().parseText( xml )
log.info"<<<Parsed:: "+parsed

// Deal with each node:
def handle
handle = { node ->
  if( node instanceof String ) {
      node
      //log.info"<<<Handle "+handle
  }
  else {
      [ (node.name()): node.collect( handle ) ]
      //log.info"<<<Handle "+handle
  }
}
//log.info "    >>>>    NODE : "+node;

// Convert it to a Map containing a List of Maps
def jsonObject = [ (parsed.name()): parsed.collect { node ->
   [ (node.name()): node.collect( handle ) ]
   
} ]


log.info"<<<JsonObject:: "+jsonObject


// And dump it as Json
def json = new groovy.json.JsonBuilder( jsonObject )

log.info"<<<Json:: "+json

// Check it's what we expected
//assert json.toString() == '{"root":[{"node":["Tim"]},{"node":["Tom"]},{"node":[{"anotherNode":["another"]}]}]}'

String jsonString = json.toString();
log.info "    >>>>    jsonString : "+jsonString;

jsonString = jsonString.replaceAll("http://schemas.xmlsoap.org/soap/envelope/","");
//log.info "    >>>>    jsonString : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/messages}","");
//log.info "    >>>>    jsonString3 : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/types}","");
log.info "    >>>>    jsonString4: "+jsonString;

//String str = '"{}Envelope":[{"{}Header":[]},{"{}Body":[{"{CreateClientResponse":[{"{clientId":["4320000010003809"]}';
String strToRemove = "UpdateClientResponse";


int sizeOfstr = strToRemove.size();
log.info "    >>>> size = "+sizeOfstr;

int index1 = jsonString.indexOf(strToRemove);
index1 = index1+sizeOfstr;
log.info "    >>>> index1 = :"+index1;
String str2 = jsonString.substring(0,index1);
log.info "    >>>>   str2 : "+str2;
String str3 = jsonString.replace(str2,"");
log.info "    >>>> str now is : "+str3;
//Replacing curly and square brackets:-
String str4 = str3.replace("{","");
log.info "    >>>> str now is : "+str4;
String str5 = str4.replace("}","");
log.info "    >>>> str now is : "+str5;
String str6 = str5.replace("]","");
log.info "    >>>> str now is : "+str6;
String str7 = str6.replace("[","");
log.info "    >>>> str now is : "+str7;




]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriverForSoapnewcode" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
 
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);
String TCID = TestDataValues1.getCell(0,iCountTestCase).getContents();
log.info "    >>>>    Executing TCID : "+TCID;


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter,iCountTestCase).getContents();
log.info"    >>>>    set :   >>    "+key+" : "+value;
// testRunner.testCase.setPropertyValue(key,value);
log.info "    >>>>  Request Name : "+testRunner.testCase.getTestStepByName(APIName);
def ReqHolder1 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1

 testRunner.testCase.setPropertyValue(key,value);
 ///testRunner.testCase.getTestStepByName(APIName).setPropertyValue(key,value);


log.info "    >>>>    EXECUTING REQUEST";
testRunner.runTestStepByName(APIName)
//log.info "    >>>>    API Name"+APIName;

log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response
//}
log.info "<<<<<New code started here>>>>>>>>>>>>>"

// Parse it
def parsed = new XmlParser().parseText( xml )
log.info"<<<Parsed:: "+parsed

// Deal with each node:
def handle
handle = { node ->
  if( node instanceof String ) {
      node
      //log.info"<<<Handle "+handle
  }
  else {
      [ (node.name()): node.collect( handle ) ]
      //log.info"<<<Handle "+handle
  }
}
}
//log.info "    >>>>    NODE : "+node;

// Convert it to a Map containing a List of Maps
def jsonObject = [ (parsed.name()): parsed.collect { node ->
   [ (node.name()): node.collect( handle ) ]
   
} ]


log.info"<<<JsonObject:: "+jsonObject


// And dump it as Json
def json = new groovy.json.JsonBuilder( jsonObject )

log.info"<<<Json:: "+json

// Check it's what we expected
//assert json.toString() == '{"root":[{"node":["Tim"]},{"node":["Tom"]},{"node":[{"anotherNode":["another"]}]}]}'

String jsonString = json.toString();
log.info "    >>>>    jsonString : "+jsonString;

jsonString = jsonString.replaceAll("http://schemas.xmlsoap.org/soap/envelope/","");
//log.info "    >>>>    jsonString : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/messages}","");
//log.info "    >>>>    jsonString3 : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/types}","");
log.info "    >>>>    jsonString4: "+jsonString;

//String str = '"{}Envelope":[{"{}Header":[]},{"{}Body":[{"{CreateClientResponse":[{"{clientId":["4320000010003809"]}';
String strToRemove = "CreateClientResponse";


int sizeOfstr = strToRemove.size();
log.info "    >>>> size = "+sizeOfstr;

int index1 = jsonString.indexOf(strToRemove);
index1 = index1+sizeOfstr;
log.info "    >>>> index1 = :"+index1;
String str2 = jsonString.substring(0,index1);
log.info "    >>>>   str2 : "+str2;
String str3 = jsonString.replace(str2,"");
log.info "    >>>> str now is : "+str3;
//Replacing curly and square brackets:-
String str4 = str3.replace("{","");
log.info "    >>>> str now is : "+str4;
String str5 = str4.replace("}","");
log.info "    >>>> str now is : "+str5;
String str6 = str5.replace("]","");
log.info "    >>>> str now is : "+str6;
String str7 = str6.replace("[","");
log.info "    >>>> str now is >> "+str7;








log.info"<<<<<New code ended here"

log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
//}]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriverForSoapnewcode1" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
 
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);
String TCID = TestDataValues1.getCell(0,iCountTestCase).getContents();
log.info "    >>>>    Executing TCID : "+TCID;


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter,iCountTestCase).getContents();
log.info"    >>>>    set :   >>    "+key+" : "+value;
// testRunner.testCase.setPropertyValue(key,value);
log.info "    >>>>  Request Name : "+testRunner.testCase.getTestStepByName(APIName);
def ReqHolder1 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1

 testRunner.testCase.setPropertyValue(key,value);
 ///testRunner.testCase.getTestStepByName(APIName).setPropertyValue(key,value);


log.info "    >>>>    EXECUTING REQUEST";
testRunner.runTestStepByName(APIName)
//log.info iCountTestCase;
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
}



/*def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response */
}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

//workbook.write()
//workbook.close()



def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


log.info "<<<<<<<<<<<<<<<<<New code here"]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDrivernidhi" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#TestDataFileLocation}
String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo














 int Length =  TestDataFile.lastIndexOf( '\\' )
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 5;


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	/**
	if(value.contains(" "))
	{
		value = '"'+value+'"';
	}
	//requestData = requestData+"-d "+TestDataProp1.getCell(0,iCounter).getContents()+"="+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()+" \\\n";
	requestData = requestData+"-d "+key+"="+value+" \\\n";
	**/

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
//log.info  "				>>>> rawReq =:"+rawReq


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
//log.info "				>>>> ReqHolder2 =:"+ReqHolder2


//*******************************************************************************************//

log.info "				>>>>>>>>>>>>>>>>>> : Starting Validate Xml Response Groovy";


//Getting XML Response
def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
log.info "        XML response holder            "+holder;

log.info"<<<<<<<<<<<<<<<<<New code started here>>>>>>>>>>"

def parsed = new XmlParser().parseText( holder )
log.info"<<<Parsed:: "+parsed

// Deal with each node:
def handle
handle = { node ->
  if( node instanceof String ) {
      node
      //log.info"<<<Handle "+handle
  }
  else {
      [ (node.name()): node.collect( handle ) ]
      //log.info"<<<Handle "+handle
  }
}
//log.info "    >>>>    NODE : "+node;

// Convert it to a Map containing a List of Maps
def jsonObject = [ (parsed.name()): parsed.collect { node ->
   [ (node.name()): node.collect( handle ) ]
   
} ]


log.info"<<<JsonObject:: "+jsonObject


// And dump it as Json
def json = new groovy.json.JsonBuilder( jsonObject )

log.info"<<<Json:: "+json

// Check it's what we expected
//assert json.toString() == '{"root":[{"node":["Tim"]},{"node":["Tom"]},{"node":[{"anotherNode":["another"]}]}]}'

String jsonString = json.toString();
log.info "    >>>>    jsonString : "+jsonString;

jsonString = jsonString.replaceAll("http://schemas.xmlsoap.org/soap/envelope/","");
//log.info "    >>>>    jsonString : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/messages}","");
//log.info "    >>>>    jsonString3 : "+jsonString;

jsonString=jsonString.replaceAll("http://nationalpayment.net/ws/schemas/types}","");
log.info "    >>>>    jsonString4: "+jsonString;

//String str = '"{}Envelope":[{"{}Header":[]},{"{}Body":[{"{CreateClientResponse":[{"{clientId":["4320000010003809"]}';
String strToRemove = "CreateClientResponse";


int sizeOfstr = strToRemove.size();
log.info "    >>>> size = "+sizeOfstr;

int index1 = jsonString.indexOf(strToRemove);
index1 = index1+sizeOfstr;
log.info "    >>>> index1 = :"+index1;
String str2 = jsonString.substring(0,index1);
log.info "    >>>>   str2 : "+str2;
String str3 = jsonString.replace(str2,"");
log.info "    >>>> str now is : "+str3;
//Replacing curly and square brackets:-
String str4 = str3.replace("{","");
log.info "    >>>> str now is : "+str4;
String str5 = str4.replace("}","");
log.info "    >>>> str now is : "+str5;
String str6 = str5.replace("]","");
log.info "    >>>> str now is : "+str6;
String str7 = str6.replace("[","");
log.info "    >>>> str now is >> "+str7;







log.info"<<<<<<<<<<<<<<<<<<<New code ended here>>>>>>>>>>>>>"



//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		ParameterDataType="";
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
ResponseParameter = ResponseParameter+'":';
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
// log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)
 //log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)
	//log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
		log.info "				>>>> Enum Data Collection :"+EnumDataCollection
 		/*
 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 		*/
 		if(!(EnumDataCollection.matches("[0-9,]*")))
 		{
 			enumType = "String1"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

//Thread.sleep(500) 
if(ParameterDataType.equalsIgnoreCase('Float'))
{
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO float BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
else if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String1"))) //********** **

 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 

 
 else
 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO NON -- STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{

log.info "				>>>> The ResponseValueText is :"+ResposeValueText
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType
	
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}




/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }

	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
//openEscrowopenEscrowParameterDataType = "";
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))


	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==5)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0004);

	
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0004);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()
}//************END loop for No of Reqeusts


//}
catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}

catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}

log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver10april" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#TestDataFileLocation}
String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank & Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo














 int Length =  TestDataFile.lastIndexOf( '\\' )
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 5;


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	/**
	if(value.contains(" "))
	{
		value = '"'+value+'"';
	}
	//requestData = requestData+"-d "+TestDataProp1.getCell(0,iCounter).getContents()+"="+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()+" \\\n";
	requestData = requestData+"-d "+key+"="+value+" \\\n";
	**/

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
//log.info  "				>>>> rawReq =:"+rawReq


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
//log.info "				>>>> ReqHolder2 =:"+ReqHolder2


//*******************************************************************************************//

log.info "				>>>>>>>>>>>>>>>>>> : Starting Validate JSON Response Groovy";


//Getting JSON Response
def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
log.info "        JSON response holder            "+holder;

//Parsing JSON Response
def slurper = new JsonSlurper()
def ParsedJSONResponse = slurper.parseText(holder)
log.info "        JSON Parsed               "+ParsedJSONResponse

//Stringification of JSON response
String ResponseInString = holder.toString()
log.info "         JSON String                "+ResponseInString
String ParsedJSONResponseInString = ParsedJSONResponse.toString()


log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
Label label = new Label(4, iCountTestCase, ResponseInString); //column=0=A,row=0=1
		sheet.addCell(label);
//log.info "				>>>>>>>>>>>>>>>>>> : ResponseSchemaRowCount :"+ResponseSchemaRowCount

Label labelCurl = new Label(3, iCountTestCase, requestData); //column=0=A,row=0=1
		sheet.addCell(labelCurl);

for(iCounter=1;iCounter<ResponseSchemaRowCount;iCounter++)
{//******************start loop for Response Schema validation
//flush2
ParameterDataType = "";
	
	if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
	{
		//log.info "          >>   YES  " +iCounter
		String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter
		if(!(ParsedJSONResponseInString.contains(requiredParameter)))
		{
			
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents() 
			String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter
			Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
			sheet.addCell(label2);
			flagCount = flagCount+1
			//testRunner.fail
		}
	}



//******NOV-8*****FOR TESTING DATATYPE OF VALUES//
if(!(TestDataResponseSchema.getCell(2,iCounter).getContents().isEmpty()))
	{
		ParameterDataType="";
		//String ResponseParameter = TestDataResponseSchema.getCell(0,iCounter).getContents()
		ResponseParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		ParameterDataType = TestDataResponseSchema.getCell(2,iCounter).getContents()
		log.info  "				>>>>>>>>>>>>>>>>>> : ResponseParameter :"+ResponseParameter
		log.info  "				>>>>>>>>>>>>>>>>>> : ParameterDataType :"+ParameterDataType



// int Length =  TestDataFile.lastIndexOf( '\\' )
// String ResposeFileLocation = TestDataFile.substring(0,Length)
ResponseParameter = ResponseParameter+'":';
 int IndexOfParam =  ParsedJSONResponseInString.lastIndexOf(ResponseParameter)
 int LengthOfParam = ResponseParameter.size()
// log.info "     >>>>>>>>>>>>>>>.   IndexOfParam "+IndexOfParam
 //log.info "     >>>>>>>>>>>>>>>.  LengthOfParam "+LengthOfParam

  if(IndexOfParam > -1)
  {
// log.info "       <<>>>>>>>> ParsedJSONResponseInString"+ParsedJSONResponseInString
 //int LastIndexOfValue = ParsedJSONResponseInString.substring(ResponseParameter,indexOf(","))
 //log.info "             >>>>>>>>...   LastIndexOfValue "+LastIndexOfValue

 IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf(",", IndexOfParam)
 //log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

		//log.info  "     >>>>>>>>>>>>>>>.   IndexOfSubsequentComma "+IndexOfSubsequentComma
 
if(IndexOfSubsequentComma<1)
{
	IndexOfSubsequentComma = ParsedJSONResponseInString.indexOf("}", IndexOfParam)
	//log.info "				>>>> IndexOfSubsequentComma:"+IndexOfSubsequentComma 

	if(IndexOfSubsequentComma<1)
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Could not find the value for the parameter : "+ResponseParameter
	}
}



if(ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))
 	{
 		EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
		log.info "				>>>> Enum Data Collection :"+EnumDataCollection
 		/*
 		if(EnumDataCollection.matches("[,a-zA-Z]*"))
 		{
 			enumType = "String"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 		*/
 		if(!(EnumDataCollection.matches("[0-9,]*")))
 		{
 			enumType = "String1"
 			log.info "Enum Value is String"
 		}
 		else
 		{
 			enumType = "Number"
 			log.info "Enum Value is NOT String"
 		}
 	}

 //if((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || (ParameterDataType.toString().toLowerCase().contains(("Enu").toLowerCase()))) //********** **
 // if(!((ParameterDataType.toString().equalsIgnoreCase("String")) || (ParameterDataType.toString().equalsIgnoreCase("Date")) || enumType=="String")) //********** **
 	//if(!((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String"))) //********** **

//Thread.sleep(500) 
if(ParameterDataType.equalsIgnoreCase('Float'))
{
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO float BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
else if(((ParameterDataType.equalsIgnoreCase('String')) || (ParameterDataType.equalsIgnoreCase("Date")) || (enumType=="String1"))) //********** **

 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	//ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText
 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 

 
 else
 {
 	log.info  "				>>>>>>>>>>>>>>>>>> : I AM CAME TO NON -- STRING/DATE/ENUMstring BLOCK"
 	log.info "				>>>>>>>>>>>>>>>>>> : because ParameterDataType is :"+ParameterDataType
 	
 ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+1,IndexOfSubsequentComma);
 //ResposeValueText = ParsedJSONResponseInString.substring(IndexOfParam+LengthOfParam+2,IndexOfSubsequentComma-1); 
	log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText here :"+ResposeValueText

 if(ResposeValueText.contains("}"))
{
	ResposeValueText = ResposeValueText.replace("}","")
}
 }
 //ResposeValueText = ParsedJSONResponseInString.substring(ParsedJSONResponseInString.indexOf(ResponseParameter)+LengthOfParam, (ParsedJSONResponseInString.indexOf(","))+(IndexOfParam));
 //ResposeValueText = ParsedJSONResponseInString.substring((IndexOfParam+LengthOfParam+2),(IndexOfParam+LengthOfParam+2)+(ParsedJSONResponseInString.indexOf(",")))
 //ResposeValueText = ParsedJSONResponseInString.substring((32),ParsedJSONResponseInString.indexOf(","))
 //s.indexOf(")")
 //log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :"+ResposeValueText
// assert ResposeValueText.isNumber()

//try{

log.info "				>>>> The ResponseValueText is :"+ResposeValueText
	
if(ParameterDataType.toString().equalsIgnoreCase("String"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to STRING IF block"
	 String returnDataType = String.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : StringValue :"+returnDataType
}	
if(ParameterDataType.toString().equalsIgnoreCase("Long"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to LONG IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : ResposeValueText :" +ResposeValueText
	long returnDataType = Long.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : LongValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Int"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Int IF block"
	 int returnDataType = Integer.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : IntValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Float"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Float IF block"
	//log.info "				>>>>>>>>>>>>>>>>>> : FloatValue text "+ResposeValueText
	 float returnDataType = Float.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : FloatValue :"+returnDataType
}
if(ParameterDataType.toString().equalsIgnoreCase("Boolean"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Boolean IF block"
	 boolean returnDataType = Boolean.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : BooleanValue :"+returnDataType
	
}
if(ParameterDataType.toString().equalsIgnoreCase("Date"))
{
	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Date IF block"
	 
	 SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
	 Date date = null;
	  date = format.parse(ResposeValueText);
	 //date returnDataType = date.valueOf(ResposeValueText)
	 log.info "				>>>>>>>>>>>>>>>>>> : DateValue  :"+date
}
if(ParameterDataType.toString().toLowerCase().contains(("Enum").toLowerCase()))
{

	//log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
	/*
	String[] EnumData = EnumDataCollection.split(",")
	int sizeOfEnumData = EnumData.size()
	log.info "			>>>>>>>>>>>>>> sizeOfEnumData :"+sizeOfEnumData
	
	
	for(iCountOfEnumData=0;iCountOfEnumData<sizeOfEnumData;iCountOfEnumData++)
	{
	log.info "			>>>>>>> EnumData :"+EnumData[iCountOfEnumData]
	
	}
	 //date returnDataType = date.valueOf(ResposeValueText)
	 //log.info "        >>>>>>>>>.     EnumValue  "+returnDataType
	*/
}




/*
}
  catch(all)
{
	log.info "             >>>>>>>>>> Some Exception Occured"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	
//workbook.write()
//workbook.close()

}
*/
 //long.info "  >>>>>>>>>>>>>>>   "+bool
 //ValueDataType = ResposeValueText.getClass()
 //log.info " >>>>>>>>>>>> ValueDataType ="+ValueDataType

  }

	}
//******NOV-8*****// 

//*****************************************************************8888888
//*****************************************************************8888888
//openEscrowopenEscrowParameterDataType = "";
}//******************END loop for Response Schema validation





for(iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{
	//if(IsEmpty(TestDataResponse.getCell(iCounter,1).getContents()))


	if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
	{
		//log.info " >>>>>>>>>>>>   not NULL"
		String ParamValueField = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":"'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()+'"'
		String ParamValueFieldForIntType = '"'+TestDataResponse.getCell(iCounter1,0).getContents()+'":'+TestDataResponse.getCell(iCounter1,iCountTestCase).getContents()
		log.info " >>>>>>>>>>>  ParamValueField is : "+ParamValueField 
//1
		
		if(!(ParsedJSONResponseInString.contains(ParamValueField))  && !(ParsedJSONResponseInString.contains(ParamValueFieldForIntType)) )
		{
			log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the value - "+ParamValueField
			
			
			//log.info "           >>>>>>>> flag Count  "+flagCount
			//label1 = "label"+flagCount
			//Label label1 = new Label(0, 1, "TC_001"); //column=0=A,row=0=1
			//sheet.addCell(label1);
			
			//Label label+""+flagCount = new Label
			Label label3 = new Label(flagCount, iCountTestCase, "The response does not contain the value - "+ParamValueField+"");
			sheet.addCell(label3);
			flagCount = flagCount+1
		}
	}
}

if(flagCount==5)
{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : if loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
	sheet.addCell(label0004);

	
	// sheet.addCell(new jxl.write.Label(0,0,"User Name",normalFormat));
}
else{
	/*
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);
	*/
	//log.info  "				>>>>>>>>>>>>>>>>>> : else loop - flagCount "+flagCount
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);

	Label label0003 = new Label(1, iCountTestCase, TestDataValues1.getCell(1,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0003);

	Label label0004 = new Label(2, iCountTestCase, TestDataValues1.getCell(2,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label0004);
}	
log.info "				>>>>>>>>>>>>>>>>>> : END TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
}//************END loop for No of Test Cases

workbook.write()
workbook.close()
}//************END loop for No of Reqeusts


}
catch (NumberFormatException e)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}

catch(ParseException parseEx)
{
	log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label3);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	workbook.write()
	workbook.close()
}
catch(FileNotFoundException f) 
{
   workbook.write()
   workbook.close()
   f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
}
catch(all)
{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	String Exception1 = "An Exception Occurred : "+all+""
	log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	sheet.addCell(label5);
	flagCount = flagCount+1
	Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

}

log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
]]></script></con:config></con:testStep><con:testStep type="request" name="createClient22" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="createClient22" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">  <soapenv:Header>      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">            <wsse:Username>sushant@bancbox.com</wsse:Username>            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>         </wsse:UsernameToken>      </wsse:Security></soapenv:Header>
   <soapenv:Body>      <mes:CreateClientRequest>         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
<!--         <mes:clientId>?</mes:clientId>-->
         <mes:subscriberId>${#TestCase#subscriberId)</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>${#TestCase#externalClientId)</mes:externalClientId>
         <!--Optional:-->
         <mes:referralId type="RULESET" internal="YES">
            <typ:id>${#TestCase#referralId)</typ:id>
         </mes:referralId>
         <!--Optional:-->
         <mes:channelId>${#TestCase#channelId)</mes:channelId>
         <!--Optional:-->
         <mes:productId>${#TestCase#productId)</mes:productId>
         <mes:firstname>${#TestCase#firstname)</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>${#TestCase#middleInitial)</mes:middleInitial>
         <mes:lastname>${#TestCase#lastname)</mes:lastname>
         <!--Optional:-->
         <mes:ssn>${#TestCase#ssn)</mes:ssn>
         <!--Optional:-->
         <mes:dob>            <typ:date format="dd/MM/yyyy" value=${#TestCase#dob)/>
         </mes:dob>
         <!--Optional:-->
         <mes:address1>${#TestCase#address1)</mes:address1>
         <!--Optional:-->
         <mes:address2>${#TestCase#address2)</mes:address2>
         <!--Optional:-->
         <mes:city>${#TestCase#city)</mes:city>
         <!--Optional:-->
         <mes:state>${#TestCase#state)</mes:state>
         <!--Optional:-->
         <mes:zip>${#TestCase#zip)</mes:zip>
         <!--Optional:-->
         <mes:phone>${#TestCase#phone)</mes:phone>
         <!--Optional:-->
    
         <!--Optional:-->
         <mes:mobile>9041462202</mes:mobile>
         <!--Optional:-->
         <mes:email>nidhig@bancbox.com</mes:email>
         <!--Optional:-->
         <mes:userName>nidhi565</mes:userName>
         <mes:draftAmount>100</mes:draftAmount>
         <!--Optional:-->
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>Nidhi27786</con:username><con:password/><con:domain>www.iouihgydc.hh</con:domain><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="createClientoriginal" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="createClientoriginal" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         
         <mes:subscriberId>200000</mes:subscriberId>
         
         <mes:firstname>Jason</mes:firstname>
          <mes:middleInitial>ghh</mes:middleInitial>

         <mes:lastname>Taylor</mes:lastname>
         <!--Optional:-->
         <mes:ssn>192-33-9191</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="dd-MM-yyyy" value="01-12-1956"/>
         </mes:dob>
        
         <mes:address1>36 west</mes:address1>
        
         <mes:city>Washington city</mes:city>
         <!--Optional:-->
         <mes:state>WA</mes:state>
         <!--Optional:-->
         <mes:zip>53224</mes:zip>
         <!--Optional:-->
         <mes:phone>9876543212</mes:phone>
        
         <mes:draftAmount>5000</mes:draftAmount>
         
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>Nidhi27786</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Copy of createClientold" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="Copy of createClientold" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
<soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header> 
      
   <soapenv:Body>
     < mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         
         <mes:subscriberId>200001</mes:subscriberId>
         
         <mes:firstname>${#TestCase#firstname}</mes:firstname>
         
         <mes:lastname>${#TestCase#lastname}</mes:lastname>
         <!--Optional:-->
         <mes:ssn>192-33-4567</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="dd/MM/yyyy" value="26/01/1978">
         </mes:dob>
         
         <mes:address1>${#TestCase#address1}</mes:address1>
         
         <!--Optional:-->
         <mes:city>${#TestCase#city}</mes:city>
         <!--Optional:-->
         <mes:state>CA</mes:state>
         <!--Optional:-->
         <mes:zip>94001</mes:zip>
         <!--Optional:-->
         <mes:phone>1234567899</mes:phone>
         
         <!--Optional:-->
         <mes:draftAmount>1000</mes:draftAmount>
         <!--Optional:-->

         
        
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>Nidhi27786</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="validating xmlresponse" disabled="true"><con:settings/><con:config><script><![CDATA[ import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import org.codehaus.groovy.maven.runtime.support.stubgen.parser.ParseException;
//import jxl.write.Label;
//import jxl.write.WritableCellFormat;
//import jxl.write.WritableFont;

  
  def response = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header ver:CPIIDA-BUILD="build-57199" ver:CPIIDA-BUILD-TIME="2014-04-03_12-55-38" ver:CPIISRV-BUILD="build-57199" ver:CPIISRV-BUILD-TIME="2014-04-03_12-57-56" ver:CPIIWSRV-BUILD="build-57199" ver:CPIIWSRV-BUILD-TIME="2014-04-03_12-59-46" xmlns:ver="http://nationalpayment.net/ws/schemas/header/version"/>
   <SOAP-ENV:Body>
      <ns3:CreateClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/">
         <ns3:clientId>4320000010003809</ns3:clientId>
         <ns3:enrollmentId>363298</ns3:enrollmentId>
         <ns3:commandStatus>1</ns3:commandStatus>
         <ns3:errorMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </ns3:CreateClientResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''
   
WritableSheet sheet; 
   
 

//def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

//Label label5 = new Label(1,4,response);
  // sheet.addCell(label5);
   

   log.info "    >>>>    FLAG ONE";
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

	log.info "    >>>>   iCounter1  = "+iCounter1;
	log.info "    >>>>   iCountTestCase = "+iCountTestCase;

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}


log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriver11april" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import com.eviware.soapui.*
import java.util.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import com.eviware.soapui.support.XmlHolder.*;
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder
import jxl.format.Colour;
import jxl.format.Pattern;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.lang.Throwable
import java.lang.Error
import java.lang.Exception
import java.text.ParseException;

log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1


String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')
String RequestAPINames = context.expand('${#Project#RequestName}')
String setNo = context.expand('${#Project#SetNo}')
String[] TestDataFileArray = TestDataFileNames.split("\\|");
log.info"<<<<<<<<TestDataFileArray"+TestDataFileArray
String[] RequestAPINameArray = RequestAPINames.split("\\|");
log.info"<<<<<<<<RequestAPINameArray"+RequestAPINameArray



log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles:"+sizeOfTestDataFiles

log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI:"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests < sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo

int Length =  TestDataFile.lastIndexOf( '\\' )
log.info"<<<<<<<<<<Length:"+Length
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 log.info"<<<<<<<<<<Locationsize:"+locationSize
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 log.info"<<<<<<<<<<ResponseFileName:"+responseFileName
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 log.info"<<<<<<<<<<ResponseFileLocation:"+ResposeFileLocation
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)
	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));
	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")
	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")

	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")

	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()
	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	
	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()

	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}

//********Iterating loop for No of Test Cases in Test Data Sheet*********//

for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		
		continue;
	}
 flagCount = 5;

		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter<(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq //Not sure what this is returning


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>>SZ=:"+ReqHolder2 //Reg holder 1 and 2 returns same contents

def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
log.info "        XML response holder            "+holder;

//def parsed = new XmlParser().parseText( holder )
//log.info"<<<Parsed:: "+parsed

log.info"<<<<started here>>>"
Label label5 = new Label(1,iCountTestCase,holder);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is:ResponseFromTestData:>>"+ResponseFromTestData
log.info"counter1:"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath:"+xpath1
def ActualResponseValue=holder.getNodeValue(xpath1);
log.info"Actual Response value:"+ActualResponseValue;

//def responseId1 = holder.getNodeValue["//ns3:clientId"];
//holder.declareNamespace( 'ns3', 'http://nationalpayment.net/ws/schemas/messages') //add this declaration
//holder.namespaces["ns3"] = "http://nationalpayment.net/ws/schemas/messages"
//
//def responseId1=holder.getNodeValue("//ns3:CreateClientResponse/ns3:clientId")
//def responseId1=holder.getNodeValue("ns3:clientId")
log.info"<<<<<Responseid"+responseId1
//log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

//LOG.INFO"<<<<TILL HERE"



}//tHIS IS FOR second "FOR" LOOP ADDED BY ME
}//tHIS IS FOR FIRST "FOR" LOOP ADDED BY ME
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Copy of AutomationDriver" disabled="true"><con:settings/><con:config><script>import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;


log.info "				>>>>>>>>>>>>>>>>>> : Starting Test Groovy 1 --"



int flagCount;
int iCountTestCase;
WritableWorkbook workbook;
WritableSheet sheet;
String ResponseParameter;
String ParameterDataType;

Workbook TestDataWB;
Sheet TestDataProp1;
Sheet TestDataValues1;
Sheet TestDataResponseSchema;
Sheet TestDataResponse;

String EnumDataCollection;
String enumType;

	def alert = com.eviware.soapui.support.UISupport;
	//Creating Writable font to be used in the response sheet
	WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
	normalFormat.setBackground(jxl.format.Colour.GREEN);

	//Creating Writable font to be used in the response sheet
	WritableFont normalFont2 = new WritableFont(WritableFont.ARIAL);
	//creating plain format to write data in excel sheet
     WritableCellFormat normalFormat2 = new WritableCellFormat(normalFont2);
	
	normalFormat2.setBackground(jxl.format.Colour.RED);

int labelCount = 1
	
try{


///log.info ">>>>>>" + testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")


//*************************************************************************//
//Enter Location of Test Data Excel File e.g. E:\\Test Data\\CreateInvestor.xls
//the excel file should be in xls format

//String TestDataFileNames = "C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\openEscrow.xls|C:\\Users\\RaghavPal\\Documents\\Test_Data\\QATestData\\Nov15\\getEscrowDetails.xls"
//String TestDataFile = testRunner.testCase.testSuite.project.getPropertyValue("TestDataFileLocation")
//String TestDataFile = ${#Project#TestDataFileLocation}
String TestDataFileNames = context.expand('${#Project#TestDataFileLocation}')

//Enter the name of API Request
//The name should be same as the API request name in the project
//String RequestAPINames = "openEscrow|getEscrowDetails"map1:{"request_id":4423542238,"id":626484610108,"bank_name":"Four Oaks Bank &amp; Trust Company","account_number":"540126108022","account_routing_number":"053112505","account_type":"CHECKING","type":"CUSTODIAN"}
//String RequestAPIName = testRunner.testCase.testSuite.project.getPropertyValue("RequestName")
//String RequestAPIName = ${#Project#RequestName}
String RequestAPINames = context.expand('${#Project#RequestName}')

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//


String[] TestDataFileArray = TestDataFileNames.split("\\|");
String[] RequestAPINameArray = RequestAPINames.split("\\|");




//log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFileArray
int sizeOfTestDataFiles = TestDataFileArray.size();
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfTestDataFiles"+sizeOfTestDataFiles

//log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPINameArray
int sizeOfRequestAPI = RequestAPINameArray.size()
//log.info "				>>>>>>>>>>>>>>>>>> : sizeOfRequestAPI"+sizeOfRequestAPI


if(sizeOfTestDataFiles!=sizeOfRequestAPI)
{
alert.showInfoMessage("Number of Test Data Files and Request API must be the same","ALERT MESSAGE");
//system.exit();
return;
}

for(iNoOfTestRequests=0;iNoOfTestRequests &lt; sizeOfRequestAPI;iNoOfTestRequests++)
{//************START loop for No of Reqeusts
	

  
String TestDataFile = TestDataFileArray[iNoOfTestRequests]
String RequestAPIName = RequestAPINameArray[iNoOfTestRequests]
log.info "				>>>>>>>>>>>>>>>>>> : TestDataFile :"+TestDataFile
log.info "				>>>>>>>>>>>>>>>>>> : RequestAPIName :"+RequestAPIName
log.info "				>>>>>>>>>>>>>>>>>> : setNo :"+setNo














 int Length =  TestDataFile.lastIndexOf( '\\' )
 int locationSize = TestDataFile.lastIndexOf( '.xl' );
 String responseFileName = TestDataFile.substring(Length+1,locationSize);
 String ResposeFileLocation = TestDataFile.substring(0,Length)
 	//Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
	 //log.info "				>>>>>>>>>>>>>>>>>> : time :"+currentTime

	//Getting location to create the TestResponseFile
	String TestResponseFile = ResposeFileLocation + "\\"+responseFileName+"-Response-" +currentTime+".xls"
	log.info "				>>>>>>>>>>>>>>>>>> : TestResponseFile :"+TestResponseFile
	//Creating Response Excel File
	workbook = Workbook.createWorkbook(new File(TestResponseFile));
	sheet = workbook.createSheet("Response",0)




	
	//Get the Test Data Excel File
	TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

	//Get the Sheet having Test Data Properties
	TestDataProp1 = TestDataWB.getSheet("Request Schema")

	//Get the Sheet having Test Data Values
	TestDataValues1 = TestDataWB.getSheet("Request Values")


	//Get the Sheet having Test Data Response Properties
	TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
	TestDataResponse = TestDataWB.getSheet("Response Values")




	//Count Rows and Columns in Properties sheet
	PropRowCount = TestDataProp1.getRows()
	PropColCount = TestDataProp1.getColumns()


	//Count Rows and Columns in Response Schema sheet
	ResponseSchemaRowCount = TestDataResponseSchema.getRows()
	ResponseSchemaColCount = TestDataResponseSchema.getColumns()

	//log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
	//log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount

	//Count Rows and Columns in Response sheet
	ResponseRowCount = TestDataResponse.getRows()
	ResponseColCount = TestDataResponse.getColumns()

	//log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
	//log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount









	//Count Rows and Columns in Values sheet
	ValuesRowCount = TestDataValues1.getRows()
	ValuesColCount = TestDataValues1.getColumns()
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesRowCount " +ValuesRowCount
	//log.info "				>>>>>>>>>>>>>>>>>>>> : ValuesColCount " +ValuesColCount
	//This will display an information message
	//def alert = com.eviware.soapui.support.UISupport;
	//alert.showInfoMessage("Hello World !");
	//alert.showInfoMessage("Hello World !","soapUI Warning !")
	log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
	log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != (ValuesColCount-3))
{
	workbook.write()
	workbook.close()
	
	alert.showInfoMessage("Mismatch in the count of Properties and Values. \n We have introduced a new column Expected Results after Description Column");
	log.info "				>>>>>>>>>>>>>>>>>>>> : Mismatch in the count of Properties and Values \n We have introduced a new column Expected Results after Description Column"
	
	return;
}


//********Iterating loop for No of Test Cases in Test Data Sheet*********//



for(iCountTestCase=1;iCountTestCase &lt; ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases

//flush();
ResponseParameter = "";
ParameterDataType = "";
EnumDataCollection = "";
enumType="";


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}
 flagCount = 5;


		Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
		sheet.addCell(label00);

		Label label001 = new Label(1, 0, "Description"); //column=0=A,row=0=1
		sheet.addCell(label001);

		Label label002 = new Label(2, 0, "Expected Result"); //column=0=A,row=0=1
		sheet.addCell(label002);

		Label label003 = new Label(3, 0, "Curl Request"); //column=0=A,row=0=1
		sheet.addCell(label003);
		
		Label label004 = new Label(4, 0, "RESPONSE"); //column=0=A,row=0=1
		sheet.addCell(label004);

		log.info "				>>>>>>>>>>>>>>>>>> : STARTING TEST CASE :"+TestDataValues1.getCell(0,iCountTestCase).getContents()
		//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
		//sheet.addCell(label02);
String key = "";
String value = "";
String requestData = "";
for(iCounter=1;iCounter&lt;(ValuesColCount-3);iCounter++)
{
	//log.info "				>>>>>>>>>>>>>>>>>> : IN FOR LOOP "
	key = TestDataProp1.getCell(0,iCounter).getContents();
	value = TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents();
	
	//testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
	testRunner.testCase.getTestStepByName(RequestAPIName).setPropertyValue( key, value);

	/**
	if(value.contains(" "))
	{
		value = '"'+value+'"';
	}
	//requestData = requestData+"-d "+TestDataProp1.getCell(0,iCounter).getContents()+"="+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()+" \\\n";
	requestData = requestData+"-d "+key+"="+value+" \\\n";
	**/

	 if(value.contains(" "))
      {
       value = '"'+value+'"';
      }
      //**********************************************
      //Generating the curl request from key and value
      //**********************************************
      if(key=="email")
      {
       requestData = requestData+"--data-urlencode "+key+"="+value+" \\\n";
      }
      else{
      requestData = requestData+"-d "+key+"="+value+" \\\n";
      }
}
log.info "				>>>> requestData = "+requestData;
//Getting Reqeust Curl

def ReqHolder1 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
log.info "				>>>> ReqHolder1 =:"+ReqHolder1


//Running the API Request with the Test Parameters-Values
log.info "				>>> Executing Request ";
testRunner.runTestStepByName(RequestAPIName)

String requestURL = context.httpMethod.getURI();
log.info "				>>>> requestURL : "+requestURL;
requestData = "curl -k -v "+requestURL+" \\\n"+requestData;
//log.info "				>>>> New requestData : "+requestData;
//log.info "				>>>> url : "+context.httpMethod.getURI();
//Getting Reqeust Curl
log.info "ok";


def rawReq = testRunner.testCase.testSteps[RequestAPIName].testRequest.response.requestContent;
//log.info  "				>>>> rawReq =:"+rawReq


def ReqHolder2 = testRunner.testCase.getTestStepByName(RequestAPIName).getProperty("request").value
//log.info "				>>>> ReqHolder2 =:"+ReqHolder2

}
}
//*******************************************************************************************//

log.info "				>>>>>>>>>>>>>>>>>> : Starting Validate JSON Response Groovy";


//Getting JSON Response
//def holder = testRunner.testCase.getTestStepByName(RequestAPIName).getPropertyValue("response")
//log.info "        JSON response holder            "+holder;

//Parsing JSON Response
//def slurper = new JsonSlurper()
//def ParsedJSONResponse = slurper.parseText(holder)
//log.info "        JSON Parsed               "+ParsedJSONResponse

//Stringification of JSON response
//String ResponseInString = holder.toString()
//log.info "         JSON String                "+ResponseInString
//String ParsedJSONResponseInString = ParsedJSONResponse.toString()


//log.info "				>>>>>>>>>>>>>>>>>> : Parsed JSON in String :" +ParsedJSONResponseInString
//Label label = new Label(4, iCountTestCase, ResponseInString); //column=0=A,row=0=1
	//	sheet.addCell(label);
//log.info "				>>>>>>>>>>>>>>>>>> : ResponseSchemaRowCount :"+ResponseSchemaRowCount

//Label labelCurl = new Label(3, iCountTestCase, requestData); //column=0=A,row=0=1
		//sheet.addCell(labelCurl);

//for(iCounter=1;iCounter&lt;ResponseSchemaRowCount;iCounter++)
//******************start loop for Response Schema validation
//flush2
//ParameterDataType = "";
	
	//if(TestDataResponseSchema.getCell(1,iCounter).getContents() == "Y")
	//{
		//log.info "          >>   YES  " +iCounter
		String requiredParameter = '"'+TestDataResponseSchema.getCell(0,iCounter).getContents()+'"'
		log.info "				>>>>>>>>>>>>>>>>>> : requiredParameter :"+requiredParameter
		//if(!(ParsedJSONResponseInString.contains(requiredParameter)))
		//{
			
			//log.info "				>>>>>>>>>>>>>>>>>> : The response does not contain the mandatory parameter - "+TestDataResponseSchema.getCell(0,iCounter).getContents() 
			//String MandatoryParameterMissing = "The response does not contain the mandatory parameter - "+requiredParameter
			//Label label2 = new Label(flagCount, iCountTestCase, MandatoryParameterMissing);
			//sheet.addCell(label2);
			//flagCount = flagCount+1
			//testRunner.fail
		//}
	//}






//catch (NumberFormatException e)
//{
	//log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : NumberFormatException"
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	//Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	//sheet.addCell(label3);
	//flagCount = flagCount+1
	//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	//sheet.addCell(label02);
	workbook.write()
	workbook.close()
//}

//catch(ParseException parseEx)
//{
	//log.info "				>>>>>>>>>>>>>>>>>> : Some Exception Occured : ParseException"
	////String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	//Label label3 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	//sheet.addCell(label3);
	//flagCount = flagCount+1
	//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	//sheet.addCell(label02);
	workbook.write()
	workbook.close()
//}
//catch(FileNotFoundException f) 
//{
   workbook.write()
   workbook.close()
  // f.printStackTrace();
   log.info "				>>>>>>>>>>>>>>>>>> : FILE NOT FOUND"
   //alert.showInfoMessage("Hello World !","soapUI Warning !")
   alert.showInfoMessage("Please Check the File Name and Location is Correct","FILE NOT FOUND");
  
//}
//catch(all)
//{
	
	//String dataTypeIncorrect = "The DataType for the Parameter "+ResponseParameter+" is NOT "+ParameterDataType
	//String Exception1 = "An Exception Occurred : "+all+""
	//log.info "				>>>>>>>>>>>>>>>>>> : Exception1 : "+Exception1
	//Label label5 = new Label(flagCount, iCountTestCase, Exception1);
	//sheet.addCell(label5);
	//flagCount = flagCount+1
	//Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat2); //column=0=A,row=0=1
	//sheet.addCell(label02);
	
	workbook.write()
	workbook.close()

//}

//log.info "				>>>>>>>>>>>>>>>>>> : End of Validate JSON Response Groovy"
//log.info "				>>>>>>>>>>>>>>>>>> : End of AutomationDriver script"
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of practice1createclient1" disabled="true"><con:settings/><con:config><script>

def  groovyUtils= new com.eviware.soapui.support.GroovyUtils( context )
log.info"&lt;&lt;Groovy Utils"+groovyUtils</script></con:config></con:testStep><con:testStep type="groovy" name="todday" disabled="true"><con:settings/><con:config><script><![CDATA[// Given an XML string
def holder = '''<m:GetRatedEventListResponse xmlns:m="http://*****">
<m:ratedEvents
<m:eventAttributes>
<m:name>Calling Number</m:name>
<m:value>98989897999</m:value>
</m:eventAttributes>
<m:eventAttributes>
<m:name>Additional charge</m:name>
<m:value>0</m:value>
</m:eventAttributes>
<m:eventAttributes>
<m:name>Called number</m:name>
<m:value>12017726873</m:value>
</m:eventAttributes>
...'''


// create groovyUtils 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//def response = context.expand( '${getRatedEventList-dateRange#Response#declare namespace m=\'http://vonage.com/services/servicelayer\'; //m:GetRatedEventListResponse[1]/m:ratedEvents[1]}' )
def response = context.expand( '${getRatedEventList-dateRange#Response#declare namespace m=\'http://vonage.com/services/servicelayer\'; //m:GetRatedEventListResponse[1]/m:ratedEvents[1]/m:eventAttributes[m:name="Calling Number"]}' )

// print
def records = new XmlParser().parseText(response)
for (record in records['m:value']) 
log.info record.text()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="todaypracticecreateclient" disabled="true"><con:settings/><con:config><script><![CDATA[// Given an XML string
def holder = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header ver:CPIIDA-BUILD="build-57199" ver:CPIIDA-BUILD-TIME="2014-04-03_12-55-38" ver:CPIISRV-BUILD="build-57199" ver:CPIISRV-BUILD-TIME="2014-04-03_12-57-56" ver:CPIIWSRV-BUILD="build-57199" ver:CPIIWSRV-BUILD-TIME="2014-04-03_12-59-46" xmlns:ver="http://nationalpayment.net/ws/schemas/header/version"/>
   <SOAP-ENV:Body>
      <ns3:CreateClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/">
         <ns3:clientId>4320000010003809</ns3:clientId>
         <ns3:enrollmentId>363298</ns3:enrollmentId>
         <ns3:commandStatus>1</ns3:commandStatus>
         <ns3:errorMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </ns3:CreateClientResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''


log.info("Node client id:${holder.getNodeValue('\\SOAP-ENV:CreateClientResponse\clientId')}");
//def ActualResponseValue=holder.getNodeValue("\\SOAP-ENV:CreateClientResponse\clientId}");]]></script></con:config></con:testStep><con:testStep type="groovy" name="AutomationDriverForSoap15april" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="request" name="Copy of createClient" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="Copy of createClient" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         
         <mes:firstname>${#TestCase#firstname}</mes:firstname>
        
         <mes:lastname>${#TestCase#lastname}</mes:lastname>
         <!--Optional:-->
         <mes:ssn>${#TestCase#ssn}</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="dd-MM-yyyy" value="01-12-1956"/>
         </mes:dob>
        
         <mes:address1>${#TestCase#address1}</mes:address1>
        
         <mes:city>${#TestCase#city}</mes:city>
         <!--Optional:-->
         <mes:state>${#TestCase#state}</mes:state>
         <!--Optional:-->
         <mes:zip>${#TestCase#zip}</mes:zip>
         <!--Optional:-->
         <mes:phone>${#TestCase#phone}</mes:phone>
        
         <mes:draftAmount>${#TestCase#draftAmount}</mes:draftAmount>
         
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Copy of createClientoriginal" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="Copy of createClientoriginal" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         
         <mes:subscriberId>200000</mes:subscriberId>
         
         <mes:firstname></mes:firstname>
        
         <mes:lastname>Taylor</mes:lastname>
         <!--Optional:-->
         <mes:ssn>192-33-9191</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="dd-MM-yyyy" value="01-12-1956"/>
         </mes:dob>
        
         <mes:address1>36 west</mes:address1>
        
         <mes:city>Washington city</mes:city>
         <!--Optional:-->
         <mes:state>WA</mes:state>
         <!--Optional:-->
         <mes:zip>94001</mes:zip>
         <!--Optional:-->
         <mes:phone>9876543212</mes:phone>
        
         <mes:draftAmount>5000</mes:draftAmount>
         
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>Nidhi27786</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Copy of mehak" disabled="true"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

testRunner.runTestStepByName("ClearTCProperties");

def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label01);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 2
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}


	
	if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label label5 = new Label(1,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1
log.info"Expected Response value:"+ResponseFromTestData

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("ActualResponse value:"+ActualResponseValue)
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==2)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label02);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()




]]></script></con:config></con:testStep><con:testStep type="request" name="createClient default" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="createClient default" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:referralId type="RULESET" internal="YES">
            <typ:id>?</typ:id>
         </mes:referralId>
         <!--Optional:-->
         <mes:channelId>?</mes:channelId>
         <!--Optional:-->
         <mes:productId>?</mes:productId>
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="?" value="?"/>
         </mes:dob>
         <!--Optional:-->
         <mes:address1>?</mes:address1>
         <!--Optional:-->
         <mes:address2>?</mes:address2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:WorkNumber>?</mes:WorkNumber>
         <!--Optional:-->
         <mes:mobile>?</mes:mobile>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:userName>?</mes:userName>
         <mes:draftAmount>?</mes:draftAmount>
         <!--Optional:-->
         <mes:coClients>
            <!--Zero or more repetitions:-->
            <typ:coClient>
               <!--You may enter the following 9 items in any order-->
               <typ:firstname>?</typ:firstname>
               <!--Optional:-->
               <typ:middleInitial>?</typ:middleInitial>
               <typ:lastname>?</typ:lastname>
               <!--Optional:-->
               <typ:ssn>?</typ:ssn>
               <typ:dob>
                  <typ:date format="?" value="?"/>
               </typ:dob>
               <!--Optional:-->
               <typ:phone>?</typ:phone>
               <!--Optional:-->
               <typ:WorkNumber>?</typ:WorkNumber>
               <!--Optional:-->
               <typ:mobile>?</typ:mobile>
               <!--Optional:-->
               <typ:email>?</typ:email>
            </typ:coClient>
         </mes:coClients>
         <!--Optional:-->
         <mes:svaDocument>
            <!--You may enter the following 5 items in any order-->
            <typ:note>?</typ:note>
            <!--Optional:-->
            <typ:documentType>?</typ:documentType>
            <typ:base64EncodedContent>?</typ:base64EncodedContent>
            <typ:contentType>?</typ:contentType>
            <typ:documentName>?</typ:documentName>
         </mes:svaDocument>
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Copy of ClearTCProperties" disabled="true"><con:settings/><con:config><script>String[] props = new String[testRunner.testCase.getPropertyCount()];
props = testRunner.testCase.getPropertyNames();
log.info ">>     Properties Size : "+props.size();
for (int i=0;i&lt;props.size();i++)
{
 log.info ">>     "+props[i];
 testRunner.testCase.setPropertyValue(props[i],"");
}</script></con:config></con:testStep><con:testStep type="request" name="createcoclient actual" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="createcoclient actual" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateCoClientRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>200000</mes:subscriberId>
         <mes:clientId>4320000010004150</mes:clientId>
         <mes:coClientFirstname>coclientfirst</mes:coClientFirstname>
         <mes:coClientLastname>last</mes:coClientLastname>
        
         <mes:coClientDob>
            <typ:date format="dd/MM/yyyy" value="01/01/1989"/>
         </mes:coClientDob>
         
      </mes:CreateCoClientRequest>
   </soapenv:Body>
</soapenv:Envelope>
]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="TestForMaxCharSize"><con:settings/><con:config><script>double a = 4.56777;
int abc =  Math.round(a);

log.info "   >>>>   "+abc;

//log.info( new Float( Math.round(a)) );

String str1 = 'abcd/asdfasdf/asdf&lt;asdf>asdf&lt;>asdf//asdf://asdfasdf';

int len1 = str1.length();
int size1 = str1.size();
log.info "    >>>>   Length : "+len1;
log.info "    >>>>   Size : "+size1;</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Automationdriver17april"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 3
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response




Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="mehak datatype code"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//

//Taking Testdata file location and Api name
def TestDataFile = context.expand( '${#Project#TestDataFile}' )
String APIName = context.expand( '${#Project#APIName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
  currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
  
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema");
 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema");
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values");
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 
 def ActualResponseValue;
 
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}



//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 3
 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);

	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(int iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;

def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response

Label labelRawRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRawRequest);
Label lableResponse = new Label(2,iCountTestCase,response);
   sheet.addCell(lableResponse);





//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("Value for "+xpath2+" is : "+ActualResponseValue);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
		
		if(ActualResponseValue.toString().equalsIgnoreCase(""))
		{
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue.toString().equalsIgnoreCase(""))
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE
if(TYPE.equalsIgnoreCase("Integer"))
typeError=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equalsIgnoreCase("String"))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equalsIgnoreCase("Long"))
typeError=Long.valueOf(ActualResponseValue)	
else
typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   
}
//checking DataType done
	
}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values   
for(int iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is >>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath : "+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("Value for "+xpath1+" is : "+ActualResponseValue);

log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("ExcelResponse datatype"+ResponseFromTestData.getClass())



if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Automationdriver22aprilbackup"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


int flagForExtraLargeResponse = 0;

log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 3

 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


/**
 * 
 */

//int responseSize = response.size();
int responseSize = response.length();
log.info "    >>>>    responseSize : "+responseSize;

int iDivisionCount;
if(responseSize>15000)
{
flagForExtraLargeResponse = 1;

double divisionCount = responseSize/15000;
int divisionOfResponseCount =  Math.round(divisionCount);

log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
{
	log.info "    >>>>    Division loop count : "+iDivisionCount;
	String responseName = "response"+iDivisionCount;
	int iStartLength = 0;
	int iEndLength = 15000*iDivisionCount;
	if(iDivisionCount>1)
	{
		log.info "   >>>>> into iDivisionCount>1 loop ";
		log.info "    >>>> iDivisionCount : "+iDivisionCount;
		iStartLength = (iDivisionCount-1)*15000;
		
	}
	//responseName = response.substring(iStartLength,32767*iDivisionCount);

	
	log.info "    >>>>>    iStartLength : "+iStartLength;
	log.info "    >>>>>    iEndLength : "+iEndLength;
	log.info "    >>>>>    responseSize : "+responseSize;
	if(!(iEndLength>=responseSize))
	{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
	log.info "    >>>>   IF BLOCK ";
	responseName = response.substring(iStartLength,iEndLength);
	}
	else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
	log.info "    >>>>   ELSE BLOCK ";
	responseName = response.substring(iStartLength,responseSize);	
	}
	log.info "   >>>>   responseName : "+responseName;
	Label labelResponse = new Label(iDivisionCount+1,iCountTestCase,responseName);
   	sheet.addCell(labelResponse);
}

//response = response.substring(0,32768);
}


if(flagForExtraLargeResponse>0)
{
	flagCount = flagCount+iDivisionCount;
}

Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
if(flagForExtraLargeResponse==0)
{
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
}
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="request" name="practice datatype"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="practice datatype" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">true</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request>def TYPE=String;
def ActualResponseValue=1

if(TYPE.equals("Integer"))
typeError=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equals("String"))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equals("Long"))
typeError=Long.valueOf(ActualResponseValue)	</con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>nidhi34280</con:username><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Copy of todaypracticecreateclient" disabled="true"><con:settings/><con:config><script>def TYPE=String;
def ActualResponseValue=1

if(TYPE.equals("Integer"))
typeError=Integer.valueOf(ActualResponseValue)	
else if(TYPE.equals("String"))
typeError=String.valueOf(ActualResponseValue)
else if(TYPE.equals("Long"))
typeError=Long.valueOf(ActualResponseValue)	
else
typeError="Datatype should be either Integer,String,Long in Response Schema Excel"
</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Automationdriver23april"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  


int flagForExtraLargeResponse = 0;

log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
def ActualResponseValue;
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 WritableWorkbook workbook = Workbook.createWorkbook(new File(TestResponseFile));
 WritableSheet sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
int flagCount = 3

 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


/**
 * 
 */

//int responseSize = response.size();
int responseSize = response.length();
log.info "    >>>>    responseSize : "+responseSize;

int iDivisionCount;
if(responseSize>15000)
{
flagForExtraLargeResponse = 1;

double divisionCount = responseSize/15000;
int divisionOfResponseCount =  Math.round(divisionCount);

log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
{
	log.info "    >>>>    Division loop count : "+iDivisionCount;
	String responseName = "response"+iDivisionCount;
	int iStartLength = 0;
	int iEndLength = 15000*iDivisionCount;
	if(iDivisionCount>1)
	{
		log.info "   >>>>> into iDivisionCount>1 loop ";
		log.info "    >>>> iDivisionCount : "+iDivisionCount;
		iStartLength = (iDivisionCount-1)*15000;
		
	}
	//responseName = response.substring(iStartLength,32767*iDivisionCount);

	
	log.info "    >>>>>    iStartLength : "+iStartLength;
	log.info "    >>>>>    iEndLength : "+iEndLength;
	log.info "    >>>>>    responseSize : "+responseSize;
	if(!(iEndLength>=responseSize))
	{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
	log.info "    >>>>   IF BLOCK ";
	responseName = response.substring(iStartLength,iEndLength);
	}
	else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
	log.info "    >>>>   ELSE BLOCK ";
	responseName = response.substring(iStartLength,responseSize);	
	}
	log.info "   >>>>   responseName : "+responseName;
	Label labelResponse = new Label(iDivisionCount+1,iCountTestCase,responseName);
   	sheet.addCell(labelResponse);
}

//response = response.substring(0,32768);
}


if(flagForExtraLargeResponse>0)
{
	flagCount = flagCount+iDivisionCount;
}

Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
if(flagForExtraLargeResponse==0)
{
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
}




//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("ActualResponseValue,Value for "+xpath2+" is : "+ActualResponseValue);
//def v=ActualResponseValue.toString();
//def v1=v.trim();
//log.info("<<<ActualResponseValue toString:"+v);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
	
		//if(ActualResponseValue.toString().equalsIgnoreCase(""))
		//if(ActualResponseValue.toString().contains(""))
		if(ActualResponseValue.toString().equals(""))
		
		//if(v1.equals(null))
		//if(ActualResponseValue.toString()='')
		
		{
			log.info "I m here";
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue.toString().equals(""))
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE
//if(TYPE.equalsIgnoreCase("Integer"))
if(TYPE.equals("Integer")|TYPE.equals("integer"))
typeError=Integer.valueOf(ActualResponseValue)	
//else if(TYPE.equalsIgnoreCase("String"))
else if(TYPE.equals("String")|TYPE.equals("string"))
typeError=String.valueOf(ActualResponseValue)
//else if(TYPE.equalsIgnoreCase("Long"))
else if(TYPE.equals("Long")|TYPE.equals("long"))
typeError=Long.valueOf(ActualResponseValue)
else if(TYPE.equals("Float")|TYPE.equals("float"))
typeError = Float.valueOf(ActualResponseValue)
else if(TYPE.equals("Boolean")|TYPE.equals("boolean"))
	typeError = Boolean.valueOf(ActualResponseValue)
else
typeError="Datatype should be either Integer,String,Long,Float,Boolean,double in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   
}
//checking DataType done
	
}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}
log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"

workbook.write()
workbook.close()
]]></script></con:config></con:testStep><con:testStep type="groovy" name="SetNGetFromPropertiesStep"><con:settings/><con:config><script> a = testRunner.testCase.getTestStepByName('Prop');
// a.getPropertyValue('subcriberId');
 a.getPropertyValue('clientId');

 a.setPropertyValue('name','Nidhi');</script></con:config></con:testStep><con:testStep type="groovy" name="practicebasiccode23april" disabled="true"><con:settings/><con:config><script><![CDATA[//import jxl.write.ArrayList
import groovy.xml.DOMBuilder
import groovy.xml.dom.DOMCategory
import jxl.*
import com.eviware.soapui.*
import java.util.*
//import jxl.write.*
import jxl.write.Formula;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder

import jxl.format.Colour;
import jxl.format.Pattern;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception



// Given an XML string
def xml = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header ver:CPIIDA-BUILD="build-57199" ver:CPIIDA-BUILD-TIME="2014-04-03_12-55-38" ver:CPIISRV-BUILD="build-57199" ver:CPIISRV-BUILD-TIME="2014-04-03_12-57-56" ver:CPIIWSRV-BUILD="build-57199" ver:CPIIWSRV-BUILD-TIME="2014-04-03_12-59-46" xmlns:ver="http://nationalpayment.net/ws/schemas/header/version"/>
   <SOAP-ENV:Body>
      <ns3:CreateClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/">
         <ns3:clientId>4320000010003809</ns3:clientId>
         <ns3:enrollmentId>363298</ns3:enrollmentId>
         <ns3:commandStatus>1</ns3:commandStatus>
         <ns3:errorMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </ns3:CreateClientResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''

// Parse it
def parsed = new XmlParser().parseText( xml )
log.info"<<<Parsed:: "+parsed


 XmlNodeList xmlnode = xmlDoc.DocumentElement.SelectNodes("//soap:Body/descendant::*[name()='CreateClientResponse']", parsed);
// Deal with each node:

log.info "<<<xmlnode"+xmlnode]]></script></con:config></con:testStep><con:testStep type="groovy" name="practicebasiccode23april1" disabled="true"><con:settings/><con:config><script>def CAR_RECORDS = '''
   &lt;records>
     &lt;car name='HSV Maloo' make='Holden' year='2006'/>
     &lt;car name='P50' make='Peel' year='1962'/>
     &lt;car name='Royale' make='Bugatti' year='1931'/>
   &lt;/records>
 '''

def carRecords = new XmlParser().parseText(CAR_RECORDS)
log.info"carRecords::"+carRecords
def cars = carRecords.children()
log.info"cars::"+cars
def royale = cars.find { it.@name == 'Royale' }	
//cars.remove(royale)
//cars.add(0, royale)
//def newCar = new Node(carRecords, 'car', [name:'My New Car', make:'Peel', year:'1962'])

//assert ["Royale", "HSV Maloo", "P50", "My New Car"] == carRecords.car*.@name

new XmlNodePrinter().print(carRecords)</script></con:config></con:testStep><con:testStep type="groovy" name="Copy of practicebasiccode23april2" disabled="true"><con:settings/><con:config><script><![CDATA[def xml = '''<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Header ver:CPIIDA-BUILD="build-57199" ver:CPIIDA-BUILD-TIME="2014-04-03_12-55-38" ver:CPIISRV-BUILD="build-57199" ver:CPIISRV-BUILD-TIME="2014-04-03_12-57-56" ver:CPIIWSRV-BUILD="build-57199" ver:CPIIWSRV-BUILD-TIME="2014-04-03_12-59-46" xmlns:ver="http://nationalpayment.net/ws/schemas/header/version"/>
   <SOAP-ENV:Body>
      <ns3:CreateClientResponse xmlns:ns3="http://nationalpayment.net/ws/schemas/messages" xmlns:ns2="http://nationalpayment.net/ws/schemas/types" xmlns:ns4="http://ws.enrollment.nationalpayment.net/enrollment/" xmlns:ns5="http://ws.npn.com/auto/" xmlns:ns6="http://ws.npn.com/mortgage/">
         <ns3:clientId>4320000010003809</ns3:clientId>
         <ns3:enrollmentId>363298</ns3:enrollmentId>
         <ns3:commandStatus>1</ns3:commandStatus>
         <ns3:errorMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </ns3:CreateClientResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>'''

def carRecords = new XmlParser().parseText(xml)
log.info"carRecords::"+carRecords
def cars = carRecords.children()
log.info"cars::"+cars
def royale = cars.find { it.@name == 'Royale' }	
//cars.remove(royale)
//cars.add(0, royale)
//def newCar = new Node(carRecords, 'car', [name:'My New Car', make:'Peel', year:'1962'])

//assert ["Royale", "HSV Maloo", "P50", "My New Car"] == carRecords.car*.@name

new XmlNodePrinter().print(carRecords)]]></script></con:config></con:testStep><con:testStep type="request" name="Copy of getenrollmentcommentList"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetEnrollmentCommentList</con:operation><con:request name="Copy of getenrollmentcommentList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"><s:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</s:Header><s:Body xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><GetEnrollmentCommentListRequest xmlns="http://nationalpayment.net/ws/schemas/messages"><subscriberId>200001</subscriberId><modifiedFromDate><date xmlns="http://nationalpayment.net/ws/schemas/types" format="MM/dd/yyyy hh:mm:ss a" value="12/9/2013 07:44:34 AM"/></modifiedFromDate><modifiedToDate><date xmlns="http://nationalpayment.net/ws/schemas/types" format="MM/dd/yyyy hh:mm:ss a" value="12/9/2013 09:44:34 AM"/></modifiedToDate><pageNo>1</pageNo><resultsPerPage>200</resultsPerPage><ascending>true</ascending></GetEnrollmentCommentListRequest></s:Body></s:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentCommentListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="properties" name="Prop"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>subcriberId</con:name><con:value>12123</con:value></con:property><con:property><con:name>merchantId</con:name><con:value>234</con:value></con:property><con:property><con:name>clientId</con:name><con:value>1231234</con:value></con:property><con:property><con:name>name</con:name><con:value>Nidhi</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="createsubscriberPayee1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateSubscriberPayee</con:operation><con:request name="createsubscriberPayee1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateSubscriberPayeeRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberPayeeId>${#TestCase#subscriberPayeeId}</mes:subscriberPayeeId>
         <mes:payeeName>${#TestCase#payeeName}</mes:payeeName>
         <!--Optional:-->
         <mes:payeeStatus>${#TestCase#payeeStatus}</mes:payeeStatus>
         <!--Optional:-->
         <mes:payeeDescription>${#TestCase#payeeDescription}</mes:payeeDescription>
         <!--Optional:-->
         <mes:payeeWebsite>${#TestCase#payeeWebsite}</mes:payeeWebsite>
         <!--Optional:-->
         <mes:externalPayeeId>${#TestCase#externalPayeeId}</mes:externalPayeeId>
         <!--Optional:-->
         <mes:faxNo>${#TestCase#faxNo}</mes:faxNo>
         <!--Optional:-->
         <mes:phoneNo>${#TestCase#phoneNo}</mes:phoneNo>
         <!--Optional:-->
         <mes:payeeAdresses>
            <!--Zero or more repetitions:-->
            <mes:address operation>
               <!--You may enter the following 7 items in any order-->
               <!--Optional:-->
               <typ:id>${#TestCase#Id}</typ:id>
               <!--Optional:-->
               <typ:externalId>${#TestCase#externalId}</typ:externalId>
               <!--Optional:-->
               <typ:address1>${#TestCase#address1}</typ:address1>
               <!--Optional:-->
               <typ:address2>${#TestCase#address2}</typ:address2>
               <!--Optional:-->
               <typ:city>${#TestCase#city}</typ:city>
               <!--Optional:-->
               <typ:state>${#TestCase#state}</typ:state>
               <!--Optional:-->
               <typ:zip>${#TestCase#zip}</typ:zip>
            </mes:address>
         </mes:payeeAdresses>
         <!--Optional:-->
         <mes:payeeContacts>
            <!--Zero or more repetitions:-->
            <mes:contact operation>
               <!--You may enter the following 10 items in any order-->
               <!--Optional:-->
               <typ:id>${#TestCase#Id}</typ:id>
               <!--Optional:-->
               <typ:externalId>${#TestCase#externalId}</typ:externalId>
               <!--Optional:-->
               <typ:department>${#TestCase#department}</typ:department>
               <typ:name>${#TestCase#name}</typ:name>
               <!--Optional:-->
               <typ:title>${#TestCase#title}</typ:title>
             
            </mes:contact>
         </mes:payeeContacts>
         <!--Optional:-->
         <mes:payeeBankAccounts>
            <!--Zero or more repetitions:-->
            <mes:account operation=>
               <!--You may enter the following 8 items in any order-->
               <!--Optional:-->
               <typ:id>${#TestCase#id}</typ:id>
               <!--Optional:-->
               <typ:externalId>${#TestCase#externalId}</typ:externalId>
               <!--Optional:-->
               <typ:bankName>${#TestCase#bankName}</typ:bankName>
               <typ:routingNumber>${#TestCase#routingNumber}</typ:routingNumber>
               <!--Optional:-->
               <typ:accountHolderName>${#TestCase#accountHolderName}</typ:accountHolderName>
               <!--Optional:-->
               <typ:accountNumber>${#TestCase#accountNumber}</typ:accountNumber>
               <!--Optional:-->
               <typ:accountType>${#TestCase#accountType}</typ:accountType>
               <!--Optional:-->
               <typ:status>${#TestCase#status}</typ:status>
            </mes:account>
         </mes:payeeBankAccounts>
      </mes:CreateSubscriberPayeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Copy of Automationdriver28april"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

int flagForExtraLargeResponse = 0;
int flagCount=0;
int iCountTestCase=0;
WritableSheet sheet;
WritableWorkbook workbook;


try{

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
def ActualResponseValue;
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 workbook = Workbook.createWorkbook(new File(TestResponseFile));
 sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
flagCount = 3

 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


/**
 * 
 */

//int responseSize = response.size();
int responseSize = response.length();
log.info "    >>>>    responseSize : "+responseSize;

int iDivisionCount;
if(responseSize>15000)
{
flagForExtraLargeResponse = 1;

double divisionCount = responseSize/15000;
int divisionOfResponseCount =  Math.round(divisionCount);

log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
{
	log.info "    >>>>    Division loop count : "+iDivisionCount;
	String responseName = "response"+iDivisionCount;
	int iStartLength = 0;
	int iEndLength = 15000*iDivisionCount;
	if(iDivisionCount>1)
	{
		log.info "   >>>>> into iDivisionCount>1 loop ";
		log.info "    >>>> iDivisionCount : "+iDivisionCount;
		iStartLength = (iDivisionCount-1)*15000;
		
	}
	//responseName = response.substring(iStartLength,32767*iDivisionCount);

	
	log.info "    >>>>>    iStartLength : "+iStartLength;
	log.info "    >>>>>    iEndLength : "+iEndLength;
	log.info "    >>>>>    responseSize : "+responseSize;
	if(!(iEndLength>=responseSize))
	{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
	log.info "    >>>>   IF BLOCK ";
	responseName = response.substring(iStartLength,iEndLength);
	}
	else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
	log.info "    >>>>   ELSE BLOCK ";
	responseName = response.substring(iStartLength,responseSize);	
	}
	log.info "   >>>>   responseName : "+responseName;
	Label labelResponse = new Label(iDivisionCount+1,iCountTestCase,responseName);
   	sheet.addCell(labelResponse);
}

//response = response.substring(0,32768);
}


if(flagForExtraLargeResponse>0)
{
	flagCount = flagCount+iDivisionCount;
}

Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
if(flagForExtraLargeResponse==0)
{
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
}




//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("ActualResponseValue,Value for "+xpath2+" is : "+ActualResponseValue);
//def v=ActualResponseValue.toString();
//def v1=v.trim();
//log.info("<<<ActualResponseValue toString:"+v);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
	
		//if(ActualResponseValue.toString().equalsIgnoreCase(""))
		//if(ActualResponseValue.toString().contains(""))
		if(ActualResponseValue.toString().equals(""))
		
		//if(v1.equals(null))
		//if(ActualResponseValue.toString()='')
		
		{
			log.info "I m here";
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue.toString().equals(""))
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE
//if(TYPE.equalsIgnoreCase("Integer"))
if(TYPE.equals("Integer")||TYPE.equals("integer"))
{
log.info "    >>>>    Integer DataType CHECK";
typeError=Integer.valueOf(ActualResponseValue)	
}
//else if(TYPE.equalsIgnoreCase("String"))
else if(TYPE.equals("String")||TYPE.equals("string"))
{
	log.info "    >>>>    String DataType CHECK";
typeError=String.valueOf(ActualResponseValue)
}
//else if(TYPE.equalsIgnoreCase("Long"))
else if(TYPE.equals("Long")||TYPE.equals("long"))
{
	log.info "    >>>>    Long DataType CHECK";
typeError=Long.valueOf(ActualResponseValue)
}
else if(TYPE.equals("Float")||TYPE.equals("float"))
{
	log.info "    >>>>    Float DataType CHECK";
typeError = Float.valueOf(ActualResponseValue)
}
else if(TYPE.equals("Boolean")||TYPE.equals("boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
typeError = Boolean.valueOf(ActualResponseValue)
}
else if(TYPE.toString().toLowerCase().contains(("Enum").toLowerCase()))
    {
	log.info "    >>>>    Enum DataType CHECK";
	log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
    }
else
typeError="Datatype should be either Integer,String,Long,Float,Boolean,double in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   	//workbook.write();
	//workbook.close();
}
//checking DataType done
	
}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}




workbook.write();
workbook.close();


}
/*
catch(XPathException xpathexp){
String expText = "An exception occurred : "+xpathexp;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();

}
*/
catch(Exception e){
	String expText = "An exception occurred : "+e;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();
}


log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"


]]></script></con:config></con:testStep><con:testStep type="request" name="test getsubscriberpayeeList" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetSubscriberPayeeList</con:operation><con:request name="test getsubscriberpayeeList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <mes:GetSubscriberPayeeListRequest>
         <!--You may enter the following 11 items in any order-->
         <mes:subscriberId>200001</mes:subscriberId>
         <mes:numberOfRecordsPerPage>20</mes:numberOfRecordsPerPage>
         <mes:pageNumber>1</mes:pageNumber>
         <!--Optional:-->
         <mes:fromDate><typ:date format="dd-MM-yyyy" value="01-04-2014"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate><typ:date format="dd-MM-yyyy" value="28-04-2014"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>CREATEDON</typ:orderBy>
         </mes:orderBy>
         <mes:ascending>true</mes:ascending>
         <mes:status>true</mes:status>
      </mes:GetSubscriberPayeeListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Copy of createsubscriberPayee" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateSubscriberPayee</con:operation><con:request name="Copy of createsubscriberPayee" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <mes:CreateSubscriberPayeeRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>${#TestCase#subscriberId}</mes:subscriberId>
         <!--Optional:-->
         <mes:subscriberPayeeId>${#TestCase#subscriberPayeeId}</mes:subscriberPayeeId>
         <mes:payeeName>${#TestCase#payeeName}</mes:payeeName>
         <!--Optional:-->
         <mes:payeeStatus>${#TestCase#payeeStatus}</mes:payeeStatus>
         <!--Optional:-->
         <mes:payeeDescription>${#TestCase#payeeDescription}</mes:payeeDescription>
         <!--Optional:-->
         <mes:payeeWebsite>${#TestCase#payeeWebsite}</mes:payeeWebsite>
         <!--Optional:-->
         <mes:externalPayeeId>${#TestCase#externalPayeeId}</mes:externalPayeeId>
         <!--Optional:-->
         <mes:faxNo>${#TestCase#faxNo}</mes:faxNo>
         <!--Optional:-->
         <mes:phoneNo>${#TestCase#phoneNo}</mes:phoneNo>
         <!--Optional:-->
         <mes:payeeAdresses>
            <!--Zero or more repetitions:-->
            <mes:address operation="CREATE">
               <!--You may enter the following 7 items in any order-->
               <!--Optional:-->
               <typ:id>${#TestCase#Id}</typ:id>
               <!--Optional:-->
               <typ:externalId>${#TestCase#externalId}</typ:externalId>
               <!--Optional:-->
               <typ:address1>${#TestCase#address1}</typ:address1>
               <!--Optional:-->
               <typ:address2>${#TestCase#address2}</typ:address2>
               <!--Optional:-->
               <typ:city>${#TestCase#city}</typ:city>
               <!--Optional:-->
               <typ:state>${#TestCase#state}</typ:state>
               <!--Optional:-->
               <typ:zip>${#TestCase#zip}</typ:zip>
            </mes:address>
         </mes:payeeAdresses>
         <!--Optional:-->
         <mes:payeeContacts>
            <!--Zero or more repetitions:-->
            <mes:contact operation="CREATE">
               <!--You may enter the following 10 items in any order-->
               <!--Optional:-->
               <typ:id>${#TestCase#Id}</typ:id>
               <!--Optional:-->
               <typ:externalId>${#TestCase#externalId}</typ:externalId>
               <!--Optional:-->
               <typ:department>${#TestCase#department}</typ:department>
               <typ:name>${#TestCase#name}</typ:name>
               <!--Optional:-->
               <typ:title>${#TestCase#title}</typ:title>
            </mes:contact>
         </mes:payeeContacts>
      </mes:CreateSubscriberPayeeRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberPayeeRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Copy of Automationdriver29april"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  



log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

int flagForExtraLargeResponse = 0;
int flagCount=0;
int iCountTestCase=0;
WritableSheet sheet;
WritableWorkbook workbook;


try{

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
def ActualResponseValue;
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 workbook = Workbook.createWorkbook(new File(TestResponseFile));
 sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
flagCount = 3

 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


/**
 * 
 */

//int responseSize = response.size();
int responseSize = response.length();
log.info "    >>>>    responseSize : "+responseSize;

int iDivisionCount;
if(responseSize>15000)
{
flagForExtraLargeResponse = 1;

double divisionCount = responseSize/15000;
int divisionOfResponseCount =  Math.round(divisionCount);

log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
{
	log.info "    >>>>    Division loop count : "+iDivisionCount;
	String responseName = "response"+iDivisionCount;
	int iStartLength = 0;
	int iEndLength = 15000*iDivisionCount;
	if(iDivisionCount>1)
	{
		log.info "   >>>>> into iDivisionCount>1 loop ";
		log.info "    >>>> iDivisionCount : "+iDivisionCount;
		iStartLength = (iDivisionCount-1)*15000;
		
	}
	//responseName = response.substring(iStartLength,32767*iDivisionCount);

	
	log.info "    >>>>>    iStartLength : "+iStartLength;
	log.info "    >>>>>    iEndLength : "+iEndLength;
	log.info "    >>>>>    responseSize : "+responseSize;
	if(!(iEndLength>=responseSize))
	{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
	log.info "    >>>>   IF BLOCK ";
	responseName = response.substring(iStartLength,iEndLength);
	}
	else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
	log.info "    >>>>   ELSE BLOCK ";
	responseName = response.substring(iStartLength,responseSize);	
	}
	log.info "   >>>>   responseName : "+responseName;
	Label labelResponse = new Label(iDivisionCount+1,iCountTestCase,responseName);
   	sheet.addCell(labelResponse);
}

//response = response.substring(0,32768);
}


if(flagForExtraLargeResponse>0)
{
	flagCount = flagCount+iDivisionCount;
}

Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
if(flagForExtraLargeResponse==0)
{
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
}




//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("ActualResponseValue,Value for "+xpath2+" is : "+ActualResponseValue);
//def v=ActualResponseValue.toString();
//def v1=v.trim();
//log.info("<<<ActualResponseValue toString:"+v);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
	
		//if(ActualResponseValue.toString().equalsIgnoreCase(""))
		//if(ActualResponseValue.toString().contains(""))
		if(ActualResponseValue.toString().equals(""))
		
		//if(v1.equals(null))
		//if(ActualResponseValue.toString()='')
		
		{
			log.info "I m here";
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents()
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue.toString().equals(""))
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE

if(TYPE.equals("Integer")||TYPE.equals("integer"))
{
log.info "    >>>>    Integer DataType CHECK";
typeError=Integer.valueOf(ActualResponseValue)	
}
//else if(TYPE.equalsIgnoreCase("String"))
else if(TYPE.equals("String")||TYPE.equals("string"))
{
	log.info "    >>>>    String DataType CHECK";
typeError=String.valueOf(ActualResponseValue)
}
//else if(TYPE.equalsIgnoreCase("Long"))
else if(TYPE.equals("Long")||TYPE.equals("long"))
{
	log.info "    >>>>    Long DataType CHECK";
typeError=Long.valueOf(ActualResponseValue)
}
else if(TYPE.equals("Float")||TYPE.equals("float"))
{
	log.info "    >>>>    Float DataType CHECK";
typeError = Float.valueOf(ActualResponseValue)
}
else if(TYPE.equals("Boolean")||TYPE.equals("boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
typeError = Boolean.valueOf(ActualResponseValue)
}
else if(TYPE.toString().toLowerCase().contains(("Enum").toLowerCase()))
    {
	log.info "    >>>>    Enum DataType CHECK";
	log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = ParameterDataType.substring(ParameterDataType.indexOf("[") + 1, ParameterDataType.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ResposeValueText).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
    }
else
typeError="Datatype should be either Integer,String,Long,Float,Boolean,double in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   	//workbook.write();
	//workbook.close();
}
//checking DataType done
	
}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}




workbook.write();
workbook.close();


}
/*
catch(XPathException xpathexp){
String expText = "An exception occurred : "+xpathexp;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();

}
*/
catch(Exception e){
	String expText = "An exception occurred : "+e;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();
}


log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"



]]></script></con:config></con:testStep><con:testStep type="request" name="CreateFeeSchedule - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateFeeSchedule</con:operation><con:request name="CreateFeeSchedule - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateFeeScheduleRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>200001</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>4320000110096853</mes:clientId>
        
         <!--Optional:-->
       
         <mes:subscriberFeeId>284</mes:subscriberFeeId>
         <mes:amount>450</mes:amount>
         <mes:occurs>12</mes:occurs>
         <mes:startDate>
            <typ:date format="dd-MM-yyyy" value="30-04-2014"/>
         </mes:startDate>
         
      </mes:CreateFeeScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateFeeScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetPaymentList - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetPaymentList</con:operation><con:request name="GetPaymentList - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetPaymentListRequest>
         <!--You may enter the following 19 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientIds>
            <!--Zero or more repetitions:-->
            <typ:clientId>?</typ:clientId>
         </mes:clientIds>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:scheduleIds>
            <!--Zero or more repetitions:-->
            <mes:scheduleId>?</mes:scheduleId>
         </mes:scheduleIds>
         <!--Optional:-->
         <mes:transactionMethod>?</mes:transactionMethod>
         <!--Optional:-->
         <mes:scheduleStatuses>
            <!--Zero or more repetitions:-->
            <typ:status>?</typ:status>
         </mes:scheduleStatuses>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromAmount>?</mes:fromAmount>
         <!--Optional:-->
         <mes:toAmount>?</mes:toAmount>
         <!--Optional:-->
         <mes:payeeName>?</mes:payeeName>
         <!--Optional:-->
         <mes:clientName>?</mes:clientName>
         <!--Optional:-->
         <mes:checkNumber>?</mes:checkNumber>
         <!--Optional:-->
         <mes:accountInfo>?</mes:accountInfo>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:numberOfRecordsPerPage>?</mes:numberOfRecordsPerPage>
         <!--Optional:-->
         <mes:orderBy>
            <!--Zero or more repetitions:-->
            <typ:orderBy>
               <typ:order value="?" isAscending="true"/>
            </typ:orderBy>
         </mes:orderBy>
      </mes:GetPaymentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetTransactionList - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetTransactionList</con:operation><con:request name="GetTransactionList - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetTransactionListRequest>
         <!--You may enter the following 15 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:type>?</mes:type>
         <!--Optional:-->
         <mes:status>?</mes:status>
         <!--Optional:-->
         <mes:modifiedFromDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedFromDate>
         <!--Optional:-->
         <mes:modifiedToDate>
            <typ:date format="?" value="?"/>
         </mes:modifiedToDate>
         <!--Optional:-->
         <mes:fromDate>
            <typ:date format="?" value="?"/>
         </mes:fromDate>
         <!--Optional:-->
         <mes:toDate>
            <typ:date format="?" value="?"/>
         </mes:toDate>
         <!--Optional:-->
         <mes:skipDeleted>false</mes:skipDeleted>
         <!--Optional:-->
         <mes:order>
            <!--Zero or more repetitions:-->
            <mes:orderBy>?</mes:orderBy>
         </mes:order>
         <!--Optional:-->
         <mes:ascending>true</mes:ascending>
         <!--Optional:-->
         <mes:pageNo>?</mes:pageNo>
         <!--Optional:-->
         <mes:resultsPerPage>?</mes:resultsPerPage>
         <!--Optional:-->
         <mes:lastTransactionId>?</mes:lastTransactionId>
      </mes:GetTransactionListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Copy of getClients"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetClients</con:operation><con:request name="Copy of getClients" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetClientsRequest>
         <!--You may enter the following 31 items in any order-->
         <mes:subscriberId>200000</mes:subscriberId>
         
      </mes:GetClientsRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientsRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Copy of getpaymentList"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetPaymentList</con:operation><con:request name="Copy of getpaymentList" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[ <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetPaymentListRequest>
         <!--You may enter the following 19 items in any order-->
         <mes:subscriberId>200000</mes:subscriberId>
         <!--Optional:-->
         
      </mes:GetPaymentListRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetPaymentListRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="AutomationdriverMay1"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

int flagForExtraLargeResponse = 0;
int flagCount=0;
int iCountTestCase=0;
WritableSheet sheet;
WritableWorkbook workbook;


try{

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
def ActualResponseValue;
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 workbook = Workbook.createWorkbook(new File(TestResponseFile));
 sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
flagCount = 3

 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


/**
 * 
 */

//int responseSize = response.size();
int responseSize = response.length();
log.info "    >>>>    responseSize : "+responseSize;

int iDivisionCount;
if(responseSize>15000)
{
flagForExtraLargeResponse = 1;

double divisionCount = responseSize/15000;
int divisionOfResponseCount =  Math.round(divisionCount);

log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
{
	log.info "    >>>>    Division loop count : "+iDivisionCount;
	String responseName = "response"+iDivisionCount;
	int iStartLength = 0;
	int iEndLength = 15000*iDivisionCount;
	if(iDivisionCount>1)
	{
		log.info "   >>>>> into iDivisionCount>1 loop ";
		log.info "    >>>> iDivisionCount : "+iDivisionCount;
		iStartLength = (iDivisionCount-1)*15000;
		
	}
	//responseName = response.substring(iStartLength,32767*iDivisionCount);

	
	log.info "    >>>>>    iStartLength : "+iStartLength;
	log.info "    >>>>>    iEndLength : "+iEndLength;
	log.info "    >>>>>    responseSize : "+responseSize;
	if(!(iEndLength>=responseSize))
	{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
	log.info "    >>>>   IF BLOCK ";
	responseName = response.substring(iStartLength,iEndLength);
	}
	else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
	log.info "    >>>>   ELSE BLOCK ";
	responseName = response.substring(iStartLength,responseSize);	
	}
	log.info "   >>>>   responseName : "+responseName;
	Label labelResponse = new Label(iDivisionCount+1,iCountTestCase,responseName);
   	sheet.addCell(labelResponse);
}

//response = response.substring(0,32768);
}


if(flagForExtraLargeResponse>0)
{
	flagCount = flagCount+iDivisionCount;
}

Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
if(flagForExtraLargeResponse==0)
{
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
}




//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("ActualResponseValue,Value for "+xpath2+" is : "+ActualResponseValue);
//def v=ActualResponseValue.toString();
//def v1=v.trim();
//log.info("<<<ActualResponseValue toString:"+v);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
	
		//if(ActualResponseValue.toString().equalsIgnoreCase(""))
		//if(ActualResponseValue.toString().contains(""))
		if(ActualResponseValue==null)
		
		//if(v1.equals(null))
		//if(ActualResponseValue.toString()='')
		
		{
			log.info "I m here";
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue==null)
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE

if(TYPE.toString().equalsIgnoreCase("Boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
	//ActualResponseValue=ActualResponseValue.toString();
	//boolean typeError2 = Boolean.valueOf(true.toBoolean());
	//boolean returnDataType = Boolean.valueOf(ActualResponseValue);
	typeError=boolean.valueOf(ActualResponseValue)
	log.info "    >>>>    Boolean DataType Check Completed";
}
if(TYPE.equals("Integer")||TYPE.equals("integer"))
{
log.info "    >>>>    Integer DataType CHECK";
typeError=Integer.valueOf(ActualResponseValue)	
}
//else if(TYPE.equalsIgnoreCase("String"))
if(TYPE.equals("String")||TYPE.equals("string"))
{
	log.info "    >>>>    String DataType CHECK";
typeError=String.valueOf(ActualResponseValue)
}
//else if(TYPE.equalsIgnoreCase("Long"))
if(TYPE.equals("Long")||TYPE.equals("long"))
{
	log.info "    >>>>    Long DataType CHECK";
typeError=Long.valueOf(ActualResponseValue)
}
if(TYPE.equals("Float")||TYPE.equals("float"))
{
	log.info "    >>>>    Float DataType CHECK";
typeError = Float.valueOf(ActualResponseValue)
}
if(TYPE.equals("Double")||TYPE.equals("double"))
{
	log.info "    >>>>    Double DataType CHECK";
typeError = Double.valueOf(ActualResponseValue)
}
if(TYPE.toString().equalsIgnoreCase("Boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
	//ActualResponseValue=ActualResponseValue.toString();
	//boolean typeError2 = Boolean.valueOf(true.toBoolean());
	boolean returnDataType = Boolean.valueOf(ActualResponseValue);
	log.info "    >>>>    Boolean DataType Check Completed";
}
if(TYPE.toString().toLowerCase().contains(("Enum").toLowerCase()))
    {
	log.info "    >>>>    Enum DataType CHECK";
	log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = TYPE.substring(TYPE.indexOf("[") + 1, TYPE.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ActualResponseValue).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
    }
else
typeError="Datatype should be either Integer,String,Long,Float,Boolean,double in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   	//workbook.write();
	//workbook.close();
}
//checking DataType done

}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}

if(flagCount==3)
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}




workbook.write();
workbook.close();


}
/*
catch(XPathException xpathexp){
String expText = "An exception occurred : "+xpathexp;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();

}
*/
catch(Exception e){
	String expText = "An exception occurred : "+e;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();
}


log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"



]]></script></con:config></con:testStep><con:testStep type="groovy" name="Copy of Automationdriver2may"><con:settings/><con:config><script><![CDATA[import jxl.*
import jxl.write.*
import com.eviware.soapui.*
import java.util.*

import com.eviware.soapui.support.XmlHolder
import net.sf.*;
import net.sf.json.*;
import net.sf.json.groovy.*;
import groovy.json.JsonBuilder  

import java.lang.Throwable
import java.lang.Error
import java.lang.Exception

import java.text.ParseException;

import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;


log.info "                         <<<<<<<<<<<<<<<  Starting Test Groovy 1  >>>>>>>>>>>>>>>"

int flagForExtraLargeResponse = 0;
int flagCount=0;
int iCountTestCase=0;
WritableSheet sheet;
WritableWorkbook workbook;


try{

testRunner.runTestStepByName("ClearTCProperties");

//SetNo - this will take only the TestCases having the SetNo given by user.
String setNo = context.expand('${#Project#SetNo}')
//*************************************************************************//
def TestDataFile = context.expand( '${#Project#TestDataFileLocation}' )
String APIName = context.expand( '${#Project#RequestName}' )
def ActualResponseValue;
int Length =  TestDataFile.lastIndexOf( '\\' )
  log.info "    >>>>>>>>>>>>>>>>> length : "+Length
  log.info "    >>>>>>>>>>>>>>>>> TestDataFile : "+TestDataFile
String ResposeFileLocation = TestDataFile.substring(0,Length)
  //Getting Current Time
      currentTime = times = new Date().format("dd-MM-yyyy HH-mm-ss")
  log.info "   >>>>>>>> : time : "+currentTime

 //Getting location to create the TestResponseFile
 String TestResponseFile = ResposeFileLocation + "\\"+APIName+"-TestResponse-" +currentTime+".xls"
 log.info " >>>>>>>>>>>>>>  TestResponseFile "+TestResponseFile
 //Creating Response Excel File
 workbook = Workbook.createWorkbook(new File(TestResponseFile));
 sheet = workbook.createSheet("Response",0)
 log.info "    >>>>>>>>>>>>>>>>> TestResponseFile : "+TestResponseFile

  Label label00 = new Label(0, 0, "TCID"); //column=0=A,row=0=1
  sheet.addCell(label00);

  Label label01 = new Label(1, 0, "REQUEST"); //column=0=A,row=0=1
  sheet.addCell(label01);
  
  Label label02 = new Label(2, 0, "RESPONSE"); //column=0=A,row=0=1
  sheet.addCell(label02);
 //Get the Test Data Excel File
 Workbook TestDataWB = Workbook.getWorkbook(new File(TestDataFile));

 Sheet TestDataProp1 = TestDataWB.getSheet("Request Schema")

 Sheet TestDataValues1 = TestDataWB.getSheet("Request Values");
 Sheet TestDataResponseSchema = TestDataWB.getSheet("Response Schema")
 Sheet TestDataResponse = TestDataWB.getSheet("Response Values")
 PropRowCount = TestDataProp1.getRows()
 PropColCount = TestDataProp1.getColumns()
 ResponseSchemaRowCount = TestDataResponseSchema.getRows()
 ResponseSchemaColCount = TestDataResponseSchema.getColumns()
log.info " >>>>>>>>>>>>> Resonse Schema RowCount : "+ResponseSchemaRowCount
log.info " >>>>>>>>>>>>> Response Schema ColCount : "+ResponseSchemaColCount
//Count Rows and Columns in Response sheet
 ResponseRowCount = TestDataResponse.getRows()
 ResponseColCount = TestDataResponse.getColumns()
log.info " >>>>>>>>>>>>> Response RowCount : "+ResponseRowCount
 log.info " >>>>>>>>>>>>> Response ColCount : "+ResponseColCount

//Count Rows and Columns in Values sheet
 ValuesRowCount = TestDataValues1.getRows()
 ValuesColCount = TestDataValues1.getColumns()
 log.info "  >>>>>>>>>>>>>>>>>>>>.    ValuesRowCount " +ValuesRowCount
 //This will display an information message
 def alert = com.eviware.soapui.support.UISupport;
 //alert.showInfoMessage("Hello World !");
 //alert.showInfoMessage("Hello World !","soapUI Warning !")
 log.info "    >>>>>>>>>>>> PropRowCount "+PropRowCount
 log.info "    >>>>>>>>>>>> ValuesColCount " +ValuesColCount
if(PropRowCount != ValuesColCount-3)
{
 alert.showInfoMessage("Mismatch in the count of Properties and Values");
 return
}




//********Iterating loop for No of Test Cases in Test Data Sheet*********//
for(iCountTestCase=1;iCountTestCase < ValuesRowCount;iCountTestCase++)
{//************START loop for No of Test Cases
flagCount = 3

 //Label label02 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents()); //column=0=A,row=0=1
 //sheet.addCell(label02);


	
if(!(TestDataValues1.getCell(3,iCountTestCase).getContents()==setNo))
	{
		log.info"				>>>>>>>>>>>>>>>>>> :iCountOfTC is :"+iCountTestCase+" and SEtNo is :"+setNo
		log.info"				>>>>>>>>>>>>>>>>>> :"+TestDataValues1.getCell(0,iCountTestCase).getContents()+" does NOT belong to Setno :"+setNo
		//iCountTestCase = iCountTestCase-1
		continue;
	}


for(iCounter=1;iCounter<PropRowCount;iCounter++)
{
log.info"<<<<<<<property"+	TestDataProp1.getCell(0,iCounter).getContents()+">>>>>>>>>values"+TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents()
 testRunner.testCase.setPropertyValue( TestDataProp1.getCell(0,iCounter).getContents(), TestDataValues1.getCell(iCounter+3,iCountTestCase).getContents())
}

testRunner.runTestStepByName(APIName)
log.info iCountTestCase
log.info "                         <<<<<<<<<<<<<<<  Starting Validate xml  Response for testcaseNo="+iCountTestCase+ValuesRowCount;
log.info "@@@ context"+context
def rawReq = testRunner.testCase.testSteps[APIName].testRequest.response.requestContent;
log.info  "				>>>> rawReq =:"+rawReq;


def ReqHolder2 = testRunner.testCase.getTestStepByName(APIName).getProperty("request").value
log.info "    >>>>    ReqHolder : "+ReqHolder2;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
 holder = groovyUtils.getXmlHolder( "${APIName}#Response" )

 
def response = testRunner.testCase.getTestStepByName(APIName).getPropertyValue("response")
log.info ">>>>>>>>>>>response before parse>"+response


/**
 * 
 */

//int responseSize = response.size();
int responseSize = response.length();
log.info "    >>>>    responseSize : "+responseSize;

int iDivisionCount;
if(responseSize>10000)
{
flagForExtraLargeResponse = 1;

double divisionCount = responseSize/10000;
int divisionOfResponseCount =  Math.round(divisionCount);

log.info "   >>>>>>>   divisionOfResponseCount : "+divisionOfResponseCount;


for(iDivisionCount=1;iDivisionCount<=divisionOfResponseCount;iDivisionCount++)
{
	log.info "    >>>>    Division loop count : "+iDivisionCount;
	String responseName = "response"+iDivisionCount;
	int iStartLength = 0;
	int iEndLength = 10000*iDivisionCount;
	if(iDivisionCount>1)
	{
		log.info "   >>>>> into iDivisionCount>1 loop ";
		log.info "    >>>> iDivisionCount : "+iDivisionCount;
		iStartLength = (iDivisionCount-1)*10000;
		
	}
	//responseName = response.substring(iStartLength,32767*iDivisionCount);

	
	log.info "    >>>>>    iStartLength : "+iStartLength;
	log.info "    >>>>>    iEndLength : "+iEndLength;
	log.info "    >>>>>    responseSize : "+responseSize;
	if(!(iEndLength>=responseSize))
	{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
	log.info "    >>>>   IF BLOCK ";
	responseName = response.substring(iStartLength,iEndLength);
	}
	else{
		log.info "    >>>>   iStartLength : "+iStartLength+"  | iEndLength : "+iEndLength;
		log.info "    >>>>>    responseSize : "+responseSize;
	log.info "    >>>>   ELSE BLOCK ";
	responseName = response.substring(iStartLength,responseSize);	
	}
	log.info "   >>>>   responseName : "+responseName;
	Label labelResponse = new Label(iDivisionCount+1,iCountTestCase,responseName);
   	sheet.addCell(labelResponse);
}

//response = response.substring(0,32768);
}


if(flagForExtraLargeResponse>0)
{
	flagCount = flagCount+iDivisionCount;
}

Label labelRequest = new Label(1,iCountTestCase,rawReq);
   sheet.addCell(labelRequest);
if(flagForExtraLargeResponse==0)
{
Label label5 = new Label(2,iCountTestCase,response);
   sheet.addCell(label5);
}




//Assertion for Response Schema

//START loop for no of rows in response schema
for(int iCounterForResponseSchema=1;iCounterForResponseSchema<ResponseSchemaRowCount;iCounterForResponseSchema++)
{

String xpath2 = TestDataResponseSchema.getCell(3,iCounterForResponseSchema).getContents();
log.info"xpath : "+xpath2
ActualResponseValue=holder.getNodeValue(xpath2);
log.info("ActualResponseValue,Value for "+xpath2+" is : "+ActualResponseValue);
//def v=ActualResponseValue.toString();
//def v1=v.trim();
//log.info("<<<ActualResponseValue toString:"+v);

	
log.info "    >>>>    Into Loop for Mandatory param check "+iCounterForResponseSchema; 
//Condition to check mandatory parameters in response
if(TestDataResponseSchema.getCell(1,iCounterForResponseSchema).getContents() == "Y")
	{
		log.info "    >>>>   Mandatory Param check condition";
	
		//if(ActualResponseValue.toString().equalsIgnoreCase(""))
		//if(ActualResponseValue.toString().contains(""))
		if(ActualResponseValue==null)
		
		//if(v1.equals(null))
		//if(ActualResponseValue.toString()='')
		
		{
			log.info "I m here";
		Label labelMandatoryParamMissing = new Label(flagCount, iCountTestCase, "Mandatory Param Missing : "+xpath2+"");
   		sheet.addCell(labelMandatoryParamMissing);
   		flagCount = flagCount+1
					
		log.info"TC_0.  "+iCountTestCase+" mandatory param missing >>>>>   "+xpath2+">>>>    is "+ ActualResponseValue
			continue;
		}
	}

//Condition to check DataTypes
if(!(TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents().isEmpty()))
{
String TYPE= TestDataResponseSchema.getCell(2,iCounterForResponseSchema).getContents();
log.info"type="+ TYPE;

try
{
	log.info " ActualResponseValue = "+ActualResponseValue;
	//if(ActualResponseValue.toString().contains(""))
	if(ActualResponseValue==null)
	{
		log.info "    >>>>   DataType Validation - No value found for : "+xpath2;
		//Label labelDataTypeValueMissing = new Label(flagCount, iCountTestCase, "No value found for : "+xpath1+"");
   		//sheet.addCell(labelDataTypeValueMissing);
   		//flagCount = flagCount+1;
   		continue;
	}
log.info"TYPE  : "+TYPE

if(TYPE.toString().equalsIgnoreCase("Boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
	
	if(ActualResponseValue)
	{
		log.info  "Boolean Value-1 - "+ActualResponseValue;
	}
	else if(ActualResponseValue.toString.equalsIgnoreCase('true')||ActualResponseValue.toString.equalsIgnoreCase('false'))
	{
		log.info  "Boolean Value-2 - "+ActualResponseValue;
	}
	else
	{

	typeErrorMsg="Data type mismatch in response : "+xpath2;
	Label labelNotBoolean = new Label(flagCount,iCountTestCase,typeErrorMsg);
   	sheet.addCell(labelNotBoolean);
    	flagCount = flagCount+1
   	
		
	}
	
	
	
	/*
	//ActualResponseValue=ActualResponseValue.toString();
	//boolean typeError2 = Boolean.valueOf(true.toBoolean());
	//boolean returnDataType = Boolean.valueOf(ActualResponseValue);
	typeError=boolean.valueOf(ActualResponseValue)
	*/
	log.info "    >>>>    Boolean DataType Check Completed";
}
if(TYPE.equals("Integer")||TYPE.equals("integer"))
{
log.info "    >>>>    Integer DataType CHECK";
typeError=Integer.valueOf(ActualResponseValue)	
}
//else if(TYPE.equalsIgnoreCase("String"))
if(TYPE.equals("String")||TYPE.equals("string"))
{
	log.info "    >>>>    String DataType CHECK";
typeError=String.valueOf(ActualResponseValue)
}
//else if(TYPE.equalsIgnoreCase("Long"))
if(TYPE.equals("Long")||TYPE.equals("long"))
{
	log.info "    >>>>    Long DataType CHECK";
typeError=Long.valueOf(ActualResponseValue)
}
if(TYPE.equals("Float")||TYPE.equals("float"))
{
	log.info "    >>>>    Float DataType CHECK";
typeError = Float.valueOf(ActualResponseValue)
}
if(TYPE.equals("Double")||TYPE.equals("double"))
{
	log.info "    >>>>    Double DataType CHECK";
typeError = Double.valueOf(ActualResponseValue)
}
/*
if(TYPE.toString().equalsIgnoreCase("Boolean"))
{
	log.info "    >>>>    Boolean DataType CHECK";
	//ActualResponseValue=ActualResponseValue.toString();
	//boolean typeError2 = Boolean.valueOf(true.toBoolean());
	boolean returnDataType = Boolean.valueOf(ActualResponseValue);
	log.info "    >>>>    Boolean DataType Check Completed";
}
*/
if(TYPE.toString().toLowerCase().contains(("Enum").toLowerCase()))
    {
	log.info "    >>>>    Enum DataType CHECK";
	log.info "				>>>>>>>>>>>>>>>>>> : cONTROL came to Enum IF block"
	EnumDataCollection = TYPE.substring(TYPE.indexOf("[") + 1, TYPE.indexOf("]"))
	log.info "				>>>>>>>>>>>>>>>>>> : String1 :"+EnumDataCollection

	if(!(EnumDataCollection.toString().toLowerCase().contains((ActualResponseValue).toLowerCase())))
	{
		log.info "				>>>>>>>>>>>>>>>>>> : Enum value not found in ResposeValueText"
	String dataTypeIncorrect = "The Values for the Parameter "+ResponseParameter+" is NOT among "+EnumDataCollection
	Label label4 = new Label(flagCount, iCountTestCase, dataTypeIncorrect);
	sheet.addCell(label4);
	flagCount = flagCount+1
	}
    }
else
typeError="Datatype should be either Integer,String,Long,Float,Boolean,double in Response Schema Excel"
}

catch(all)
{    
	typeErrorMsg="Data type mismatch in response : "+xpath2+" "+all;

	Label label6 = new Label(flagCount,iCountTestCase,typeErrorMsg);
   sheet.addCell(label6);
    flagCount = flagCount+1
   	//workbook.write();
	//workbook.close();
}
//checking DataType done

}
}
//END loop for no of rows in response schema
//End Assertion for Response Schema





//Assertion for Response Values
for( iCounter1=1;iCounter1<ResponseColCount;iCounter1++)
{

  if(!(TestDataResponse.getCell(iCounter1,iCountTestCase).getContents().isEmpty()))
 {
String ResponseFromTestData = TestDataResponse.getCell(iCounter1,iCountTestCase).getContents();
log.info "param not null is>>"+ResponseFromTestData
log.info"counter1"+iCounter1

String xpath1 = TestDataResponseSchema.getCell(3,iCounter1).getContents()
log.info"xpath"+xpath1
ActualResponseValue=holder.getNodeValue(xpath1);
log.info("AcualResponse datatype"+ActualResponseValue.getClass())

log.info("EXcelResponse datatype"+ResponseFromTestData.getClass())

if(!(ResponseFromTestData.equals(ActualResponseValue)))
//if(!(ActualResponseValue.contains(ResponseFromTestData)))
{

Label label2 = new Label(flagCount, iCountTestCase, "response mismatch"+xpath1+"");
   sheet.addCell(label2);
   flagCount = flagCount+1
	
log.info"TC_0.  "+iCountTestCase+" response mismatch>>>>>   "+xpath1+">>>>    is "+ ActualResponseValue
}

}
}
log.info "       >>>>>>    flagCount : "+flagForExtraLargeResponse;
log.info "       >>>>>>    iDivisionCount : "+iDivisionCount;
log.info "       >>>>>>    flagForExtraLargeResponse : "+flagForExtraLargeResponse;
if(flagCount<=(3+iDivisionCount))
{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.GREEN);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}
else{
	 //Creating Writable font to be used in the response sheet
 WritableFont normalFont = new WritableFont(WritableFont.ARIAL);
 //creating plain format to write data in excel sheet
     WritableCellFormat normalFormat = new WritableCellFormat(normalFont);
 
 normalFormat.setBackground(jxl.format.Colour.RED);
 log.info  "          >>>>>else loop - flagCount "+flagCount
 Label label03 = new Label(0, iCountTestCase, TestDataValues1.getCell(0,iCountTestCase).getContents(),normalFormat); //column=0=A,row=0=1
 sheet.addCell(label03);
}

}




workbook.write();
workbook.close();


}
/*
catch(XPathException xpathexp){
String expText = "An exception occurred : "+xpathexp;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();

}
*/
catch(NumberFormatException e){
	String expText = "An exception occurred : "+e;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();
}
catch(all){
	String expText = "An exception occurred : "+all;
log.info "    >>>> "+expText;
Label labelExpText = new Label(flagCount,iCountTestCase,expText);
   sheet.addCell(labelExpText);
workbook.write();
workbook.close();
}


log.info "                         <<<<<<<<<<<<<<<  End of Validating xml  Response >>>>>>>>>>>>>>>"



]]></script></con:config></con:testStep><con:testStep type="request" name="CancelEnrollment - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CancelEnrollment</con:operation><con:request name="CancelEnrollment - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CancelEnrollmentRequest>
         <!--You may enter the following 9 items in any order-->
<!--         <mes:subscriberId></mes:subscriberId>-->
         <mes:enrollmentId>363560</mes:enrollmentId>
         <mes:cancelReasonCode>RS-01</mes:cancelReasonCode>
         <mes:cancelFeeAmt>1</mes:cancelFeeAmt>
         <!--Optional:-->
         <mes:comments>No COMMENT</mes:comments>
         
         <mes:waiveCancelFee>true</mes:waiveCancelFee>
         <mes:waivePendingFee>true</mes:waivePendingFee>
         <mes:cancelledBy>USER</mes:cancelledBy>
      </mes:CancelEnrollmentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CancelEnrollmentRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="GetDraftSchedule - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetDraftSchedule</con:operation><con:request name="GetDraftSchedule - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
 <soapenv:Body>
   
      <mes:GetDraftScheduleRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:scheduleId>47993419</mes:scheduleId>
         <!--Optional:-->
         <mes:externalReferenceId>draft229852</mes:externalReferenceId>
     <!--    <mes:subscriberId>?</mes:subscriberId> --!>
         
         <!--Optional:-->
         <mes:externalClientId>client229852</mes:externalClientId>
      </mes:GetDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetDraftScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="Copy of createdraftSchedule"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateDraftSchedule</con:operation><con:request name="Copy of createdraftSchedule" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws-1615244660.us-east-1.elb.amazonaws.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
 <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateDraftScheduleRequest>
         <!--You may enter the following 12 items in any order-->
         <mes:subscriberId>200059</mes:subscriberId>
         <!--Optional:-->
         <mes:clientId>4320005910027500</mes:clientId>
         <!--Optional:-->
         <mes:externalClientId>Py74vJKt</mes:externalClientId>
         <!--Optional:-->
         <mes:externalReferenceId>ext123</mes:externalReferenceId>
         <!--Optional:-->
         <mes:clientBankAccountId>306645</mes:clientBankAccountId>
         <mes:amount>56</mes:amount>
         <mes:occurs>1</mes:occurs>
         <mes:startDate>
            <typ:date format="dd-MM-yyyy" value="03-03-2015"/>
         </mes:startDate>
         
         <mes:type>ADHOC</mes:type>
         <!--Optional:-->
         <mes:comment>No</mes:comment>
         
      </mes:CreateDraftScheduleRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDraftScheduleRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest name="LoadTest1"><con:settings/><con:threadCount>5</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>10</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>5</testDelay><randomFactor>5.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties><con:property><con:name>userName</con:name><con:value/></con:property><con:property><con:name>subscriberId</con:name><con:value>200059</con:value></con:property><con:property><con:name>externalClientId</con:name><con:value>Py74vJKt</con:value></con:property><con:property><con:name>referralId</con:name><con:value/></con:property><con:property><con:name>channelId</con:name><con:value/></con:property><con:property><con:name>productId</con:name><con:value/></con:property><con:property><con:name>firstname</con:name><con:value/></con:property><con:property><con:name>middleInitial</con:name><con:value/></con:property><con:property><con:name>lastname</con:name><con:value/></con:property><con:property><con:name>ssn</con:name><con:value/></con:property><con:property><con:name>dob</con:name><con:value/></con:property><con:property><con:name>address1</con:name><con:value/></con:property><con:property><con:name>address2</con:name><con:value/></con:property><con:property><con:name>city</con:name><con:value/></con:property><con:property><con:name>state</con:name><con:value/></con:property><con:property><con:name>zip</con:name><con:value/></con:property><con:property><con:name>phone</con:name><con:value/></con:property><con:property><con:name>WorkNumber</con:name><con:value/></con:property><con:property><con:name>mobile</con:name><con:value/></con:property><con:property><con:name>email</con:name><con:value/></con:property><con:property><con:name>draftAmount</con:name><con:value/></con:property><con:property><con:name>coClients</con:name><con:value/></con:property><con:property><con:name>svaDocument</con:name><con:value/></con:property><con:property><con:name>oldPassword</con:name><con:value/></con:property><con:property><con:name>password</con:name><con:value/></con:property><con:property><con:name>enrollmentStatus</con:name><con:value/></con:property><con:property><con:name>ClientId</con:name><con:value>4320005910027500</con:value></con:property><con:property><con:name>coClientFirstname</con:name><con:value/></con:property><con:property><con:name>coClientLastname</con:name><con:value/></con:property><con:property><con:name>coClientMiddleInitial</con:name><con:value/></con:property><con:property><con:name>coClientSsn</con:name><con:value/></con:property><con:property><con:name>coClientDob</con:name><con:value/></con:property><con:property><con:name>coClientPhone</con:name><con:value/></con:property><con:property><con:name>coClientWorkNumber</con:name><con:value/></con:property><con:property><con:name>coClientMobile</con:name><con:value/></con:property><con:property><con:name>coClientEmail</con:name><con:value/></con:property><con:property><con:name>status</con:name><con:value/></con:property><con:property><con:name>returnSPAAImage</con:name><con:value/></con:property><con:property><con:name>operation</con:name><con:value/></con:property><con:property><con:name>enrollmentId</con:name><con:value/></con:property><con:property><con:name>cancelReasonCode</con:name><con:value/></con:property><con:property><con:name>cancelFeeAmt</con:name><con:value/></con:property><con:property><con:name>comments</con:name><con:value/></con:property><con:property><con:name>printCancelLetter</con:name><con:value/></con:property><con:property><con:name>waiveCancelFee</con:name><con:value/></con:property><con:property><con:name>waivePendingFee</con:name><con:value/></con:property><con:property><con:name>cancelledBy</con:name><con:value/></con:property><con:property><con:name>externalReferenceId</con:name><con:value>ext123</con:value></con:property><con:property><con:name>clientBankAccountId</con:name><con:value>306645</con:value></con:property><con:property><con:name>amount</con:name><con:value/></con:property><con:property><con:name>occurs</con:name><con:value>1</con:value></con:property><con:property><con:name>startDate</con:name><con:value>&lt;typ:date format="dd-MM-yyyy" value="24-04-2015"/></con:value></con:property><con:property><con:name>type</con:name><con:value>ADHOC</con:value></con:property><con:property><con:name>comment</con:name><con:value>comment</con:value></con:property><con:property><con:name>remark</con:name><con:value/></con:property><con:property><con:name>allowDuplicates</con:name><con:value/></con:property><con:property><con:name>scheduleFrequencyType</con:name><con:value/></con:property><con:property><con:name>scheduleList</con:name><con:value/></con:property><con:property><con:name>scheduleDate</con:name><con:value/></con:property><con:property><con:name>scheduleId</con:name><con:value/></con:property><con:property><con:name>scheduleIds</con:name><con:value/></con:property><con:property><con:name>extrenalclientId</con:name><con:value/></con:property><con:property><con:name>endDate</con:name><con:value/></con:property><con:property><con:name>modifiedFromDate</con:name><con:value/></con:property><con:property><con:name>modifiedToDate</con:name><con:value/></con:property><con:property><con:name>order</con:name><con:value/></con:property><con:property><con:name>ascending</con:name><con:value/></con:property><con:property><con:name>pageNumber</con:name><con:value/></con:property><con:property><con:name>numberOfRecordsPerPage</con:name><con:value/></con:property><con:property><con:name>updateRemainingSchedules</con:name><con:value/></con:property><con:property><con:name>routingNumber</con:name><con:value/></con:property><con:property><con:name>accountType</con:name><con:value/></con:property><con:property><con:name>accountNumber</con:name><con:value/></con:property><con:property><con:name>holdersName</con:name><con:value/></con:property><con:property><con:name>externalBankId</con:name><con:value/></con:property><con:property><con:name>createdFrom</con:name><con:value/></con:property><con:property><con:name>createdTo</con:name><con:value/></con:property><con:property><con:name>modifiedFrom</con:name><con:value/></con:property><con:property><con:name>modifiedTo</con:name><con:value/></con:property><con:property><con:name>subscriberPayeeId</con:name><con:value/></con:property><con:property><con:name>payeeName</con:name><con:value/></con:property><con:property><con:name>payeeStatus</con:name><con:value/></con:property><con:property><con:name>payeeDescription</con:name><con:value/></con:property><con:property><con:name>payeeWebsite</con:name><con:value/></con:property><con:property><con:name>externalPayeeId</con:name><con:value/></con:property><con:property><con:name>faxNo</con:name><con:value/></con:property><con:property><con:name>phoneNo</con:name><con:value/></con:property><con:property><con:name>address</con:name><con:value/></con:property><con:property><con:name>contact</con:name><con:value/></con:property><con:property><con:name>account</con:name><con:value/></con:property><con:property><con:name>subscriberFeeId</con:name><con:value/></con:property><con:property><con:name>frequency</con:name><con:value/></con:property><con:property><con:name>settlementId</con:name><con:value/></con:property><con:property><con:name>paymentId</con:name><con:value/></con:property><con:property><con:name>noOfIds</con:name><con:value/></con:property><con:property><con:name>payeeId</con:name><con:value/></con:property><con:property><con:name>payeeAddressId</con:name><con:value/></con:property><con:property><con:name>PayeeExternalAddressId</con:name><con:value/></con:property><con:property><con:name>payeeContactId</con:name><con:value/></con:property><con:property><con:name>payeeExternalContactId</con:name><con:value/></con:property><con:property><con:name>PayeeBankExternalAccountId</con:name><con:value/></con:property><con:property><con:name>currentBalance</con:name><con:value/></con:property><con:property><con:name>settlementAmount</con:name><con:value/></con:property><con:property><con:name>numPayments</con:name><con:value/></con:property><con:property><con:name>negotiator</con:name><con:value/></con:property><con:property><con:name>isApprovalRequired</con:name><con:value/></con:property><con:property><con:name>settlementScheduleList</con:name><con:value/></con:property><con:property><con:name>pageNo</con:name><con:value/></con:property><con:property><con:name>resultsPerPage</con:name><con:value/></con:property><con:property><con:name>commentId</con:name><con:value/></con:property><con:property><con:name>orderBy</con:name><con:value/></con:property><con:property><con:name>fromDate</con:name><con:value/></con:property><con:property><con:name>toDate</con:name><con:value/></con:property><con:property><con:name>owner</con:name><con:value/></con:property><con:property><con:name>filterReversedFees</con:name><con:value/></con:property><con:property><con:name>showRfee</con:name><con:value/></con:property><con:property><con:name>skipDeleted</con:name><con:value/></con:property><con:property><con:name>lastTransactionId</con:name><con:value/></con:property><con:property><con:name>id</con:name><con:value/></con:property><con:property><con:name>feeId</con:name><con:value/></con:property><con:property><con:name>externalFeeId</con:name><con:value/></con:property><con:property><con:name>name</con:name><con:value/></con:property><con:property><con:name>description</con:name><con:value/></con:property><con:property><con:name>required</con:name><con:value/></con:property><con:property><con:name>priority</con:name><con:value/></con:property><con:property><con:name>payeeBankAccountId</con:name><con:value/></con:property><con:property><con:name>effectiveDate</con:name><con:value/></con:property><con:property><con:name>paymentAmount</con:name><con:value/></con:property><con:property><con:name>externalCheckNumber</con:name><con:value/></con:property><con:property><con:name>transactionMethod</con:name><con:value/></con:property><con:property><con:name>associatedFeeList</con:name><con:value/></con:property><con:property><con:name>transactionId</con:name><con:value/></con:property><con:property><con:name>transactionClass</con:name><con:value/></con:property><con:property><con:name>dueDate</con:name><con:value/></con:property><con:property><con:name>clientIds</con:name><con:value/></con:property><con:property><con:name>scheduleStatuses</con:name><con:value/></con:property><con:property><con:name>fromAmount</con:name><con:value/></con:property><con:property><con:name>toAmount</con:name><con:value/></con:property><con:property><con:name>clientName</con:name><con:value/></con:property><con:property><con:name>checkNumber</con:name><con:value/></con:property><con:property><con:name>accountInfo</con:name><con:value/></con:property><con:property><con:name>keyWord</con:name><con:value/></con:property><con:property><con:name>statuses</con:name><con:value/></con:property><con:property><con:name>spaStatuses</con:name><con:value/></con:property><con:property><con:name>enrollmentFromDate</con:name><con:value/></con:property><con:property><con:name>enrollmentToDate</con:name><con:value/></con:property><con:property><con:name>phoneNumber</con:name><con:value/></con:property><con:property><con:name>addressLine1</con:name><con:value/></con:property><con:property><con:name>addressLine2</con:name><con:value/></con:property><con:property><con:name>loanNumber</con:name><con:value/></con:property><con:property><con:name>lenderName</con:name><con:value/></con:property><con:property><con:name>VIN</con:name><con:value/></con:property><con:property><con:name>bankName</con:name><con:value/></con:property><con:property><con:name>accountHolderName</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC6" searchProperties="true" id="21d2815d-89c8-4133-b197-9d2a149f3b6f"><con:settings><con:setting id="FlowLayout">true</con:setting></con:settings><con:testStep type="datasource" name="DataSource" id="00df6a8c-e2e9-4384-924d-9527095b5468"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Excel"><con:configuration><file>C:/Users/Lenovo/Documents/auto_getclient.xls</file><worksheet/><cell>A2</cell><ignoreEmpty>false</ignoreEmpty></con:configuration></con:dataSource><con:property>subscriberid</con:property><con:property>clientid</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="random_name" id="1a85cdd2-58eb-4e7a-948f-32909b2dab45"><con:settings/><con:config><script>def generator = { String alphabet, int n ->
  new Random().with {
    (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()
  }
}

generator( (('A'..'Z')).join(), 9 )</script></con:config></con:testStep><con:testStep type="request" name="CreateClient - Request 1" id="8b494d2b-0c26-4de3-8ad4-6c343d906fe7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="CreateClient - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.support.editor.views.xml.form2.FormEditorView@ViewType">Data</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
       <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sanjib.pal@icteas.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         <mes:clientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:subscriberId>200000</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         
         <!--Optional:-->
         <mes:channelId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:productId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:firstname>Prasanth</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>${random_name#result}</mes:middleInitial>
         <mes:lastname>CV</mes:lastname>
         <!--Optional:-->
         <mes:ssn>678-67-3456</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="MM-dd-yyyy" value="09-09-1980"/>
         </mes:dob>
         <!--Optional:-->
         <mes:address1>add1</mes:address1>
         <!--Optional:-->
         <mes:address2>ad2</mes:address2>
         <!--Optional:-->
         <mes:city>CA</mes:city>
         <!--Optional:-->
         <mes:state>CA</mes:state>
         <!--Optional:-->
         <mes:zip>87678</mes:zip>
         <!--Optional:-->
         <mes:phone>8909876789</mes:phone>
         <!--Optional:-->
         <mes:WorkNumber xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:mobile xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:email xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:userName>${random_name#result}</mes:userName>
         <mes:draftAmount>400</mes:draftAmount>
         <!--Optional:-->
         <mes:coClients>
            <!--Zero or more repetitions:-->
            
         </mes:coClients>
         <!--Optional:-->
         
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="properties" name="cltproperty" id="aa49e0f9-b668-4182-9dd7-9dc7baa69720"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>name</con:name><con:value>hi</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="properties" name="CLTid" id="eef356c1-5ad6-4101-97f3-ab8662de9902"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>clientId</con:name><con:value xsi:nil="true"/></con:property></con:properties></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer 1" id="ed532c17-b6ef-4944-ae0b-c468f81083f0"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true"><con:name>clientId</con:name><con:sourceType>Response</con:sourceType><con:sourceStep>CreateClient - Request 1</con:sourceStep><con:sourcePath>declare namespace ns3='http://nationalpayment.net/ws/schemas/messages';
//ns3:CreateClientResponse[1]/ns3:clientId[1]</con:sourcePath><con:targetType>clientId</con:targetType><con:targetStep>CLTid</con:targetStep><con:targetPath/></con:transfers></con:config></con:testStep><con:testStep type="request" name="GetClient1" id="1816452a-ffef-4cb7-a34c-9d279bcd55f4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>GetClient</con:operation><con:request name="GetClient1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
     <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sanjib.pal@icteas.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">abcd1234</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security>
</soapenv:Header>
   <soapenv:Body>
      <mes:GetClientRequest>
         <!--You may enter the following 5 items in any order-->
         <!--Optional:-->
         <mes:status xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <mes:subscriberId>200000</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         <!--Optional:-->
         <mes:clientId>${CLTid#clientId}</mes:clientId>
         <!--Optional:-->
         <mes:returnSPAAImage>false</mes:returnSPAAImage>
      </mes:GetClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>a1eb817d-2505-4cbd-871c-648cf787903c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dc62bdee-e865-4b84-8ac2-c837f75148c4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>791dd9cb-5874-47fa-8b89-7cde1d51869e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/></con:testSuite><con:testSuite name="createClient"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="request" name="CreateClient - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>CreateClient</con:operation><con:request name="CreateClient - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateClientRequest>
         <!--You may enter the following 24 items in any order-->
         <!--Optional:-->
         <mes:clientId>?</mes:clientId>
         <mes:subscriberId>?</mes:subscriberId>
         <!--Optional:-->
         <mes:externalClientId>?</mes:externalClientId>
         <!--Optional:-->
         <mes:referralId type="RULESET" internal="YES">
            <typ:id>?</typ:id>
         </mes:referralId>
         <!--Optional:-->
         <mes:channelId>?</mes:channelId>
         <!--Optional:-->
         <mes:productId>?</mes:productId>
         <mes:firstname>?</mes:firstname>
         <!--Optional:-->
         <mes:middleInitial>?</mes:middleInitial>
         <mes:lastname>?</mes:lastname>
         <!--Optional:-->
         <mes:ssn>?</mes:ssn>
         <!--Optional:-->
         <mes:dob>
            <typ:date format="?" value="?"/>
         </mes:dob>
         <!--Optional:-->
         <mes:address1>?</mes:address1>
         <!--Optional:-->
         <mes:address2>?</mes:address2>
         <!--Optional:-->
         <mes:city>?</mes:city>
         <!--Optional:-->
         <mes:state>?</mes:state>
         <!--Optional:-->
         <mes:zip>?</mes:zip>
         <!--Optional:-->
         <mes:phone>?</mes:phone>
         <!--Optional:-->
         <mes:WorkNumber>?</mes:WorkNumber>
         <!--Optional:-->
         <mes:mobile>?</mes:mobile>
         <!--Optional:-->
         <mes:email>?</mes:email>
         <!--Optional:-->
         <mes:userName>?</mes:userName>
         <mes:draftAmount>?</mes:draftAmount>
         <!--Optional:-->
         <mes:coClients>
            <!--Zero or more repetitions:-->
            <typ:coClient>
               <!--You may enter the following 9 items in any order-->
               <typ:firstname>?</typ:firstname>
               <!--Optional:-->
               <typ:middleInitial>?</typ:middleInitial>
               <typ:lastname>?</typ:lastname>
               <!--Optional:-->
               <typ:ssn>?</typ:ssn>
               <typ:dob>
                  <typ:date format="?" value="?"/>
               </typ:dob>
               <!--Optional:-->
               <typ:phone>?</typ:phone>
               <!--Optional:-->
               <typ:WorkNumber>?</typ:WorkNumber>
               <!--Optional:-->
               <typ:mobile>?</typ:mobile>
               <!--Optional:-->
               <typ:email>?</typ:email>
            </typ:coClient>
         </mes:coClients>
         <!--Optional:-->
         <mes:svaDocument>
            <!--You may enter the following 5 items in any order-->
            <typ:note>?</typ:note>
            <!--Optional:-->
            <typ:documentType>?</typ:documentType>
            <typ:base64EncodedContent>?</typ:base64EncodedContent>
            <typ:contentType>?</typ:contentType>
            <typ:documentName>?</typ:documentName>
         </mes:svaDocument>
      </mes:CreateClientRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateClientRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="auth"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>npnSoap11</con:interface><con:operation>Auth</con:operation><con:request name="auth" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://qaws1.cftpay.com:8080/wsrv/services</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header>
      <wsse:Security soapenv:mustUnderstand="1" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd">
         <wsse:UsernameToken wsu:Id="XWSSGID-1261544568770-474929336" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
            <wsse:Username>sushant@bancbox.com</wsse:Username>
            <wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sushant4bbx</wsse:Password>
         </wsse:UsernameToken>
      </wsse:Security></soapenv:Header>
   <soapenv:Body>
      <mes:AuthRequest>
         <!--You may enter the following 3 items in any order-->
         <mes:username>${auth#Username}</mes:username>
         <mes:password>${auth#Password}</mes:password>
         <!--Optional:-->
<!--         <mes:ipAddress>?</mes:ipAddress>-->
      </mes:AuthRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response"/><con:credentials><con:username>prasanth@bancbox.com</con:username><con:password>abcd1234</con:password><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/AuthRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>username</con:name><con:value/></con:property><con:property><con:name>password</con:name><con:value/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:mockService port="8080" path="/" host="nidhi-pc" name="MockService 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockService@require-soap-action">false</con:setting></con:settings><con:mockOperation name="CreateDraftSchedule" interface="npnSoap11" operation="CreateDraftSchedule"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateDraftScheduleResponse>
         <mes:scheduleList>
            <!--1 or more repetitions:-->
            <mes:schedule>
               <!--You may enter the following 3 items in any order-->
               <mes:scheduleId>?</mes:scheduleId>
               <mes:externalReferenceId>?</mes:externalReferenceId>
               <mes:message>?</mes:message>
            </mes:schedule>
         </mes:scheduleList>
         <mes:commandStatus>?</mes:commandStatus>
         <mes:errorMessage>?</mes:errorMessage>
      </mes:CreateDraftScheduleResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateDraftScheduleResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="GetClientBankAccountList" interface="npnSoap11" operation="GetClientBankAccountList"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientBankAccountListResponse>
         <!--Optional:-->
         <mes:totalCount>?</mes:totalCount>
         <!--Optional:-->
         <mes:returnedCount>?</mes:returnedCount>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <mes:clientBankAccountList>
            <!--1 or more repetitions:-->
            <typ:clientBankAccount>
               <typ:bankInfo>
                  <typ:bankName>?</typ:bankName>
                  <typ:address1>?</typ:address1>
                  <typ:address2>?</typ:address2>
                  <typ:city>?</typ:city>
                  <typ:account_type>?</typ:account_type>
                  <typ:account_number>?</typ:account_number>
                  <typ:account_status>?</typ:account_status>
                  <typ:holder_name>?</typ:holder_name>
                  <typ:routing_number>?</typ:routing_number>
                  <!--Optional:-->
                  <typ:state>?</typ:state>
                  <!--Optional:-->
                  <typ:zipcode>?</typ:zipcode>
                  <!--Optional:-->
                  <typ:auditInfo>
                     <!--You may enter the following 6 items in any order-->
                     <typ:createdOn>
                        <typ:date format="?" value="?"/>
                     </typ:createdOn>
                     <typ:createdBy>?</typ:createdBy>
                     <typ:createdUserType>?</typ:createdUserType>
                     <typ:modifiedOn>
                        <typ:date format="?" value="?"/>
                     </typ:modifiedOn>
                     <typ:modifiedBy>?</typ:modifiedBy>
                     <typ:modifiedUserType>?</typ:modifiedUserType>
                  </typ:auditInfo>
               </typ:bankInfo>
               <typ:clientBankAccountId>?</typ:clientBankAccountId>
               <typ:clientId>?</typ:clientId>
               <typ:externalBankId>?</typ:externalBankId>
            </typ:clientBankAccount>
         </mes:clientBankAccountList>
         <mes:commandStatus>?</mes:commandStatus>
         <mes:errorMessage>?</mes:errorMessage>
      </mes:GetClientBankAccountListResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientBankAccountListResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="CreateFeeSchedule" interface="npnSoap11" operation="CreateFeeSchedule"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateFeeScheduleResponse>
         <mes:scheduleId>?</mes:scheduleId>
         <mes:commandStatus>?</mes:commandStatus>
         <mes:errorMessage>?</mes:errorMessage>
         <!--Zero or more repetitions:-->
         <mes:scheduleIdList>?</mes:scheduleIdList>
      </mes:CreateFeeScheduleResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateFeeScheduleResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="ListTopLevelFee" interface="npnSoap11" operation="ListTopLevelFee"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ListTopLevelFeeResponse>
         <!--You may enter the following 2 items in any order-->
         <!--Optional:-->
         <mes:commandStatus>?</mes:commandStatus>
         <mes:fees>
            <!--Zero or more repetitions:-->
            <typ:fee>
               <!--You may enter the following 8 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <typ:type>?</typ:type>
               <typ:owner>?</typ:owner>
               <typ:code>?</typ:code>
               <typ:name>?</typ:name>
               <typ:defPriority>?</typ:defPriority>
               <typ:defAmount>?</typ:defAmount>
               <typ:defFrequency>?</typ:defFrequency>
            </typ:fee>
         </mes:fees>
      </mes:ListTopLevelFeeResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ListTopLevelFeeResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="ListSubscriberFee" interface="npnSoap11" operation="ListSubscriberFee"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:ListSubscriberFeeResponse>
         <!--You may enter the following 5 items in any order-->
         <mes:subscriberId>?</mes:subscriberId>
         <mes:fees>
            <!--1 or more repetitions:-->
            <typ:fee>
               <!--You may enter the following 13 items in any order-->
               <!--Optional:-->
               <typ:id>?</typ:id>
               <typ:feeId>?</typ:feeId>
               <typ:externalfeeId>?</typ:externalfeeId>
               <typ:type>?</typ:type>
               <typ:owner>?</typ:owner>
               <typ:name>?</typ:name>
               <typ:source>?</typ:source>
               <typ:destination>?</typ:destination>
               <typ:description>?</typ:description>
               <typ:required>?</typ:required>
               <typ:priority>?</typ:priority>
               <typ:amount>?</typ:amount>
               <!--Optional:-->
               <typ:status>?</typ:status>
            </typ:fee>
         </mes:fees>
         <!--Optional:-->
         <mes:totalCount>?</mes:totalCount>
         <!--Optional:-->
         <mes:returnedCount>?</mes:returnedCount>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
      </mes:ListSubscriberFeeResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/ListSubscriberFeeResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="CreateSubscriberPayee" interface="npnSoap11" operation="CreateSubscriberPayee"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:CreateSubscriberPayeeResponse>
         <mes:commandStatus>?</mes:commandStatus>
         <!--Optional:-->
         <mes:payeeAddresses>
            <!--Zero or more repetitions:-->
            <typ:addressId>
               <!--You may enter the following 2 items in any order-->
               <typ:internalId>?</typ:internalId>
               <typ:externalReferenceId>?</typ:externalReferenceId>
            </typ:addressId>
         </mes:payeeAddresses>
         <!--Optional:-->
         <mes:payeeContacts>
            <!--Zero or more repetitions:-->
            <typ:contactId>
               <!--You may enter the following 2 items in any order-->
               <typ:internalId>?</typ:internalId>
               <typ:externalReferenceId>?</typ:externalReferenceId>
            </typ:contactId>
         </mes:payeeContacts>
         <!--Optional:-->
         <mes:payeeBankAccounts>
            <!--Zero or more repetitions:-->
            <typ:bankAccountId>
               <!--You may enter the following 2 items in any order-->
               <typ:internalId>?</typ:internalId>
               <typ:externalReferenceId>?</typ:externalReferenceId>
            </typ:bankAccountId>
         </mes:payeeBankAccounts>
         <mes:payeeId>?</mes:payeeId>
         <mes:errorMessage>?</mes:errorMessage>
      </mes:CreateSubscriberPayeeResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/CreateSubscriberPayeeResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="GetEnrollmentCommentList" interface="npnSoap11" operation="GetEnrollmentCommentList"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentCommentListResponse>
         <!--Optional:-->
         <mes:totalCount>?</mes:totalCount>
         <!--Optional:-->
         <mes:returnedCount>?</mes:returnedCount>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Zero or more repetitions:-->
         <mes:enrollmentComment>
            <typ:id>?</typ:id>
            <typ:enrollments_id>?</typ:enrollments_id>
            <typ:clientId>?</typ:clientId>
            <typ:schedulesId>?</typ:schedulesId>
            <typ:documentId>?</typ:documentId>
            <typ:documentName>?</typ:documentName>
            <typ:comment>?</typ:comment>
            <typ:context>?</typ:context>
            <!--Optional:-->
            <typ:auditInfo>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInfo>
         </mes:enrollmentComment>
         <!--Optional:-->
         <mes:commandStatus>?</mes:commandStatus>
         <!--Optional:-->
         <mes:errorMessage>?</mes:errorMessage>
      </mes:GetEnrollmentCommentListResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentCommentListResponse"/></con:response><con:response name="Response 2" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetEnrollmentCommentListResponse>
         <!--Optional:-->
         <mes:totalCount>?</mes:totalCount>
         <!--Optional:-->
         <mes:returnedCount>?</mes:returnedCount>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Zero or more repetitions:-->
         <mes:enrollmentComment>
            <typ:id>?</typ:id>
            <typ:enrollments_id>?</typ:enrollments_id>
            <typ:clientId>?</typ:clientId>
            <typ:schedulesId>?</typ:schedulesId>
            <typ:documentId>?</typ:documentId>
            <typ:documentName>?</typ:documentName>
            <typ:comment>?</typ:comment>
            <typ:context>?</typ:context>
            <!--Optional:-->
            <typ:auditInfo>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInfo>
         </mes:enrollmentComment>
         <!--Optional:-->
         <mes:commandStatus>?</mes:commandStatus>
         <!--Optional:-->
         <mes:errorMessage>?</mes:errorMessage>
      </mes:GetEnrollmentCommentListResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetEnrollmentCommentListResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="GetSubscriberPayeeList" interface="npnSoap11" operation="GetSubscriberPayeeList"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberPayeeListResponse>
         <!--Optional:-->
         <mes:totalCount>?</mes:totalCount>
         <!--Optional:-->
         <mes:returnedCount>?</mes:returnedCount>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <mes:payeeList>
            <!--Zero or more repetitions:-->
            <typ:payees>
               <!--Optional:-->
               <typ:subscriberId>?</typ:subscriberId>
               <typ:payeeId>?</typ:payeeId>
               <!--Optional:-->
               <typ:externalPayeeId>?</typ:externalPayeeId>
               <typ:subscriberPayeeId>?</typ:subscriberPayeeId>
               <!--Optional:-->
               <typ:payeeName>?</typ:payeeName>
               <!--Optional:-->
               <typ:payeeStatus>?</typ:payeeStatus>
               <!--Optional:-->
               <typ:payeeDescription>?</typ:payeeDescription>
               <!--Optional:-->
               <typ:payeeWebsite>?</typ:payeeWebsite>
               <!--Optional:-->
               <typ:faxNo>?</typ:faxNo>
               <!--Optional:-->
               <typ:phoneNo>?</typ:phoneNo>
               <!--Optional:-->
               <typ:payeeAdresses>
                  <!--Zero or more repetitions:-->
                  <typ:address operation="?">
                     <!--You may enter the following 7 items in any order-->
                     <!--Optional:-->
                     <typ:id>?</typ:id>
                     <!--Optional:-->
                     <typ:externalId>?</typ:externalId>
                     <!--Optional:-->
                     <typ:address1>?</typ:address1>
                     <!--Optional:-->
                     <typ:address2>?</typ:address2>
                     <!--Optional:-->
                     <typ:city>?</typ:city>
                     <!--Optional:-->
                     <typ:state>?</typ:state>
                     <!--Optional:-->
                     <typ:zip>?</typ:zip>
                  </typ:address>
               </typ:payeeAdresses>
               <!--Optional:-->
               <typ:payeeContacts>
                  <!--Zero or more repetitions:-->
                  <typ:contact operation="?">
                     <!--You may enter the following 10 items in any order-->
                     <!--Optional:-->
                     <typ:id>?</typ:id>
                     <!--Optional:-->
                     <typ:externalId>?</typ:externalId>
                     <!--Optional:-->
                     <typ:department>?</typ:department>
                     <typ:name>?</typ:name>
                     <!--Optional:-->
                     <typ:title>?</typ:title>
                     <!--Optional:-->
                     <typ:homePhone ext="?">?</typ:homePhone>
                     <!--Optional:-->
                     <typ:businessPhone ext="?">?</typ:businessPhone>
                     <!--Optional:-->
                     <typ:mobilePhone>?</typ:mobilePhone>
                     <!--Optional:-->
                     <typ:fax>?</typ:fax>
                     <!--Optional:-->
                     <typ:email>?</typ:email>
                  </typ:contact>
               </typ:payeeContacts>
               <!--Optional:-->
               <typ:payeeBankAccounts>
                  <!--Zero or more repetitions:-->
                  <typ:account operation="?">
                     <!--You may enter the following 8 items in any order-->
                     <!--Optional:-->
                     <typ:id>?</typ:id>
                     <!--Optional:-->
                     <typ:externalId>?</typ:externalId>
                     <!--Optional:-->
                     <typ:bankName>?</typ:bankName>
                     <typ:routingNumber>?</typ:routingNumber>
                     <!--Optional:-->
                     <typ:accountHolderName>?</typ:accountHolderName>
                     <!--Optional:-->
                     <typ:accountNumber>?</typ:accountNumber>
                     <!--Optional:-->
                     <typ:accountType>?</typ:accountType>
                     <!--Optional:-->
                     <typ:status>?</typ:status>
                  </typ:account>
               </typ:payeeBankAccounts>
               <!--Optional:-->
               <typ:auditInfo>
                  <!--You may enter the following 6 items in any order-->
                  <typ:createdOn>
                     <typ:date format="?" value="?"/>
                  </typ:createdOn>
                  <typ:createdBy>?</typ:createdBy>
                  <typ:createdUserType>?</typ:createdUserType>
                  <typ:modifiedOn>
                     <typ:date format="?" value="?"/>
                  </typ:modifiedOn>
                  <typ:modifiedBy>?</typ:modifiedBy>
                  <typ:modifiedUserType>?</typ:modifiedUserType>
               </typ:auditInfo>
            </typ:payees>
         </mes:payeeList>
         <mes:commandStatus>?</mes:commandStatus>
         <mes:errorMessage>?</mes:errorMessage>
      </mes:GetSubscriberPayeeListResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeListResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="GetSubscriberPayee" interface="npnSoap11" operation="GetSubscriberPayee"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetSubscriberPayeeResponse>
         <!--Optional:-->
         <mes:payeeId>?</mes:payeeId>
         <mes:payee>
            <!--Optional:-->
            <typ:subscriberId>?</typ:subscriberId>
            <typ:payeeId>?</typ:payeeId>
            <!--Optional:-->
            <typ:externalPayeeId>?</typ:externalPayeeId>
            <typ:subscriberPayeeId>?</typ:subscriberPayeeId>
            <!--Optional:-->
            <typ:payeeName>?</typ:payeeName>
            <!--Optional:-->
            <typ:payeeStatus>?</typ:payeeStatus>
            <!--Optional:-->
            <typ:payeeDescription>?</typ:payeeDescription>
            <!--Optional:-->
            <typ:payeeWebsite>?</typ:payeeWebsite>
            <!--Optional:-->
            <typ:faxNo>?</typ:faxNo>
            <!--Optional:-->
            <typ:phoneNo>?</typ:phoneNo>
            <!--Optional:-->
            <typ:payeeAdresses>
               <!--Zero or more repetitions:-->
               <typ:address operation="?">
                  <!--You may enter the following 7 items in any order-->
                  <!--Optional:-->
                  <typ:id>?</typ:id>
                  <!--Optional:-->
                  <typ:externalId>?</typ:externalId>
                  <!--Optional:-->
                  <typ:address1>?</typ:address1>
                  <!--Optional:-->
                  <typ:address2>?</typ:address2>
                  <!--Optional:-->
                  <typ:city>?</typ:city>
                  <!--Optional:-->
                  <typ:state>?</typ:state>
                  <!--Optional:-->
                  <typ:zip>?</typ:zip>
               </typ:address>
            </typ:payeeAdresses>
            <!--Optional:-->
            <typ:payeeContacts>
               <!--Zero or more repetitions:-->
               <typ:contact operation="?">
                  <!--You may enter the following 10 items in any order-->
                  <!--Optional:-->
                  <typ:id>?</typ:id>
                  <!--Optional:-->
                  <typ:externalId>?</typ:externalId>
                  <!--Optional:-->
                  <typ:department>?</typ:department>
                  <typ:name>?</typ:name>
                  <!--Optional:-->
                  <typ:title>?</typ:title>
                  <!--Optional:-->
                  <typ:homePhone ext="?">?</typ:homePhone>
                  <!--Optional:-->
                  <typ:businessPhone ext="?">?</typ:businessPhone>
                  <!--Optional:-->
                  <typ:mobilePhone>?</typ:mobilePhone>
                  <!--Optional:-->
                  <typ:fax>?</typ:fax>
                  <!--Optional:-->
                  <typ:email>?</typ:email>
               </typ:contact>
            </typ:payeeContacts>
            <!--Optional:-->
            <typ:payeeBankAccounts>
               <!--Zero or more repetitions:-->
               <typ:account operation="?">
                  <!--You may enter the following 8 items in any order-->
                  <!--Optional:-->
                  <typ:id>?</typ:id>
                  <!--Optional:-->
                  <typ:externalId>?</typ:externalId>
                  <!--Optional:-->
                  <typ:bankName>?</typ:bankName>
                  <typ:routingNumber>?</typ:routingNumber>
                  <!--Optional:-->
                  <typ:accountHolderName>?</typ:accountHolderName>
                  <!--Optional:-->
                  <typ:accountNumber>?</typ:accountNumber>
                  <!--Optional:-->
                  <typ:accountType>?</typ:accountType>
                  <!--Optional:-->
                  <typ:status>?</typ:status>
               </typ:account>
            </typ:payeeBankAccounts>
            <!--Optional:-->
            <typ:auditInfo>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInfo>
         </mes:payee>
         <mes:commandStatus>?</mes:commandStatus>
         <mes:errorMessage>?</mes:errorMessage>
      </mes:GetSubscriberPayeeResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetSubscriberPayeeResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="GetClients" interface="npnSoap11" operation="GetClients"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetClientsResponse>
         <!--Optional:-->
         <mes:totalCount>?</mes:totalCount>
         <!--Optional:-->
         <mes:returnedCount>?</mes:returnedCount>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <mes:errorMessage>?</mes:errorMessage>
         <!--Zero or more repetitions:-->
         <mes:client>
            <typ:id>?</typ:id>
            <typ:externalClientId>?</typ:externalClientId>
            <typ:firstName>?</typ:firstName>
            <typ:middleInitial>?</typ:middleInitial>
            <typ:lastName>?</typ:lastName>
            <typ:username>?</typ:username>
            <typ:ssn>?</typ:ssn>
            <typ:dob>
               <typ:date format="?" value="?"/>
            </typ:dob>
            <typ:address1>?</typ:address1>
            <typ:address2>?</typ:address2>
            <typ:city>?</typ:city>
            <typ:state>?</typ:state>
            <typ:zip>?</typ:zip>
            <typ:phone>?</typ:phone>
            <typ:WorkNumber>?</typ:WorkNumber>
            <typ:mobile>?</typ:mobile>
            <typ:email>?</typ:email>
            <typ:totalNoOfDraftsCompleted>?</typ:totalNoOfDraftsCompleted>
            <typ:totalNoOfDrafts>?</typ:totalNoOfDrafts>
            <typ:totalNoOfFeesCompleted>?</typ:totalNoOfFeesCompleted>
            <typ:totalNoOfFees>?</typ:totalNoOfFees>
            <typ:lastDraftDate>
               <typ:date format="?" value="?"/>
            </typ:lastDraftDate>
            <typ:nextDraftDate>
               <typ:date format="?" value="?"/>
            </typ:nextDraftDate>
            <typ:nextDraftAmount>?</typ:nextDraftAmount>
            <typ:nextPaymentDate>
               <typ:date format="?" value="?"/>
            </typ:nextPaymentDate>
            <typ:nextPaymentAmount>?</typ:nextPaymentAmount>
            <!--Optional:-->
            <typ:enrollment>
               <typ:id>?</typ:id>
               <typ:subscriberId>?</typ:subscriberId>
               <typ:spaaAprroval>
                  <typ:approvalId>?</typ:approvalId>
                  <typ:subscriberId>?</typ:subscriberId>
                  <typ:approvedDate>
                     <typ:date format="?" value="?"/>
                  </typ:approvedDate>
                  <typ:approvalComment>?</typ:approvalComment>
                  <typ:approvalStatus>?</typ:approvalStatus>
                  <typ:approvalMode>?</typ:approvalMode>
                  <typ:approvalType>?</typ:approvalType>
                  <!--Optional:-->
                  <typ:approvalsDocument>
                     <typ:documentId>?</typ:documentId>
                     <typ:note>?</typ:note>
                     <typ:name>?</typ:name>
                     <typ:contentType>?</typ:contentType>
                     <typ:base64EncodedContent>?</typ:base64EncodedContent>
                     <!--Optional:-->
                     <typ:auditInformation>
                        <!--You may enter the following 6 items in any order-->
                        <typ:createdOn>
                           <typ:date format="?" value="?"/>
                        </typ:createdOn>
                        <typ:createdBy>?</typ:createdBy>
                        <typ:createdUserType>?</typ:createdUserType>
                        <typ:modifiedOn>
                           <typ:date format="?" value="?"/>
                        </typ:modifiedOn>
                        <typ:modifiedBy>?</typ:modifiedBy>
                        <typ:modifiedUserType>?</typ:modifiedUserType>
                     </typ:auditInformation>
                  </typ:approvalsDocument>
                  <!--Optional:-->
                  <typ:auditInfo>
                     <!--You may enter the following 6 items in any order-->
                     <typ:createdOn>
                        <typ:date format="?" value="?"/>
                     </typ:createdOn>
                     <typ:createdBy>?</typ:createdBy>
                     <typ:createdUserType>?</typ:createdUserType>
                     <typ:modifiedOn>
                        <typ:date format="?" value="?"/>
                     </typ:modifiedOn>
                     <typ:modifiedBy>?</typ:modifiedBy>
                     <typ:modifiedUserType>?</typ:modifiedUserType>
                  </typ:auditInfo>
               </typ:spaaAprroval>
               <typ:enrollmentStatuses>?</typ:enrollmentStatuses>
               <typ:cipStatuses>?</typ:cipStatuses>
               <typ:ofacStatuses>?</typ:ofacStatuses>
               <typ:spaStatuses>?</typ:spaStatuses>
               <typ:enrollDate>
                  <typ:date format="?" value="?"/>
               </typ:enrollDate>
               <typ:isSvaCreated>?</typ:isSvaCreated>
               <typ:allDocumentsSigned>?</typ:allDocumentsSigned>
               <typ:draftApprovalRequired>?</typ:draftApprovalRequired>
               <typ:draftApprovalStatus>?</typ:draftApprovalStatus>
               <typ:draftAmount>?</typ:draftAmount>
               <typ:virtualAcctId>?</typ:virtualAcctId>
               <typ:virtualAcctNo>?</typ:virtualAcctNo>
               <typ:currentBalance>?</typ:currentBalance>
               <typ:pendingBalance>?</typ:pendingBalance>
               <typ:noOfEnrollmentExceptions>?</typ:noOfEnrollmentExceptions>
               <typ:ofacVerifiedDate>
                  <typ:date format="?" value="?"/>
               </typ:ofacVerifiedDate>
               <typ:cipVerifiedDate>
                  <typ:date format="?" value="?"/>
               </typ:cipVerifiedDate>
               <typ:spaaVerifiedDate>
                  <typ:date format="?" value="?"/>
               </typ:spaaVerifiedDate>
               <typ:draftStartDate>
                  <typ:date format="?" value="?"/>
               </typ:draftStartDate>
               <typ:mostRecentAction>?</typ:mostRecentAction>
               <typ:enrollmentFees>
                  <!--Zero or more repetitions:-->
                  <typ:fee>
                     <!--You may enter the following 7 items in any order-->
                     <typ:id>?</typ:id>
                     <typ:subscriberFeeId>?</typ:subscriberFeeId>
                     <typ:type>?</typ:type>
                     <typ:priority>?</typ:priority>
                     <typ:amount>?</typ:amount>
                     <typ:frequency>?</typ:frequency>
                     <!--Optional:-->
                     <typ:auditInfo>
                        <!--You may enter the following 6 items in any order-->
                        <typ:createdOn>
                           <typ:date format="?" value="?"/>
                        </typ:createdOn>
                        <typ:createdBy>?</typ:createdBy>
                        <typ:createdUserType>?</typ:createdUserType>
                        <typ:modifiedOn>
                           <typ:date format="?" value="?"/>
                        </typ:modifiedOn>
                        <typ:modifiedBy>?</typ:modifiedBy>
                        <typ:modifiedUserType>?</typ:modifiedUserType>
                     </typ:auditInfo>
                  </typ:fee>
               </typ:enrollmentFees>
               <!--Optional:-->
               <typ:briefClient>
                  <!--You may enter the following 5 items in any order-->
                  <typ:id>?</typ:id>
                  <typ:externalClientId>?</typ:externalClientId>
                  <typ:firstName>?</typ:firstName>
                  <typ:lastName>?</typ:lastName>
                  <typ:middleInitial>?</typ:middleInitial>
               </typ:briefClient>
               <!--Optional:-->
               <typ:briefSubscriber>
                  <!--You may enter the following 5 items in any order-->
                  <typ:id>?</typ:id>
                  <typ:name>?</typ:name>
                  <typ:phone>?</typ:phone>
                  <typ:email>?</typ:email>
                  <typ:abbreviation>?</typ:abbreviation>
               </typ:briefSubscriber>
               <!--Optional:-->
               <typ:auditInfo>
                  <!--You may enter the following 6 items in any order-->
                  <typ:createdOn>
                     <typ:date format="?" value="?"/>
                  </typ:createdOn>
                  <typ:createdBy>?</typ:createdBy>
                  <typ:createdUserType>?</typ:createdUserType>
                  <typ:modifiedOn>
                     <typ:date format="?" value="?"/>
                  </typ:modifiedOn>
                  <typ:modifiedBy>?</typ:modifiedBy>
                  <typ:modifiedUserType>?</typ:modifiedUserType>
               </typ:auditInfo>
            </typ:enrollment>
            <!--Optional:-->
            <typ:coClients>
               <!--Zero or more repetitions:-->
               <typ:coClient>
                  <typ:coClientId>?</typ:coClientId>
                  <typ:firstname>?</typ:firstname>
                  <typ:middleInitial>?</typ:middleInitial>
                  <typ:lastname>?</typ:lastname>
                  <typ:ssn>?</typ:ssn>
                  <typ:dob>
                     <typ:date format="?" value="?"/>
                  </typ:dob>
                  <typ:phone>?</typ:phone>
                  <typ:WorkNumber>?</typ:WorkNumber>
                  <typ:mobile>?</typ:mobile>
                  <typ:email>?</typ:email>
                  <!--Optional:-->
                  <typ:auditInfo>
                     <!--You may enter the following 6 items in any order-->
                     <typ:createdOn>
                        <typ:date format="?" value="?"/>
                     </typ:createdOn>
                     <typ:createdBy>?</typ:createdBy>
                     <typ:createdUserType>?</typ:createdUserType>
                     <typ:modifiedOn>
                        <typ:date format="?" value="?"/>
                     </typ:modifiedOn>
                     <typ:modifiedBy>?</typ:modifiedBy>
                     <typ:modifiedUserType>?</typ:modifiedUserType>
                  </typ:auditInfo>
               </typ:coClient>
            </typ:coClients>
            <!--Optional:-->
            <typ:auditInfo>
               <!--You may enter the following 6 items in any order-->
               <typ:createdOn>
                  <typ:date format="?" value="?"/>
               </typ:createdOn>
               <typ:createdBy>?</typ:createdBy>
               <typ:createdUserType>?</typ:createdUserType>
               <typ:modifiedOn>
                  <typ:date format="?" value="?"/>
               </typ:modifiedOn>
               <typ:modifiedBy>?</typ:modifiedBy>
               <typ:modifiedUserType>?</typ:modifiedUserType>
            </typ:auditInfo>
            <!--Optional:-->
            <typ:accountInfo>?</typ:accountInfo>
            <!--Optional:-->
            <typ:externalReferenceNumber>?</typ:externalReferenceNumber>
            <!--Optional:-->
            <typ:enrollmentAttributesList>
               <!--1 or more repetitions:-->
               <typ:attribute name="?" value="?"/>
            </typ:enrollmentAttributesList>
            <typ:affiliates>
               <!--Zero or more repetitions:-->
               <typ:affiliate>
                  <!--You may enter the following 43 items in any order-->
                  <typ:subscriberId>?</typ:subscriberId>
                  <!--Optional:-->
                  <typ:affiliateId>?</typ:affiliateId>
                  <!--Optional:-->
                  <typ:externalAffiliateId>?</typ:externalAffiliateId>
                  <!--Optional:-->
                  <typ:parentAffiliateId>?</typ:parentAffiliateId>
                  <!--Optional:-->
                  <typ:parentExternalAffiliateId>?</typ:parentExternalAffiliateId>
                  <!--Optional:-->
                  <typ:externalId>?</typ:externalId>
                  <typ:affiliateType>?</typ:affiliateType>
                  <typ:name>?</typ:name>
                  <typ:address1>?</typ:address1>
                  <!--Optional:-->
                  <typ:address2>?</typ:address2>
                  <typ:city>?</typ:city>
                  <typ:state>?</typ:state>
                  <typ:zipcode>?</typ:zipcode>
                  <typ:email>?</typ:email>
                  <typ:phone>?</typ:phone>
                  <!--Optional:-->
                  <typ:fax>?</typ:fax>
                  <typ:businessType>?</typ:businessType>
                  <!--Optional:-->
                  <typ:taxId>?</typ:taxId>
                  <!--Optional:-->
                  <typ:payoutMethod>ACH</typ:payoutMethod>
                  <!--Optional:-->
                  <typ:payoutFrequency>MONTHLY</typ:payoutFrequency>
                  <!--Optional:-->
                  <typ:payoutFrequencyValue>15</typ:payoutFrequencyValue>
                  <!--Optional:-->
                  <typ:bankName>?</typ:bankName>
                  <!--Optional:-->
                  <typ:routingNunber>?</typ:routingNunber>
                  <!--Optional:-->
                  <typ:accountType>?</typ:accountType>
                  <!--Optional:-->
                  <typ:accountNumber>?</typ:accountNumber>
                  <!--Optional:-->
                  <typ:holdersName>?</typ:holdersName>
                  <!--Optional:-->
                  <typ:bankAddress1>?</typ:bankAddress1>
                  <!--Optional:-->
                  <typ:bankAddress2>?</typ:bankAddress2>
                  <!--Optional:-->
                  <typ:bankCity>?</typ:bankCity>
                  <!--Optional:-->
                  <typ:bankState>?</typ:bankState>
                  <!--Optional:-->
                  <typ:bankZipcode>?</typ:bankZipcode>
                  <!--Optional:-->
                  <typ:signatureDate>
                     <typ:date format="?" value="?"/>
                  </typ:signatureDate>
                  <!--Optional:-->
                  <typ:status>?</typ:status>
                  <!--Optional:-->
                  <typ:collectedBalance>?</typ:collectedBalance>
                  <!--Optional:-->
                  <typ:pendingBalance>?</typ:pendingBalance>
                  <!--Optional:-->
                  <typ:isPaidAsAdvance>?</typ:isPaidAsAdvance>
                  <!--Optional:-->
                  <typ:checkAddress>
                     <!--You may enter the following 5 items in any order-->
                     <!--Optional:-->
                     <typ:address1>?</typ:address1>
                     <!--Optional:-->
                     <typ:address2>?</typ:address2>
                     <!--Optional:-->
                     <typ:city>?</typ:city>
                     <!--Optional:-->
                     <typ:state>?</typ:state>
                     <!--Optional:-->
                     <typ:zip>?</typ:zip>
                  </typ:checkAddress>
                  <!--Optional:-->
                  <typ:isReferral>?</typ:isReferral>
                  <!--Optional:-->
                  <typ:referralStartDate>
                     <typ:date format="?" value="?"/>
                  </typ:referralStartDate>
                  <!--Optional:-->
                  <typ:referralEndDate>
                     <typ:date format="?" value="?"/>
                  </typ:referralEndDate>
                  <!--Optional:-->
                  <typ:fixed>
                     <!--Zero or more repetitions:-->
                     <typ:cycle>
                        <!--You may enter the following 3 items in any order-->
                        <typ:distType>?</typ:distType>
                        <typ:cycleId>?</typ:cycleId>
                        <typ:value>?</typ:value>
                     </typ:cycle>
                  </typ:fixed>
                  <!--Optional:-->
                  <typ:payoutRule>?</typ:payoutRule>
                  <!--Optional:-->
                  <typ:auditInformation>
                     <!--You may enter the following 6 items in any order-->
                     <typ:createdOn>
                        <typ:date format="?" value="?"/>
                     </typ:createdOn>
                     <typ:createdBy>?</typ:createdBy>
                     <typ:createdUserType>?</typ:createdUserType>
                     <typ:modifiedOn>
                        <typ:date format="?" value="?"/>
                     </typ:modifiedOn>
                     <typ:modifiedBy>?</typ:modifiedBy>
                     <typ:modifiedUserType>?</typ:modifiedUserType>
                  </typ:auditInformation>
               </typ:affiliate>
            </typ:affiliates>
            <typ:affiliateGroup>
               <!--You may enter the following 3 items in any order-->
               <typ:Id>?</typ:Id>
               <!--Optional:-->
               <typ:name>?</typ:name>
               <!--Optional:-->
               <typ:externalRulesetId>?</typ:externalRulesetId>
            </typ:affiliateGroup>
            <typ:affiliateFees>
               <!--Zero or more repetitions:-->
               <typ:fees>
                  <!--You may enter the following 13 items in any order-->
                  <!--Optional:-->
                  <typ:id>?</typ:id>
                  <typ:feeId>?</typ:feeId>
                  <typ:externalfeeId>?</typ:externalfeeId>
                  <typ:type>?</typ:type>
                  <typ:owner>?</typ:owner>
                  <typ:name>?</typ:name>
                  <typ:source>?</typ:source>
                  <typ:destination>?</typ:destination>
                  <typ:description>?</typ:description>
                  <typ:required>?</typ:required>
                  <typ:priority>?</typ:priority>
                  <typ:amount>?</typ:amount>
                  <!--Optional:-->
                  <typ:status>?</typ:status>
               </typ:fees>
            </typ:affiliateFees>
         </mes:client>
      </mes:GetClientsResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetClientsResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="GetTransactionListByIds" interface="npnSoap11" operation="GetTransactionListByIds"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:defaultResponse>Response 1</con:defaultResponse><con:response name="Response 1" encoding="UTF-8"><con:settings/><con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="http://nationalpayment.net/ws/schemas/messages" xmlns:typ="http://nationalpayment.net/ws/schemas/types">
   <soapenv:Header/>
   <soapenv:Body>
      <mes:GetTransactionListByIdsResponse>
         <!--You may enter the following 4 items in any order-->
         <mes:returnCount>?</mes:returnCount>
         <mes:totalCount>?</mes:totalCount>
         <!--Optional:-->
         <mes:pageNumber>?</mes:pageNumber>
         <!--Optional:-->
         <mes:transactions>
            <!--Zero or more repetitions:-->
            <typ:transaction>
               <!--You may enter the following 29 items in any order-->
               <typ:id>?</typ:id>
               <typ:enrollmentId>?</typ:enrollmentId>
               <typ:client>
                  <!--You may enter the following 5 items in any order-->
                  <typ:id>?</typ:id>
                  <typ:externalClientId>?</typ:externalClientId>
                  <typ:firstName>?</typ:firstName>
                  <typ:lastName>?</typ:lastName>
                  <typ:middleInitial>?</typ:middleInitial>
               </typ:client>
               <typ:scheduleId>?</typ:scheduleId>
               <typ:status>?</typ:status>
               <typ:class>?</typ:class>
               <typ:type>?</typ:type>
               <typ:transactionDate>
                  <typ:date format="?" value="?"/>
               </typ:transactionDate>
               <typ:processedDate>
                  <typ:date format="?" value="?"/>
               </typ:processedDate>
               <typ:estimatedCompletedDate>
                  <typ:date format="?" value="?"/>
               </typ:estimatedCompletedDate>
               <typ:statusDate>
                  <typ:date format="?" value="?"/>
               </typ:statusDate>
               <typ:scheduledDate>
                  <typ:date format="?" value="?"/>
               </typ:scheduledDate>
               <!--Optional:-->
               <typ:updatedBy>?</typ:updatedBy>
               <typ:fromAccount>?</typ:fromAccount>
               <typ:toAccount>?</typ:toAccount>
               <typ:amount>?</typ:amount>
               <typ:svaBalance>?</typ:svaBalance>
               <!--Optional:-->
               <typ:auditInformation>
                  <!--You may enter the following 6 items in any order-->
                  <typ:createdOn>
                     <typ:date format="?" value="?"/>
                  </typ:createdOn>
                  <typ:createdBy>?</typ:createdBy>
                  <typ:createdUserType>?</typ:createdUserType>
                  <typ:modifiedOn>
                     <typ:date format="?" value="?"/>
                  </typ:modifiedOn>
                  <typ:modifiedBy>?</typ:modifiedBy>
                  <typ:modifiedUserType>?</typ:modifiedUserType>
               </typ:auditInformation>
               <typ:externalReferenceId>?</typ:externalReferenceId>
               <!--Optional:-->
               <typ:checkNumber>?</typ:checkNumber>
               <!--Optional:-->
               <typ:feeId>?</typ:feeId>
               <typ:externalFeeId>?</typ:externalFeeId>
               <typ:feeName>?</typ:feeName>
               <typ:feeType>?</typ:feeType>
               <typ:externalExceptionCode>?</typ:externalExceptionCode>
               <typ:transactionProcessorExceptionCode>?</typ:transactionProcessorExceptionCode>
               <typ:transactionProcessorExceptionName>?</typ:transactionProcessorExceptionName>
               <!--Optional:-->
               <typ:enrollmentExceptions>
                  <!--Zero or more repetitions:-->
                  <typ:enrollmentExceptions>
                     <typ:transactionDate>?</typ:transactionDate>
                     <typ:transactionId>?</typ:transactionId>
                     <typ:scheduleId>?</typ:scheduleId>
                     <typ:transactionStatus>?</typ:transactionStatus>
                     <typ:transactionClass>?</typ:transactionClass>
                     <typ:clientId>?</typ:clientId>
                     <typ:clientFirstName>?</typ:clientFirstName>
                     <typ:clientLastName>?</typ:clientLastName>
                     <typ:shortDetail>?</typ:shortDetail>
                     <typ:amount>?</typ:amount>
                     <typ:nsfAmount>?</typ:nsfAmount>
                     <typ:code>?</typ:code>
                     <typ:reason>?</typ:reason>
                  </typ:enrollmentExceptions>
               </typ:enrollmentExceptions>
               <typ:SubscriberId>?</typ:SubscriberId>
            </typ:transaction>
         </mes:transactions>
      </mes:GetTransactionListByIdsResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://nationalpayment.net/ws/definitions/npn/GetTransactionListByIdsResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:properties/></con:mockService><con:properties><con:property><con:name>TestDataFileLocation</con:name><con:value>C:\users\Nidhi\Documents\TestData\createdraftSchedule.xls</con:value></con:property><con:property><con:name>RequestName</con:name><con:value>createdraftSchedule</con:value></con:property><con:property><con:name>SetNo</con:name><con:value>1</con:value></con:property></con:properties><con:wssContainer/><con:sensitiveInformation/></con:soapui-project>